)	11767.5
:	5223.0
=	4989.25
]	4985.714285714286
.	4633.125
[	4453.5
,	3583.0
1	3315.6666666666665
i	2016.5
for	1668.0
in	1650.357142857143
0	1604.5454545454545
def	1587.3846153846155
-	1516.75
+	1353.5625
int	1338.8333333333333
n	1289.5294117647059
if	1266.25
range	1215.7727272727273
input	1215.5714285714287
return	1215.0
sys	1192.8
x	1166.5217391304348
*	1162.375
a	1014.1923076923077
'	999.8888888888889
import	968.1785714285714
split	932.9354838709677
"	931.5
N	910.3103448275862
==	857.78125
2	802.1818181818181
readline	643.1428571428571
map	642.9166666666666
self	638.6756756756756
b	626.2647058823529
s	520.625
print	510.46153846153845
stdin	503.5
**	397.04878048780483
j	385.78571428571433
10	357.33333333333337
A	354.3863636363636
main	343.8837209302326
ans	333.7608695652174
list	264.70212765957444
+=	260.1875
k	259.9
from	252.24489795918367
c	244.1764705882353
y	229.09615384615387
v	193.94444444444446
p	191.67924528301887
%	153.90909090909093
append	147.06779661016947
S	147.0
d	146.15517241379308
else	140.58928571428572
r	128.75
len	128.21311475409834
m	117.46774193548384
_	113.52380952380952
while	98.390625
t	85.0769230769231
dp	75.94029850746267
mod	74.59090909090907
<	71.13235294117646
//	53.17391304347825
B	50.83098591549293
base	46.66814159292035
node	46.207048458149785
y0	46.13333333333334
l	46.071428571428555
end	46.036199095022624
find	45.75
%=	45.55405405405405
sep	45.522727272727266
eps	45.513888888888886
id	45.5091743119266
parent	45.40259740259741
tree	45.29694323144105
line	45.24302788844622
edge	45.08974358974359
visited	45.0762331838565
dist	45.02325581395348
List	45.013698630136986
random	45.00921658986175
i8	44.96120689655173
sqrt	44.86904761904762
y2	44.86486486486487
LI_	44.847826086956516
que	44.65957446808511
p0	44.60267857142857
LF	44.52360515021459
pop	44.498023715415016
pi	44.40234375
bisect_left	44.39075630252101
#!/usr/bin/env python3	44.38306451612904
reverse	44.345679012345684
60	44.32781456953643
enumerate	44.275000000000006
dd	44.23305084745763
p2	44.18181818181819
 	44.177419354838705
tuple	44.158730158730165
ord	44.15853658536585
global	44.15352697095436
flush	44.12992125984252
cards	44.069306930693074
sorted	44.05633802816901
#	44.04280155642023
998244353	44.0
NO	44.0
accumulate	43.97489539748953
val	43.946721311475414
row	43.91554054054055
V	43.86934673366834
s2	43.857594936708864
pos	43.849999999999994
start	43.83009708737865
heappop	43.82446808510639
heapify	43.81730769230769
^	43.8125
x0	43.810126582278485
dx	43.801948051948045
not	43.773584905660385
now	43.769230769230774
1.0	43.76470588235294
*=	43.747933884297524
inpl	43.73378839590444
readlines	43.71518987341773
ii	43.709790209790214
->	43.68656716417911
reduce	43.68604651162791
resolve	43.66878980891721
func	43.64646464646465
zip	43.64285714285714
mi	43.632183908045974
13	43.62145110410094
numpy	43.620000000000005
LIST	43.602272727272734
fac	43.58803986710963
nv	43.58657243816255
real	43.58018867924528
aa	43.57507987220447
mid	43.5625
right	43.559782608695656
rev	43.55737704918033
product	43.55339805825243
100	43.55102040816327
8	43.53738317757009
to	43.52709359605912
heappush	43.5
re	43.49732620320856
exit	43.46969696969697
1000	43.46273291925466
permutations	43.45918367346938
combinations	43.42160278745645
fractions	43.390243902439025
li	43.38679245283019
g2	43.37919463087249
lcm	43.33944954128441
factorial	43.334394904458605
dfs	43.33333333333334
E	43.33204633204633
graph	43.30645161290323
edges	43.303921568627445
njit	43.29225352112677
used	43.28865979381443
fact	43.286259541984734
index	43.27536231884058
calc	43.26415094339623
cache	43.23529411764706
xs	43.186440677966104
YES	43.181494661921704
nums	43.153605015673975
set	43.14705882352942
ok	43.13541666666667
format	43.118902439024396
ddn	43.11371237458194
cost	43.1090047393365
imag	43.10396039603961
g1	43.0952380952381
mask	43.08992805755396
pow	43.076142131979694
cross	43.06109324758843
inverse	43.05211726384364
int64	43.01027397260275
st	43.00925925925925
U	42.980769230769226
temp	42.972527472527474
20	42.955882352941174
pf	42.942965779467684
join	42.93680297397769
MI	42.92857142857143
stdout	42.925465838509325
MAP	42.921875
ceil	42.89969604863222
memo	42.88297872340425
c2	42.851211072664356
time	42.84816753926701
left	42.84375
}	42.803571428571416
c1	42.784946236559136
inp	42.78461538461538
x2	42.73410404624278
as	42.72596153846153
18	42.70652173913044
bisect_right	42.69158878504673
s1	42.68181818181819
rr	42.64835164835165
lst	42.611111111111114
par	42.59550561797752
al	42.56896551724138
add	42.56476683937824
N0	42.56134969325153
idx	42.529069767441854
inv	42.48214285714286
decode	42.46525679758308
key	42.40340909090909
numba	42.397111913357406
check	42.33211678832117
\n	42.30769230769231
>>	42.28782287822878
ab	42.26492537313433
Y	42.26229508196721
vs	42.25
LS	42.203125
p1	42.17142857142858
root	42.15083798882682
continue	42.12269938650306
ar	42.03603603603604
cur	42.018518518518505
result	42.018181818181816
0.5	41.98520710059172
array	41.970414201183445
queue	41.966911764705884
arr	41.948275862068954
Yes	41.932989690721655
strip	41.8932584269663
numbers	41.82335329341318
bit	41.77876106194691
functools	41.75838926174498
Q	41.69999999999999
F	41.69060773480663
No	41.68877551020408
string	41.65562913907286
{	41.646706586826355
size	41.64406779661016
Counter	41.63461538461539
x1	41.625
answer	41.61290322580646
o	41.61194029850746
ret	41.60784313725489
6	41.60389610389609
ls	41.57352941176471
z	41.41666666666666
ng	41.40178571428571
mx	41.369501466275665
y1	41.363636363636374
G	41.23780487804879
cap	41.19287833827893
@	41.16666666666667
n2	40.97413793103448
Z	40.96501457725948
run	40.779369627507165
operator	40.76453488372093
yield	40.58571428571429
INT	40.565217391304344
data	40.5
# -*- coding: utf-8 -*-	40.3931623931624
MAX	40.36705202312139
dy	40.20170454545455
v1	40.17002881844381
next	40.01133144475921
|	39.891364902506965
prev	39.82203389830508
items	39.70833333333333
1000000007	39.63380281690141
pp	39.631147540983605
mp	39.526315789473685
parents	39.4550408719346
bit_length	39.44662921348315
//=	39.41823056300268
get	39.34530386740332
II	39.27989130434783
lru_cache	39.260504201680675
x3	39.25
26	39.24866310160428
complex	39.16528925619835
AB	39.10569105691057
y3	39.08661417322835
flag	39.08
pre	39.07541899441341
decimal	38.98626373626374
n1	38.96649484536083
iroha	38.932432432432435
op	38.924083769633505
px	38.912234042553195
upper	38.80976863753213
stack	38.8082191780822
total	38.762402088772845
weight	38.76010781671159
divmod	38.745358090185675
length	38.65384615384615
typing	38.6015625
fr	38.58870967741935
mul	38.57936507936508
col	38.49872122762148
tbl	38.44155844155844
args	38.41424802110818
Node	38.34438775510204
d1	38.28238341968912
prime	38.19083969465649
Lsq	38.12403100775194
cc	38.03807106598985
comb	37.88607594936709
input_int_list	37.734848484848484
table	37.584382871536526
itemgetter	37.43467336683417
insert	37.407407407407405
z1	37.285714285714285
command	37.26354679802956
r1	37.1375
ni	37.12039312039312
merge	36.99002493765586
os	36.97794117647059
bx	36.843283582089555
limit	36.836185819070906
defaultdict	36.831081081081095
by	36.69727047146402
digits	36.69512195121951
try	36.59090909090909
dtype	36.55474452554745
pro	36.551980198019805
ascii_lowercase	36.45584725536993
ind	36.41504854368932
is_prime	36.32142857142857
fn	36.276029055690074
value	36.187648456057005
sa	36.13768115942029
diff	36.05450236966825
ox	36.0
unite	35.92198581560284
oy	35.86298076923077
sm	35.79009433962264
dot	35.726618705035975
lis	35.65882352941176
popleft	35.528169014084504
utf-8	35.39812646370024
path	35.39729119638826
is	35.277027027027025
4	35.27083333333334
kaijo_memo	35.268691588785046
^=	35.157303370786515
gyaku_kaijo_memo	35.13986013986014
g	35.13793103448276
di	35.130434782608695
pass	35.03811659192825
gcd	35.02054794520549
i2	35.01162790697674
# coding: utf-8	35.00684931506849
#!/usr/bin/env python	34.919463087248324
or	34.918367346938766
maxi	34.88399071925754
replace	34.88382687927107
input_int	34.801339285714285
ri	34.76136363636363
first	34.75694444444444
groupby	34.6837416481069
sin	34.648471615720524
UnionFind	34.63945578231292
nx	34.63048498845266
rows_number	34.56666666666667
ascii_uppercase	34.5359477124183
#import numpy as np	34.51809954751131
in_nn	34.504608294930875
zeros	34.450110864745014
16	34.42391304347826
ax	34.37931034482759
input_value	34.334070796460175
sub	34.31236442516269
ay	34.2545871559633
heights	34.21854304635762
list1	34.201298701298704
costs	34.10352422907489
50	34.090712742980564
in_n	33.989010989010985
pattern	33.980603448275865
L2	33.875
py	33.87096774193548
seq	33.761802575107296
sieve	33.76148796498906
nxt	33.65310492505353
Decimal	33.544871794871796
input_list	33.437100213219615
__init__	33.41958041958043
.5	33.329787234042556
except	33.28125
floor	33.22292993630573
cos	33.17879417879418
i1	33.11652542372882
keys	33.07676348547718
d2	33.010570824524315
t1	32.975155279503106
in_s	32.90506329113924
matrix	32.87396694214876
in_map	32.8
test	32.77319587628866
O	32.695378151260506
forward	32.67283950617284
dist2	32.59119496855346
top	32.572895277207394
rec	32.48744769874477
sp	32.47336065573771
z0	32.38413361169102
ai	32.374233128834355
tokens	32.275510204081634
r2	32.17718940936864
|=	32.12151394422311
mapt	32.079268292682926
SI	32.02783300198807
L1	31.981744421906697
sum	31.964285714285722
card	31.93452380952381
12	31.932038834951456
sx	31.884615384615387
pw	31.843023255813954
mn	31.84158415841584
counter	31.78787878787879
reversed	31.75435203094778
LR	31.749011857707508
dp1	31.69153225806452
tail	31.666023166023166
int1	31.65680473372781
power	31.59557344064386
b1	31.578034682080926
seen	31.56496062992126
judge	31.548022598870055
depth	31.5
cmb	31.490384615384613
DP	31.473477406679763
state	31.464285714285715
sort	31.413043478260875
ma	31.404809619238478
repeat	31.40307101727447
rect	31.38235294117647
no	31.380863039399628
word	31.316091954022987
v2	31.310000000000002
prv	31.29775280898876
ys	31.291585127201564
a1	31.22944550669216
From	31.215568862275447
dict	31.214953271028037
rs	31.201171875
#-*-coding:utf-8-*-	31.143129770992367
mapint	31.132462686567166
a2	31.111111111111114
15	31.057142857142857
ns	31.05027932960894
rows	31.021400778210115
bc	30.971482889733842
>>=	30.968401486988846
point	30.88682745825603
pa	30.88614800759013
h1	30.805555555555557
acc	30.801136363636367
class	30.7659574468085
h2	30.724584103512015
aaa	30.716446124763706
<<	30.664233576642346
log2	30.64391143911439
cyclic_cost	30.632075471698116
5	30.584507042253534
deepcopy	30.56353591160221
ary	30.483455882352942
values	30.403669724770644
xi	30.324175824175825
buff	30.31663685152057
head	30.24497257769653
l1	30.24107142857143
copy	30.179856115107924
assert	30.166058394160586
11	30.165775401069517
rt	30.090747330960852
ins	30.087431693989068
out	30.01598579040853
nodes	30.009090909090908
tax	29.941489361702125
add_edge	29.93103448275862
acos	29.86725663716814
item	29.85326086956522
step	29.793286219081274
bl	29.77576853526221
EPS	29.71957671957672
even	29.698555956678703
m1	29.646126760563384
sy	29.62162162162162
bfs	29.572934973637963
fact_inv	29.54496402877698
ci	29.5
dp2	29.468581687612208
abcdefghijklmnopqrstuvwxyz	29.427320490367777
mat	29.392473118279568
open	29.354895104895107
Input	29.282722513089006
radians	29.22959183673469
field	29.210801393728225
NI	29.161290322580648
city	29.139130434782608
30	29.093220338983052
dx1	29.067708333333336
divisors	29.025380710659896
dy1	28.99653379549393
char	28.957770270270274
imos	28.925605536332178
strCmd	28.89038785834739
grundy	28.854922279792746
number	28.823232323232325
input_methods	28.78448275862069
sv	28.7563025210084
ANS	28.714285714285715
m2	28.689597315436245
theta	28.644329896907216
atan	28.62311557788945
order	28.5746140651801
arange	28.55685618729097
work	28.505136986301373
distance	28.490818030050086
odd	28.435897435897438
maxsize	28.424999999999997
object	28.400974025974023
dpb	28.36689419795222
yi	28.359400998336106
extend	28.3387358184765
To	28.298126064735946
AL	28.294019933554814
all	28.276699029126213
color	28.228855721393032
bin	28.214862681744748
file	28.163907284768214
500	28.153225806451616
p3	28.099173553719005
cs	28.091787439613526
N1	28.034653465346537
cmd	28.030546623794216
bs	27.97034596375618
SegmentTree	27.969502407704653
2147483647	27.908653846153847
ny	27.90625
union	27.848
target_stack	27.8423645320197
empty	27.787539936102235
rest	27.778688524590166
ct	27.727272727272727
nt	27.715220949263504
asin	27.667197452229303
ta	27.651960784313722
insort_left	27.607313195548493
curpos	27.588907014681894
dw	27.54761904761905
abs	27.529850746268664
cols	27.52605863192182
sign	27.48811410459588
Min	27.46341463414634
p2D	27.428797468354432
getval	27.3696682464455
# sys.setrecursionlimit(100000)	27.31072555205047
FACT	27.251968503937007
P	27.22222222222223
adj	27.193396226415096
_node	27.135007849293565
ra	27.076802507836987
rb	27.018779342723008
last	26.9609375
None	26.933823529411768
todo	26.90327613104524
sortx	26.845794392523366
ss	26.840909090909093
sorty	26.788491446345255
primes	26.786686838124055
taro	26.73262839879154
Fraction	26.73136645962733
64	26.678733031674206
101	26.674418604651166
masks	26.625
_parent	26.61764705882353
ndp	26.57142857142857
lb	26.561051004636788
parse	26.51801801801802
t2	26.504629629629626
xy	26.464767616191907
cross3	26.44838212634823
nu	26.41167664670659
P1	26.39230769230769
de	26.35874439461883
pb	26.336405529953915
# import numpy as np	26.30597014925373
dx0	26.280674846625764
dep	26.253353204172875
dy0	26.225114854517614
hypot	26.200892857142854
distance_table	26.169724770642205
tan	26.14858841010401
mem	26.114503816793892
degrees	26.096439169139465
ddp	26.059451219512198
combinations_with_replacement	26.044444444444444
const	26.00456621004566
insort	25.99260355029586
pm	25.94984802431611
ZIP	25.940915805022158
db	25.895295902883156
#mod = 998244353	25.889380530973455
#decimal.getcontext().prec = 10	25.8379970544919
update	25.786764705882355
cumsum	25.735682819383257
kouho	25.684750733137832
z2	25.633967789165446
chr	25.583333333333336
combi	25.532846715328468
ikimasu	25.48250728862974
ina	25.432314410480352
31	25.382267441860463
grid	25.332365747460088
iterate_tokens	25.282608695652172
in_nl	25.23299565846599
mark	25.183526011560694
sz	25.134199134199136
s_count	25.085014409221905
100000	25.037709497206706
t_count	25.035971223021583
raw_input	24.99163179916318
1j	24.98706896551724
conv	24.945682451253482
dominoes	24.938307030129124
yes	24.899860917941588
source	24.889684813753583
mins	24.854166666666664
sums	24.841201716738198
input_str	24.80859916782247
rank	24.792857142857144
lower	24.763157894736842
clipboard	24.744650499286735
adj_matrix	24.717842323651453
input_method	24.6965811965812
nd	24.67265193370166
tin	24.648648648648646
smallest	24.627586206896552
isTest	24.600852272727273
vi	24.582644628099175
19	24.5531914893617
wi	24.537826685006877
Vs	24.505665722379604
hanako	24.49313186813187
dice	24.45827439886846
datetime	24.44855967078189
da	24.41101694915254
nmax	24.4041095890411
cmod	24.363892806770096
loop	24.359781121751027
collections	24.33783783783781
o1	24.316901408450704
# 998244353	24.315573770491802
numbers_list	24.27148703956344
count_d	24.270042194092824
faci	24.2275204359673
401	24.223314606741575
i4	24.183673469387756
now_num	24.176718092566617
es	24.139945652173914
Nsq	24.130252100840337
SS	24.096336499321573
w1	24.083916083916087
red	24.052845528455286
TUPLE	24.009472259810558
!=	24.0
route	23.966216216216218
axis	23.923076923076923
AC	23.880053908355794
chain	23.8371467025572
# type: int	23.794354838709676
tmp1	23.751677852348994
beg	23.70911528150134
pprint	23.666666666666668
it	23.62433155080214
iterable	23.582109479305743
lazy	23.54
ie	23.498002663115845
Edge	23.456117021276597
1000000	23.41434262948207
minimum	23.372679045092838
find_parent	23.33112582781457
signature	23.28968253968254
ABC	23.248348745046236
W	23.20792079207922
water	23.20712401055409
query	23.16600790513834
base_t	23.125
STR	23.084099868593956
find_root	23.043307086614174
yen	23.00262123197903
qy	22.962041884816752
e	22.939393939393938
L0	22.92156862745098
x_max	22.881201044386422
solve	22.86597938144331
x_min	22.840938722294656
restaurants	22.80078125
ans1	22.76072821846554
point_size	22.72077922077922
As	22.68093385214008
one	22.64119170984456
sink	22.60155239327296
half	22.56201550387597
text	22.52258064516129
url	22.483247422680414
keta	22.444015444015445
cnt	22.40625
ps	22.404884318766065
ril	22.365853658536587
aball	22.326923076923077
fl	22.28809218950064
read_list	22.24936061381074
h_point	22.21072796934866
_n	22.203703703703702
cumprod	22.17219387755102
si	22.167694204685574
#1 line 1 int	22.133757961783438
maxs	22.13177339901478
del	22.095940959409592
#1 line n int	22.095419847328245
Graph	22.06019656019656
#1 line 1 string	22.0571791613723
dj	22.024539877300615
#1 line n strings	22.019035532994923
32	21.988970588235293
com_n	21.980988593155892
dc	21.953488372093023
su	21.943037974683545
other	21.918092909535453
days	21.90518331226296
~	21.882783882783883
file_input	21.867424242424242
lvl	21.847560975609756
f_i	21.829760403530894
cand	21.812423873325212
star	21.792191435768263
BIT	21.777372262773724
C1	21.754716981132077
an	21.742405832320777
17	21.717336683417084
# type: str	21.70752427184466
buget	21.680050188205772
factorials	21.672727272727272
dest	21.642857142857142
finvs	21.638014527845037
timer	21.60575719649562
LLI	21.603385731559854
init	21.568840579710145
sec	21.56875
X	21.55000000000001
97	21.53437876960193
xor	21.53183520599251
hi	21.5
buf	21.49501246882793
Queue	21.465703971119133
priority	21.458281444582813
dictionary	21.431490384615383
c0	21.421641791044777
accumP	21.39735894357743
max_a	21.385093167701864
sushis	21.363309352517987
gp	21.34863523573201
10000000	21.32934131736527
cd	21.312267657992564
b2	21.295454545454547
dark	21.275990099009903
term	21.261648745519715
to1d	21.239802224969097
mini	21.227923627684966
f_inf	21.194278903456496
maxheap	21.160714285714285
score	21.127229488703925
a0	21.093824228028502
Max	21.060498220640568
group	21.027251184834125
sugar	20.994082840236686
nmx	20.96099290780142
7	20.958904109589014
uf	20.92798110979929
inf	20.911764705882348
_size	20.89504716981132
gx	20.862190812720847
gy	20.82941176470588
qx	20.796709753231493
do	20.764084507042252
clist	20.73153575615475
# -*- coding:utf-8 -*-	20.728813559322035
C2	20.69906323185012
NA	20.69864559819413
div	20.668545659526494
minedge	20.666666666666668
same	20.638513513513512
list2	20.634345794392523
rn	20.608548931383577
fi	20.602100350058343
s0	20.578651685393258
area	20.56993006993007
s2list	20.54882154882155
inlis	20.537834691501747
25	20.519058295964125
results	20.50581395348837
minj	20.48936170212766
arrA	20.473867595818817
dict1	20.459731543624162
read_values	20.44199535962877
ward	20.43016759776536
search	20.410196987253766
strTxt	20.400669642857142
FT	20.37847222222222
h	20.377551020408163
f'	20.37123745819398
lt	20.346820809248555
startswith	20.34187082405345
com_r	20.31524249422633
board	20.31256952169077
inputEnzan	20.283737024221452
inpl_str	20.283333333333335
backward	20.25416204217536
allProcessList	20.252304147465438
#print(dp)	20.225055432372507
target_num	20.220943613348677
readinput	20.196013289036546
ks	20.189655172413794
0.1	20.167035398230087
Q1	20.158438576349024
# import pandas as pd	20.138121546961326
First	20.12729357798165
List[int]	20.10927152317881
words	20.096219931271477
gyaku_kaijo	20.080485115766262
coeff	20.065217391304348
nCr	20.051762114537446
tb	20.034285714285716
#from collections import deque	20.023102310231025
ver	20.003424657534246
dic	19.994505494505493
info_list	19.972633979475486
51	19.96597145993414
sb	19.941913439635535
int32	19.9375
e1	19.911262798634812
dh	19.90909090909091
abc_str	19.88074398249453
e2	19.880681818181817
&	19.85714285714286
small	19.852459016393443
mb	19.85017026106697
origin	19.824235807860262
factors	19.81972789115646
print_elements	19.796074154852782
capacity	19.789354473386183
binary_search	19.76797385620915
w2	19.759049773755656
remove	19.73993471164309
FACT_INV	19.71195652173913
ValueError	19.684039087947884
vv	19.656182212581346
bool	19.628385698808234
X1	19.600649350649352
_graph	19.572972972972973
smax	19.545356371490282
dijkstra	19.51779935275081
minheap	19.490301724137932
inv_list	19.46286329386437
True	19.458333333333314
old_a	19.43548387096774
old_b	19.408163265306122
2500	19.380901287553648
numba_config	19.35369774919614
CC	19.326552462526767
sum_of_digits	19.299465240641712
candidate	19.272435897435898
# 元テーブル	19.24546424759872
#逆元テーブル	19.218550106609808
#逆元テーブル計算用テーブル	19.191693290734825
splitlines	19.164893617021278
lower_divisors	19.138150903294367
upper_divisors	19.111464968152866
# s = input()	19.084835630965006
anum	19.05826271186441
rui	19.03174603174603
LI1	19.005285412262158
fft	18.978880675818374
val2	18.95253164556962
win	18.926238145416228
vy	18.9
endswith	18.873817034700316
MP	18.847689075630253
#import math	18.82161594963274
INTM	18.79559748427673
flg	18.769633507853403
P0	18.743723849372383
S1	18.717868338557995
S2	18.69206680584551
__getitem__	18.666319082377477
bisect	18.660194174757294
src	18.640625
cross_point	18.614984391259107
ans2	18.58939708939709
cmp_to_key	18.56386292834891
bottom	18.53838174273859
__main__	18.524390243902417
width	18.513916500994036
perpro	18.512953367875646
False	18.495867768595048
Factorial	18.49056603773585
high	18.487577639751553
any	18.467261904761905
sinceLast	18.462254395036194
FREE	18.44400396432111
numD	18.43698347107438
N2	18.42079207920792
pu	18.41176470588235
s1list	18.397626112759642
using_method	18.38659793814433
127	18.374505928853754
#+++++	18.361483007209063
pl	18.351431391905233
input_clipboard	18.33641975308642
__str__	18.328402366863905
input_text	18.311408016443988
minv	18.305418719211822
input_l	18.286447638603697
LENGTH	18.28248031496063
ic	18.26153846153846
elif	18.259842519685037
str1	18.25958702064897
subset	18.23673870333988
ty	18.236680327868854
com	18.213935230618254
coun	18.211873080859775
;	18.20535714285714
ans_list	18.191176470588236
vis	18.187116564417177
s3	18.168462291870714
relative	18.16241062308478
isdigit	18.145792563600782
3600	18.137755102040817
prt	18.12316715542522
SQRT	18.1131498470948
nonlocal	18.1005859375
ca	18.08859470468432
pv	18.078048780487805
yc	18.06408952187182
appendleft	18.055555555555557
circles	18.039634146341463
waru_kazu	18.033106134371955
qs	18.01522842639594
/=	18.010700389105057
checked	17.99087221095335
LSS	17.988338192419825
is_ok	17.966565349544073
LIR	17.966019417475728
engines	17.943743937924346
Mdata	17.942307692307693
day	17.921511627906977
out_list	17.918099089989887
prepare	17.899322362052274
s_node	17.893939393939394
bb	17.87717601547389
men	17.869828456104944
room	17.855072463768117
sigma	17.84576612903226
discard	17.833011583011583
yama	17.821752265861026
io	17.81099324975892
current_c	17.79778672032193
BytesIO	17.789017341040463
next_c	17.77386934673367
IOBase	17.76708373435996
g_set	17.75
make_divisors	17.745192307692307
d3	17.72617853560682
md	17.723342939481267
d4	17.70240480961924
cnt0	17.701535508637235
big	17.679769894534996
d5	17.67867867867868
ele	17.658045977011493
d6	17.655
itertools	17.648936170212778
prev1	17.636363636363637
XYR	17.63136863136863
_sub	17.61472275334608
lang	17.607784431137723
lr	17.593123209169054
langs	17.584247258225325
compress	17.571564885496183
fibo	17.560756972111555
f"	17.550047664442324
rightlis	17.53731343283582
digit	17.52857142857143
ini	17.507136060894386
sequence_a	17.48574144486692
lo	17.464387464387464
/	17.451923076923066
raise	17.443074003795065
x1y1x2y2_list	17.421800947867297
X2	17.400568181818183
Y1	17.37937559129612
Y2	17.358223062381853
warshall_floyd	17.337110481586404
write	17.3362831858407
str	17.317073170731703
c3	17.316037735849058
ssum	17.295004712535345
middle	17.274011299435028
uv	17.253057384760112
14	17.232142857142858
finv	17.211267605633804
name	17.190431519699814
ll	17.16963448922212
check_odd	17.14887640449438
check_even	17.128157156220766
rii	17.10747663551402
q1	17.086834733893557
10000	17.066231343283583
length_or_list	17.045666356011182
did	17.02513966480447
rx	17.004651162790697
__parents	16.984200743494423
#import itertools	16.963788300835656
lambda	16.96296296296299
# sys.setrecursionlimit(10 ** 6)	16.943413729128014
#mod = 10 ** 9 + 7	16.923076923076923
#INF = 10 ** 9	16.90277777777778
res	16.89344262295083
#PI = 3.14159265358979323846	16.882516188714153
STRM	16.862292051756008
LISTS	16.842105263157894
mods	16.821955719557195
-=	16.8046875
ml	16.80184331797235
max_	16.781767955801104
break	16.76612903225808
Wt	16.761729530818766
# h = [int(input()) for _ in rane(n)]	16.74172794117647
count1	16.72176308539945
left_bound	16.701834862385322
sum_	16.681943171402384
Q0	16.662087912087912
r0	16.642268984446478
180	16.622486288848265
invmod	16.602739726027398
coin	16.583029197080293
M	16.569620253164544
dists_v	16.563354603463992
four	16.543715846994534
kthA	16.524112829845315
input2	16.504545454545454
num	16.5
cf	16.4850136239782
sss	16.46551724137931
NEAR	16.44605621033545
y_min	16.42663043478261
y_max	16.407239819004523
nine	16.387884267631105
fa	16.368563685636857
column	16.34927797833935
goal	16.330027051397657
low	16.31081081081081
V1	16.29162916291629
V2	16.27248201438849
br	16.253369272237197
count	16.24000000000001
le	16.234290843806104
evens	16.2152466367713
factor	16.196236559139784
lin	16.177260519247987
nasu	16.158318425760285
acts	16.13941018766756
lists	16.120535714285715
ravel	16.10169491525424
log	16.097706032285473
cross2	16.08288770053476
debt	16.080645161290324
d0	16.064113980409616
1e-8	16.063613231552164
90	16.046610169491526
koch_curve	16.045373665480426
mon	16.029635901778153
# Python3 2018.7.14 bal4u	16.026666666666667
a_end	16.012690355329948
nenri	16.007992895204264
b_start	15.99577345731192
current_num	15.98935226264419
prime_list	15.978885135135137
stars	15.970744680851062
?	15.962025316455698
PS	15.952170062001773
 {}	15.945193929173694
C0	15.93362831858407
adjm	15.92839090143218
ctr	15.915119363395224
space	15.911616161616163
odds	15.896643109540637
move	15.894869638351555
Impossible	15.878199470432481
tmpp	15.8781512605042
dl	15.861460957178842
Data	15.85978835978836
remain	15.844798657718123
Xs	15.841409691629956
counts	15.828164291701594
gate_list	15.823063380281692
maxv	15.811557788944725
siz	15.804749340369394
wards	15.794979079497907
Bsum	15.786467486818982
Set	15.778428093645484
B2	15.768217734855135
subsets	15.761904761904763
d2t	15.75
UserList	15.745409015025043
deck	15.731814198071866
__name__	15.730769230769226
Vector	15.728940783986655
deckA	15.713660245183888
ROWS	15.712499999999999
COLS	15.696086594504578
tmp	15.695652173913032
deckB	15.695538057742784
w_list	15.679700499168053
empty_count	15.677447552447553
testcase_ends	15.663341645885286
info	15.65938864628821
rval	15.647009966777407
islands	15.641361256544503
deq	15.630705394190873
right_e	15.623365300784656
topo	15.614427860696516
parent_or_size	15.605400696864113
start2	15.59817729908865
b"	15.587467362924283
rem	15.581953642384107
ino	15.569565217391304
XYC	15.565756823821339
peek	15.551694178974806
beki	15.549586776859503
get_distanceSP	15.533854166666668
f8	15.533443435177539
searchsorted	15.517326732673268
js	15.51604509973981
DR	15.501236603462491
x_tsum	15.498266897746966
DC	15.48517298187809
rotation	15.48051948051948
# 処理内容	15.469135802469136
lnr	15.462802768166089
input_int_map	15.453125
sc	15.445116681071738
before_dinner	15.437140509449467
move_count	15.427461139896373
IR	15.42118226600985
min_path	15.40983606557377
SR	15.405250205086137
visited_list	15.392241379310345
LSR	15.389344262295083
GD	15.37467700258398
kaijo	15.373464373464373
T	15.372093023255815
next_v	15.357610474631752
dq	15.357142857142858
and	15.35483870967741
# from decimal import Decimal	15.341782502044154
position	15.3396388650043
invs	15.325980392156861
ds	15.322164948453608
24	15.310204081632651
fast_pow	15.30472103004292
make_power	15.294453507340947
oneday	15.28730703259005
D	15.285714285714278
ones	15.278728606356967
ab2	15.26992287917738
#空白あり	15.26302931596091
stc	15.252568493150687
# input = sys.stdin.readline	15.247355573637105
us	15.235243798118049
b_start_a_end	15.23170731707317
input_string	15.217948717948719
xl	15.216084484159222
dp3	15.200683176771989
len_a	15.200487012987011
begin	15.18491484184915
Update	15.18344709897611
per	15.16936790923825
dp_l	15.166240409207163
INF	15.160377358490564
ifact	15.153846153846153
is_m	15.149063032367973
isok	15.138349514563107
pre_total_sum	15.131914893617022
g_l	15.12287793047696
<=	15.119565217391312
i_str	15.114795918367346
heapq	15.108108108108098
votes	15.107431340872374
bigger	15.092009685230025
n_vertices	15.076612903225808
max	15.074766355140184
directed	15.061240934730055
eats	15.045893719806763
knd	15.030571198712792
connected	15.015273311897108
valid	15.0
iter_size	14.984751203852326
LV	14.96952686447474
csum	14.954326923076923
maximize	14.939151321056844
x4	14.924
rstrip	14.922413793103459
y4	14.908872901678656
#!/usr/bin/python	14.893769968051117
segments	14.878691141260973
vary	14.863636363636363
erase	14.848605577689241
era	14.833598726114651
y_line	14.818615751789977
x_line	14.803656597774246
second	14.788721207307386
snholder	14.773809523809526
good	14.758921490880255
120	14.74405705229794
R	14.73809523809524
i0	14.729216152019003
deposit	14.714398734177216
ki	14.699604743083004
2019	14.68483412322275
rate	14.670086819258088
change_time	14.655362776025235
compile	14.64066193853428
tmp0	14.625984251968504
lcm_base	14.611329661683715
#出力の制限	14.596698113207548
lim	14.582089552238806
hantei	14.567503924646783
in_nl2	14.55294117647059
in_map2	14.538401253918494
in_all	14.523884103367266
lrs	14.509389671361504
new_dp	14.49491790461298
p_list	14.48046875
23	14.466042154566743
n_numbers	14.45163806552262
str_s	14.437256430241622
40	14.422897196261683
xt	14.408560311284045
yt	14.394245723172627
inititem	14.379953379953381
rfft	14.365683229813666
astype	14.351435221101628
ref	14.337209302325583
ttt	14.323005422153368
L	14.3125
400	14.308823529411764
cv	14.294663573085845
#from decimal import *	14.280525502318394
ms	14.266409266409266
la	14.252314814814813
powm	14.238242097147264
pown	14.224191063174114
right_bound	14.210161662817551
__a	14.196153846153845
kaizyo_inv	14.182167563412758
fixed	14.168202764976957
gen	14.154259401381427
rep_S	14.140337423312882
Apow_list	14.126436781609197
Bpow_list	14.112557427258807
Apow	14.098699311400154
Bpow	14.084862385321102
fact_list	14.071046600458367
fact_inv_list	14.057251908396946
H	14.045454545454533
bunshi	14.043478260869566
restaurant	14.029725609756099
pat	14.015993907083015
min_a	14.00228310502283
max_b	13.988593155893536
projection	13.974924012158056
I	13.961538461538453
cx	13.961275626423689
cy	13.947647951441578
points	13.93404094010614
val1	13.920454545454547
not_in_s	13.906888720666164
two	13.893343419062028
edgelist	13.879818594104307
ide_ele	13.86631419939577
segment	13.852830188679246
WA	13.839366515837103
p_sum	13.82592313489073
cursor	13.8125
tmp_cur	13.799097065462753
max_cur	13.785714285714285
isp	13.772351615326823
deb	13.75900900900901
29	13.745686421605402
v0	13.732383808095953
pack	13.719101123595507
places	13.705838323353294
full	13.692595362752431
put_row	13.679372197309416
levels_set	13.666168782673637
black	13.652985074626866
cts	13.639821029082775
TLE	13.626676602086437
nth	13.613551749813851
counted_list	13.600446428571427
n_points	13.587360594795538
pB	13.574294205052006
>=	13.572519083969468
lenFFT	13.561247216035635
EDGE	13.548219584569733
DI	13.535211267605632
tx	13.522222222222222
mirai	13.509252405625464
sums1	13.49630177514793
sums2	13.483370288248338
MI1	13.470457902511079
idx_map	13.457564575645755
resize	13.444690265486727
reshape	13.431834929992633
kmemo	13.41899852724595
_x	13.406181015452539
times	13.393382352941178
nameTimeList	13.380602498163114
arrayS	13.367841409691628
numberQ	13.355099046221572
arrayT	13.342375366568916
merge_sort	13.329670329670328
quick_sort	13.316983894582723
bp	13.304316020482808
vx	13.291666666666668
expr	13.279035792549305
Ternary	13.266423357664234
__add__	13.25382932166302
eval	13.24125364431487
person	13.228696285506192
nm	13.216157205240176
read	13.204545454545467
3501	13.203636363636363
telescope	13.191133720930232
log10	13.179890560875513
buffer	13.179487179487182
serial	13.178649237472769
mountains	13.168831168831169
dot2	13.166182873730044
filter	13.157786885245901
extgcd	13.153734590282813
cars	13.146757679180887
memolize	13.141304347826086
IN	13.13574351978172
helper	13.128892107168717
given_cards	13.12474437627812
calcMatrixOrder	13.116497829232994
65	13.11376021798365
fib	13.104121475054232
base1	13.102791014295438
dr	13.091836734693878
xc	13.091763005780347
most_common	13.08089734874235
qsum	13.079422382671481
insertionSort	13.069972826086957
data_list	13.067099567099568
__contains__	13.059063136456214
go	13.054794520547944
strInput	13.048168249660787
min_d	13.042507204610953
none	13.037288135593219
q0	13.030237580993521
u	13.027777777777771
b_arr	13.026422764227643
P2	13.017985611510792
i_subsets	13.015572105619498
boxes	13.005751258087706
vec	13.004736129905279
nn	12.99391480730223
max_fact	12.99353448275862
intersect	12.983108108108109
human	12.981335247666905
frame_height	12.972316002700877
op_l	12.969153515064562
22	12.961538461538462
LII	12.956989247311828
build	12.950775455158462
fac_inverse	12.944842406876791
diag1	12.940026954177897
MAXSHEET	12.932712956335003
diag2	12.929292929292929
tmp_v	12.920600858369099
comps	12.9185733512786
CL	12.908506075768408
cmath	12.907868190988568
p_center	12.897177419354838
node_size	12.896428571428572
shou	12.886501007387508
root_linked	12.884368308351178
na	12.875838926174497
prenum	12.872325249643367
numbers_list2	12.865191146881287
lowest	12.860299358517462
cr	12.85455764075067
_edges	12.8482905982906
# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)	12.843938379102479
predecessors	12.836298932384341
get_sum	12.833333333333334
Minkowski	12.824324324324323
SRL	12.822742474916389
__update	12.812366737739872
MSRL	12.81216577540107
kuchi	12.801603206412826
1001	12.800426136363637
>	12.792207792207819
tmp_h	12.791054739652871
deckC	12.788502484031227
atan2	12.780520346897932
place	12.77659574468085
x_sum	12.77
# UNION-FIND library	12.764705882352942
in_list_count	12.759493670886076
UnionSet	12.752832861189802
sysread	12.749001331557922
vmax	12.740976645435243
factorization	12.738522954091817
left_w	12.72913719943423
minDist	12.728058510638299
argmaxA	12.717607973421927
offset	12.71731448763251
a_c	12.707171314741036
inlist	12.70550847457627
0.0	12.696748506967484
instr	12.693719124911784
prod	12.686339522546419
ccw	12.681946403385048
lst_divisors	12.675944333996023
wbs	12.670190274841438
dfs_rec	12.665562913907285
q_p	12.658450704225352
far	12.655195234943745
abc	12.646727656579873
prev2	12.64484126984127
allowed	12.635021097046412
ite	12.6345009914078
mod_inv	12.624174372523118
xxx	12.623330990864371
d_r	12.613861386138614
passed	12.611657303370787
not_yet	12.603562005277045
9	12.600000000000023
vR	12.600000000000001
already	12.5932762030323
sum_x	12.588359046283308
sr	12.58300395256917
sum_y	12.576734407848633
int8	12.572745227123107
put	12.565126050420169
len_b	12.5625
nonzeros	12.553533939818056
begin2	12.552268244575936
elements	12.542049934296978
OVER	12.541958041958043
sh	12.531845042678922
my	12.530398322851152
sw	12.521653543307087
maps	12.518854748603353
comp	12.511475409836066
Alice	12.507327285415212
bn	12.501310615989516
max_a_b	12.49581589958159
check_l	12.491159135559922
is_leaf	12.48432055749129
num_l	12.481020942408376
prin	12.472841225626741
bi	12.470896010464356
min	12.466101694915267
xj	12.461377870563673
modinv	12.46078431372549
library_number	12.450685826257349
yj	12.449930458970794
monster	12.440600522193211
max_length	12.43849895760945
Enemy_ran	12.430528375733855
INVERSE_FACT	12.427083333333332
min_p	12.420469361147328
_gcd	12.415683553088133
bis	12.410423452768729
talk	12.404299583911236
RB	12.400390625
pow_sum	12.392931392931391
minh	12.390370852309694
ab1	12.381578947368421
kind	12.38036410923277
ois_sum	12.37037037037037
dub	12.370242214532873
ois	12.36038961038961
half2	12.358921161825727
rj	12.35042180402336
head2	12.34761575673808
__slots__	12.34046692607004
Second	12.33632596685083
set_range	12.33052495139339
opt	12.32505175983437
window	12.32059585492228
pxs	12.313793103448276
isinstance	12.310679611650485
nth_bit	12.302549965541004
_inf	12.30077619663648
dp_r	12.291322314049587
v_count	12.290885585003233
hit	12.281007751937985
vl	12.28011011699931
blow	12.27114267269206
res_sum	12.268913342503438
print_row	12.261290322580646
leftlis	12.257731958762886
inst	12.251450676982591
ab_s	12.246565934065934
PYDEV	12.241623711340207
roads	12.235415236787919
binary	12.231809401159047
E0	12.224279835390945
pqheap	12.222007722007723
mapping	12.213159698423578
premin	12.212218649517684
is_valid_str	12.202442159383033
l0	12.20205479452055
height_a	12.19267822736031
fm	12.190965092402465
height_b	12.182926829268293
NL	12.173187940987813
years	12.163461538461538
ten	12.153747597693785
change	12.14404609475032
argv	12.134357005758158
ONLINE_JUDGE	12.12468030690537
pycc	12.115015974440894
my_module	12.10536398467433
export	12.095724313975749
dig	12.08609693877551
NMI	12.076481835564053
Ans	12.066878980891719
number_of_people_sitting	12.057288351368555
500000	12.047709923664122
ifac	12.03814367450731
# from sys import stdin	12.02858958068615
# input = stdin.readline	12.019047619047619
np	12.0183486238532
slots_array	12.009517766497462
#コンビネーションの高速計算　	12.0
cntr	11.990494296577946
elem	11.981000633312222
ve	11.971518987341772
vw	11.962049335863378
# h = list(map(int, input().split()))	11.95259165613148
cum	11.94314592545799
hs	11.933712121212121
temperature_difference	11.92429022082019
D_tl	11.914880201765447
possible	11.905482041587902
Trie	11.896095717884132
n_a	11.886721208307112
n_b	11.877358490566039
po	11.868007542426147
base_s	11.858668341708542
Bit	11.849340866290019
events	11.840025094102886
discount	11.830721003134796
networkx	11.821428571428571
utils	11.812147777082028
merge_unit	11.80287859824781
operate	11.793621013133208
operate_unit	11.784375
LI	11.781512605042025
CNT	11.775140537164273
survivors	11.765917602996256
srv	11.756706175920149
math	11.75
takewhile	11.747506234413965
bit_count	11.738317757009346
num_pos	11.729140722291406
unique_num	11.719975108898568
dy4	11.710820895522389
dx4	11.701678060907396
dy8	11.692546583850932
dx8	11.683426443202979
inside	11.674317617866006
sum_of_arithmetic_progression	11.665220086794791
original_size	11.656133828996282
Ncum	11.647058823529411
plus	11.637995049504951
ESP	11.628942486085343
ub	11.619901112484548
r'	11.61087090796788
links	11.601851851851851
m0	11.59284392350401
countdis	11.583847102342787
mode	11.574861367837338
Bl	11.56588669950739
# n = int(input())	11.556923076923077
# a = list(map(int, input().split()))	11.547970479704796
# a, b = map(int, input().split())	11.539028887523049
max_wait	11.53009828009828
max_wait_order	11.521178637200737
s_len	11.512269938650308
ipt	11.50337216431637
way	11.494485294117647
kaizyo	11.485609308022045
safe_h	11.476744186046512
safe_w	11.46788990825688
deg	11.459046454767726
Ai	11.45021380574221
dot3	11.441391941391942
is_intersection	11.432580841976815
qa	11.423780487804878
r_min	11.414990859232175
tt	11.406211936662606
condition	11.397443700547779
fact_mod	11.388686131386862
light_bulbs	11.379939209726444
freq	11.371202916160389
unit	11.36247723132969
c1r	11.35376213592233
ac	11.345057610673136
pc	11.336363636363636
m_upper	11.327680193821926
square	11.319007263922519
longest_increasing_subsequence	11.310344827586206
side	11.301692865779927
TS	11.293051359516616
differ_by_1bit	11.284420289855072
invp	11.27579963789982
invq	11.267189384800965
hoge	11.258589511754069
count0	11.25
nokori	11.241420830824804
1200	11.232851985559567
LI2	11.224293445580276
MXI	11.215745192307692
maxpair	11.207207207207206
pair	11.198679471788715
set_a	11.190161967606478
n_	11.181654676258994
ketawa	11.173157579388855
wa	11.164670658682635
alice	11.156193895870736
bob	11.147727272727273
cnt_A	11.139270771069935
cnt_B	11.130824372759857
deque	11.125
children	11.122388059701493
tmpdic	11.113961813842483
vec1	11.105545617173524
vec2	11.097139451728248
translate	11.088743299583085
maketrans	11.080357142857142
111	11.071980963712075
get_counter	11.063614744351963
dsorted	11.055258467023172
ext_euc	11.046912114014251
RE	11.038575667655786
lma	11.030249110320284
tma	11.021932424422051
yn	11.013625592417062
hq	11.005328596802842
arrB	10.997041420118343
EDGE_INV	10.98876404494382
rnk	10.98049645390071
init_val	10.972238629651507
culm	10.963990554899645
types	10.955752212389381
Omitted	10.94752358490566
C	10.945054945054949
platform	10.939304655274013
ios	10.931095406360424
__next__	10.922895821071219
inputFile.txt	10.91470588235294
#input = sys.stdin.readline	10.90652557319224
read_index	10.898354876615747
read_lists	10.890193775689958
tmp2	10.882042253521126
gh	10.873900293255131
gw	10.865767878077374
make_fact	10.857644991212654
lsprime	10.84953161592506
lsprime2	10.841427735517847
oklist	10.833333333333334
ketalist	10.825248392752776
p_table	10.817172897196262
q_table	10.809106830122593
setrecursionlimit	10.806818181818187
to_hash	10.801050175029172
_X	10.793002915451895
_Y	10.784965034965035
numberAndQuontum	10.776936517181129
Quontum	10.768917345750873
nameAndTime	10.760907504363002
areas	10.752906976744185
section	10.744915746658918
machedNumber	10.736933797909408
get_pos	10.728961114335462
partition	10.720997679814385
swap	10.71304347826087
get_parent	10.705098493626883
search_part2	10.697162709901564
mm	10.68923611111111
dice_data	10.68131868131868
150	10.673410404624278
ap	10.665511265164644
_s	10.657621247113164
DEBUG	10.649740334679747
xr	10.641868512110726
split_at	10.63400576368876
$	10.626152073732719
# Your code here!	10.618307426597582
login	10.610471806674338
node1	10.60264519838988
node2	10.594827586206897
bmod	10.58701895462378
num0	10.579219288174512
is_integer	10.571428571428571
kbin	10.563646788990825
stones	10.555873925501432
stone	10.548109965635739
num_list	10.540354894104178
37	10.532608695652174
cnts	10.524871355060034
dist1	10.517142857142858
multi	10.515873015873016
pw10	10.509423186750428
__main	10.50925436277102
numOfMoun	10.502642706131079
ru	10.501712328767123
sorted_mounts	10.496038034865293
psum	10.494010268111808
buff_a	10.489440337909187
val_list	10.486316989737743
right_triangle	10.482849604221636
256	10.478632478632479
reverseString	10.47626582278481
Q2	10.470956719817767
roundup1000	10.469688982604112
num_neg	10.46328969834946
_primes	10.463119072708114
__repr__	10.456556082148499
simple_xyz	10.455631399317406
_w	10.45
MODD	10.447981807845366
epsilon	10.443450815360336
200001	10.440340909090908
get_input	10.436908517350158
op1	10.432708688245315
EOFError	10.43037309511298
op2	10.425085130533486
num_lis	10.423844537815127
op3	10.41747022121384
all_count	10.417322834645669
yoko	10.41080797481637
ope	10.40986394557823
tate	10.404299947561615
alist	10.402266288951841
cipher	10.397798742138365
a_price	10.394677236693092
sent	10.391304347826088
b_price	10.387096774193548
ff	10.384816753926701
V0	10.379524886877828
0b0011	10.378335949764521
mxd	10.371961560203506
divisor_list	10.371861924686192
member	10.365394668060638
link	10.364406779661017
upd	10.358934169278998
num_v	10.356860530773574
to_cels	10.352480417754569
LOG	10.349322799097065
sort_a	10.346033402922755
Binit	10.341793570219966
solvers	10.339593114241001
Badd	10.334272829763247
100001	10.333159541188738
B1	10.326760563380281
k0	10.326732673267326
infile	10.3203125
IMPOSSIBLE	10.319256756756756
outfile	10.313899010931806
xdiff	10.31176139561058
top_bottom_line	10.307492195629553
ver1	10.304274465691789
insider_line	10.301092043681747
longest	10.296795952782462
read_a	10.294698544698544
from_	10.289325842696629
read_b	10.288311688311689
multiply	10.281931464174455
radC	10.28186412128018
show	10.275557861961598
Dice	10.274410774410775
states	10.269190871369295
new_count_d	10.266965787997757
td	10.262830482115085
buttons	10.259529147982063
#coding:utf-8	10.256476683937823
# Python3 2018.7.7 bal4u	10.252100840336135
minHeapify	10.250129466597619
path2	10.24468085106383
dpos	10.243788819875776
dneg	10.237454733574754
59	10.237269166200337
__lt__	10.231127197518097
61	10.229865771812081
ph	10.224806201550388
leader	10.222470653996647
tl	10.21849173553719
Sset	10.21508379888268
Item	10.212183789364998
Slist	10.207705192629815
build_tree	10.205882352941176
inorder	10.200334821428571
max_profit	10.199587416193914
matA	10.193298969072165
find_pos	10.192972671500279
shuffle	10.187017001545595
preo	10.18561872909699
funcPrint	10.180741503604532
l1_start	10.178272980501394
funcReverse	10.174472465259907
l1_end	10.170935412026726
032b	10.16820987654321
l2_start	10.163606010016695
clear	10.161953727506427
l2_end	10.156284760845384
&=	10.155704008221994
flip	10.149460708782742
crs	10.148971650917176
{}:{}	10.143223819301848
vector	10.141666666666667
calc_int	10.136993329912777
closest_pair	10.134369794558578
push_back	10.13076923076923
ass	10.12708102108768
isValid	10.124551512045105
qq	10.119800332778702
adjR	10.118340163934427
ans_is_zero	10.112527716186253
adjC	10.112135176651305
nmin	10.105936540429887
cb	10.105263157894736
ansgap	10.099744245524297
tmp_buy	10.098006644518273
gap	10.093558282208589
max_n	10.09075816270061
f1	10.087378640776699
child	10.083517699115044
f2	10.08120531154239
element	10.076285240464346
vote	10.075038284839204
vD	10.069060773480663
t0	10.068877551020408
DIFFERENT	10.06272310045895
cno	10.061844284925456
vertex	10.0565749235474
sarch	10.054635761589404
get_k	10.050433010697912
denominator	10.047435190292333
# \n	10.04429735234216
x_root	10.040242557883131
ans161	10.038167938931299
y_root	10.03305785123967
lunlun	10.03204476093591
r_S	10.025927808845958
RR	10.025881057268723
original_n	10.019817073170731
par_size	10.018712162905889
quo	10.013712544438802
sq	10.011551155115512
Xmax	10.00761421319797
dpw	10.0043980208906
SegTree	10.00152207001522
visited_set	9.997252747252746
X_unit	9.995436105476674
GC	9.990115321252059
X_f	9.989356310187532
istrue	9.983282674772036
covered	9.98298572996707
ne	9.977215189873418
read_int_list	9.975863960504663
nBad	9.971153846153847
n_nodes	9.96875
Any	9.965098634294385
p4	9.961643835616439
read_int	9.959049544994944
files	9.954545454545455
exp	9.95300656897423
html	9.947454844006568
max_beki	9.946969696969697
calc_tairyoku	9.940938919737507
LA	9.940371991247265
min_x	9.934914228052472
LB	9.93329688354292
max_x	9.928895612708018
ind_pc	9.926229508196721
# ignore trailing spaces	9.92288306451613
tour_win_rate	9.919169852539596
max_count	9.916876574307304
n90	9.912117903930131
pow_mod	9.910876132930513
slide	9.9050736497545
prime_factorize	9.904881731253145
prime_factors	9.898893360160965
outlist	9.898037077426391
w	9.896551724137908
# coding=utf-8	9.89291101055807
timesum	9.89100817438692
multi_lcm	9.886934673366834
logB	9.883986928104575
perm	9.880964339527875
logBi	9.876973326075122
sp_sum	9.875
dp_new	9.869967355821545
ticket_count	9.869041645760161
rad	9.86308926780341
maxM	9.862969004893964
month	9.857142857142858
maze	9.855978260869565
takahashi	9.85120240480962
correct	9.848995111352526
num2	9.845267901852779
has	9.842019543973942
0x33333333	9.83933933933934
last_s	9.835051546391753
base_calculate	9.833416708354177
second_last_s	9.828091106290673
facts	9.8275
_root	9.821589205397302
pow_table	9.821138211382113
B100	9.815684315684315
ans_str	9.814192849404117
#import	9.809785322016975
accA	9.807255008121277
pow2	9.803892215568862
dpL	9.800324675324676
isFilled	9.798004987531172
inv_mod	9.793401838831802
roll	9.792123629112663
li2	9.786486486486487
x12	9.786248131539612
y12	9.780378486055778
li3	9.779578606158832
x13	9.77451468392235
pref	9.772678185745141
y13	9.76865671641791
wall	9.765785213167836
...	9.76280457483839
renritu	9.758899676375405
tmp_	9.756958250497018
ab3	9.752021563342318
# import sys	9.751117734724293
input_list_str	9.745283018867925
half1	9.745150862068966
lenght	9.739454094292803
len2	9.738287560581583
sieve_of_eratosthenes	9.733630952380953
mid_start	9.731431646932185
#from scipy.sparse import csr_matrix	9.727813584531482
offset2_num_period	9.724583109198495
precompute	9.722001982160554
inl	9.71774193548387
bool_	9.716196136701337
inm	9.710908113917249
35	9.71039603960396
va	9.704601682335477
gg	9.704081632653061
vb	9.698813056379821
plain	9.697262479871176
vc	9.693030153237766
first_nl	9.690450643776824
vd	9.687252964426877
t_copy	9.683646112600536
atc_158a	9.681481481481482
WV	9.67684887459807
push	9.675715695952617
csums	9.670058918050348
partial_swap	9.669955599407992
LinearProbingIntSet	9.664201183431953
ret2	9.663276231263383
_hash	9.658452439625432
Rmin	9.656500802568218
sorted_c	9.652709359605911
Get	9.649732620320856
Compress	9.646971935007386
total_diff	9.642971672902192
command_candidate	9.641240157480315
mc	9.636217948717949
next_n	9.63551401869159
pow_l	9.629793510324484
Matrix	9.629471436198612
thr	9.624078624078624
gcdfibo	9.62273212379936
6000	9.61836935166994
h3	9.616
5500	9.612665684830633
w3	9.609275053304904
A_sum	9.606967615309127
vx2	9.60255727224294
attackcnt	9.601275134870034
pd	9.595846645367413
monstercnt	9.595588235294118
amax	9.589906908378246
xd	9.589143161255988
Enemy	9.584231145935357
yd	9.582446808510639
gcd_list	9.57856093979442
angle	9.575757575757576
Combi	9.572896281800391
initial_dic	9.569075451647183
55	9.56723716381418
E1	9.562400424853957
rick	9.56158357771261
WeightedUnionFind	9.555935515388374
E2	9.555732484076433
INITIAL_VALUE	9.55029296875
mind	9.549071618037136
get_size	9.544655929721815
deque_a	9.542417815482503
lm	9.539024390243902
pqc	9.53577106518283
rm	9.533398342272063
rfact	9.529131355932204
BinaryIndexedTree	9.527777777777779
j_count	9.52249867654844
lz	9.522162688748173
count_two_idx	9.516553067185978
TypeError	9.510948905109489
all_X	9.505350194552529
all_Y	9.499756927564414
ed	9.494169096209912
1e18	9.488586692569209
frm	9.483009708737864
vabx	9.477438136826784
vaby	9.471871968962173
vcdx	9.466311197285506
vcdy	9.460755813953488
plst	9.455205811138015
maxsum	9.449661181026137
xa	9.444121915820029
ya	9.438588007736945
xb	9.433059449009184
yb	9.427536231884059
speed	9.422018348623853
9.8	9.416505791505791
brkSpd	9.410998552821997
maximum	9.40549662487946
num_cell	9.4
# 入力	9.394508670520231
replaced	9.389022628791526
rjust	9.38354186717998
tiles	9.378066378066379
min_diam	9.372596153846153
diam	9.367131186929361
OK	9.361671469740633
eary	9.356216994719155
remove_slimes	9.350767754318618
list2int	9.345323741007194
premax	9.339884947267498
make_modinv_list	9.33445136559655
connect	9.329022988505747
# Generated by https://github.com/kyuridenamida/atcoder-tools	9.323599808520823
s_odd	9.318181818181818
s_even	9.312769010043041
s_list	9.30736137667304
valid_strs	9.301958910654562
even_ok	9.296561604584527
odd_ok	9.291169451073985
amt	9.285782442748092
i_input	9.280400572246066
i_map	9.275023832221162
i_list	9.269652215340638
mnum	9.264285714285714
snum	9.258924321751547
memo0	9.253568030447193
commands	9.248216833095578
#import numpy	9.24287072243346
maxa	9.237529691211401
safe	9.232193732193732
inps	9.22686283815852
obj	9.221537001897532
numba_compile	9.216216216216216
globals	9.210900473933648
posix	9.20558976788252
exec	9.200284090909092
from my_module import 	9.194983435873166
sort_zip	9.18968779564806
before_color	9.184397163120567
NLI	9.179111531190927
now_k	9.173830892772791
now_bit	9.168555240793202
1500	9.163284568192543
int_list	9.158018867924529
sepalate	9.152758132956153
solve1	9.147502356267672
Con	9.142251530852567
NumA	9.137005649717514
NumB	9.131764705882352
lim1	9.126528692380056
lim2	9.1212976022567
atc_073a	9.116071428571429
ball	9.11085016439643
components	9.105633802816902
_first_index	9.100422336931018
_first_idx	9.095215759849907
IS	9.090014064697609
partial	9.08481724461106
f_chain	9.079625292740047
c_cnt	9.07443820224719
listtostring	9.069255966307908
some	9.064078578110383
moji	9.05890603085554
p_lst	9.05373831775701
# N: 処理する区間の長さ	9.048575432041103
# 区間[l, r+1)の値をvに書き換える	9.043417366946779
# vは(t, value)という値にする (新しい値ほどtは大きくなる)	9.03826411572562
mpow	9.033115671641792
dpf	9.027972027972028
#!usr/bin/env python3	9.022833178005591
ai1	9.017699115044248
# t, a = map(int, input().split())	9.012569832402235
avg	9.007445323406236
41	9.002325581395349
Mod	8.99721059972106
D_wk	8.992100371747211
chmax	8.986994890849976
SSS	8.981894150417828
RRR	8.976798143851509
residual	8.971706864564007
cycles	8.966620305980529
next_c_id	8.961538461538462
trie	8.956461324687355
convolve	8.95138888888889
irfft	8.946321147616844
rint	8.941258094357076
Li	8.936199722607489
#readlines = sys.stdin.readlines	8.931146025878004
D2	8.92609699769053
200	8.921052631578947
max2	8.916012921089063
lttr	8.910977859778598
UnionFindVerSize	8.905947441217151
q2	8.900921658986174
pairs	8.89590050667895
rgb	8.890883977900552
minimum_dist	8.885872066267833
list_coordinate	8.880864765409383
IN_I	8.875862068965517
IN_S	8.870863970588236
error	8.865870463941203
get_GCD	8.860881542699724
y_	8.85589720055071
testimony	8.850917431192661
keta1	8.845942228335625
quit	8.840971585701192
week	8.836005497022446
1e-6	8.831043956043956
cmp	8.826086956521738
marks	8.821134492223239
bares	8.816186556927297
ry	8.811243144424132
TI	8.806304248515303
Si	8.801369863013699
n0	8.796439981743497
58	8.791514598540147
p_dice	8.786593707250342
3	8.786516853932596
xlist	8.781677301731996
dis	8.776765375854215
ylist	8.771857923497267
zlist	8.766954938552571
sqdis	8.762056414922657
3000	8.757162346521145
2018	8.752272727272727
rain	8.74738755111313
Tuple	8.7425068119891
min_	8.737630503858375
# n, m = map(int, input().split())	8.732758620689655
count_bigger_than	8.727891156462585
rl	8.723028105167725
__N	8.718169460806525
IL	8.713315217391305
columns	8.708465368945225
intervals	8.703619909502262
l_to_r	8.698778833107191
r_to_l	8.693942133815552
matmul	8.68910980569363
1e-9	8.684281842818429
45	8.679458239277652
#     13	8.674638989169676
##	8.669824086603517
BC	8.665013525698829
check2	8.66020730058585
comb_mod_table	8.655405405405405
bumbo	8.65060783430887
total_freq	8.645814581458145
nCk	8.64102564102564
c1x	8.636241007194245
c1y	8.631460674157303
c2x	8.626684636118599
c2y	8.621912887292321
c2r	8.617145421903052
solve_knapsack	8.612382234185734
to_digit	8.60762331838565
bitset	8.602868668758404
item_num	8.598118279569892
iter	8.593372145096284
Vmax	8.588630259623994
m_rest	8.583892617449665
memoize	8.579159212880143
tsp	8.574430040232453
dists	8.56970509383378
sp1	8.564984368021438
full_like	8.560267857142858
getS	8.555555555555555
EV	8.55084745762712
OD	8.546143557735176
val2idx	8.54144385026738
chk	8.53674832962138
differ_by_1bit_all	8.532056990204808
MinCostFlow	8.527369826435248
flow	8.522686832740213
#入力:N,M(int:整数)	8.518008003557137
Atom	8.513333333333334
currency	8.50866281652599
res1	8.503996447602132
number_of_divisors	8.499334221038616
105	8.494676131322095
ARC	8.490022172949002
_offset	8.485372340425531
_data	8.480726628267611
dic1	8.476085031000887
dic2	8.471447543160691
bbb	8.466814159292035
x_max_	8.46218487394958
x_min_	8.457559681697612
abc129c	8.45293857711003
52	8.448321554770319
73	8.443708609271523
vn	8.43909973521624
1000000000	8.434494927216585
calc_g	8.42989417989418
decision	8.425297487880123
starmap	8.420704845814978
lst_head	8.416116248348745
# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools	8.411531690140846
doctest	8.406951165860097
get_children	8.402374670184697
-1	8.397802197802198
mab	8.39323374340949
inverse_lookup	8.38866930171278
39	8.384108867427567
rv	8.379552435278631
ae	8.375
i3	8.37045155633494
klrs	8.365907099035933
left_camels	8.361366622864653
right_camels	8.356830122591944
is_odd	8.352297592997811
rand	8.347769028871392
NEG	8.343244425010932
calcScore	8.338723776223777
# この日に開催するコンテスト	8.334207077326344
pA	8.329694323144105
lA	8.325185508511566
lB	8.320680628272251
ips	8.316179677278674
Bs	8.311682650392328
arrA0	8.30718954248366
arrA1	8.302700348432056
arrA2	8.298215063125816
fA	8.293733681462141
fB	8.289256198347108
arrC	8.284782608695652
elist	8.28031290743155
n_plus	8.275847089487403
lazy_ele	8.271385149804603
segfunc	8.266927083333334
first_A	8.262472885032539
last_Z	8.258022549869905
1_000_000_007	8.253576072821847
PrimeUtil	8.249133448873483
from_iterable	8.244694673018623
_init_table	8.24025974025974
_is_prime	8.235828645607961
#a = int(input())	8.231401384083044
kyori	8.226977950713358
temp1	8.222558340535869
temp2	8.218142548596113
xx	8.213730569948186
LLI1	8.209322399654726
chmin	8.204918032786885
ans_temp	8.20051746442432
3100	8.196120689655173
count_loop	8.191727703576046
check_1	8.18733850129199
check_2	8.182953077916487
check_3	8.178571428571429
weighted	8.174193548387096
N3	8.16981943250215
_add_edge	8.1654490760636
lsQ	8.161082474226804
cond	8.156719622155432
Fxy	8.15236051502146
tot	8.148005148005147
is_harshad_number	8.143653516295025
dividend	8.139305615087869
get_num	8.13496143958869
YS	8.130620985010706
20000	8.126284246575343
EPSILON	8.121951219512194
interpolate	8.117621899059024
outlier	8.113296280461736
h0	8.10897435897436
stockFornumber	8.104656129859034
#----------------for input------------------------	8.100341588385994
sections	8.096030729833547
toArea	8.091723549488055
linearSearch	8.087420042643924
#----------------for main------------------------	8.083120204603581
htable	8.078824030677461
to_int	8.074531516183987
ints	8.070242656449553
Pos	8.065957446808511
get_sec_pos	8.061675882603147
dX	8.057397959183673
dY	8.053123671908203
printAns	8.048853016142736
Card	8.044585987261147
check_stability	8.040322580645162
stable	8.036062791684344
preorder	8.031806615776082
dxdy	8.027554048325563
# sqrt(MAX)	8.023305084745763
cave	8.019059720457433
where	8.014817950889077
lmap	8.010579771476936
bridge_lengths	8.006345177664974
unvisited	8.002114164904862
f	8.0
is_contained	7.99788672865596
rx1	7.993662864385298
ry1	7.989442567567568
rx2	7.985225833685099
ry2	7.981012658227849
xe	7.9768030366933775
direct	7.972596964586847
# Python3 2018.7.15 bal4u	7.9683944374209865
student	7.96419545071609
c_num	7.960000000000001
50000	7.955808080808081
# 時々使う	7.9516196886832144
# from scipy.sparse.csgraph import csgraph_from_dense, floyd_warshall	7.947434819175777
# from collections import defaultdict, deque	7.943253467843633
# 再帰の制限設定	7.9390756302521
il	7.9349013019739605
iln	7.930730478589421
iss	7.926563155686109
sl	7.922399328859061
isn	7.918238993710691
getenv	7.914082145850797
LOCAL	7.909928780896523
pcnt	7.905778894472363
equation	7.902898005269101
0x5555555555555555	7.901632482210129
# a < b < c	7.899548532731377
0x3333333333333333	7.897489539748953
{} {}	7.896201579541181
0x0f0f0f0f0f0f0f0f	7.893350062735257
1.05	7.892857142857142
Eratos	7.889515219842165
0x00ff00ff00ff00ff	7.889214046822742
{0:.3f} {1:.3f}	7.886175807663411
0x0000ffff0000ffff	7.8850814876723785
calc_cos	7.882838903492303
0x00000000ffffffff	7.880952380952381
calc_sin	7.879504504504505
judge_prime_num	7.876826722338205
calc_2sin	7.876172607879925
P:{0:.3f} {1:.3f}	7.872843210802701
inner	7.8727045075125215
Line	7.869516310461192
dis_star	7.868585732165206
is_over	7.866191904047977
dis_telescope	7.864470391993327
600	7.862869988759835
telescopes	7.860358482701125
fri	7.859550561797754
2000	7.856249999999999
sat	7.856233620366904
sun	7.852919161676647
sieve_of_erastosthenes	7.852144939608497
tue	7.849607182940517
array_size	7.848043297252289
wed	7.846297681376216
segment_line_dist	7.843945068664169
thu	7.842990654205607
convert	7.8398502495840265
0b0110	7.839686098654708
bit_add	7.83638401195368
ques	7.835758835758837
MOD	7.833333333333314
bit_sum	7.833084391336818
sublist	7.831670822942643
a_start	7.829787234042554
ascii_letters	7.827586206896552
h_start	7.826492537313433
statistics	7.823504983388704
h_end	7.82320029839612
b_end	7.819910514541387
get_data	7.819427148194272
make_sets	7.816623183004101
list_num	7.815352697095436
sets	7.813338301043219
average_num	7.811281625881376
1440	7.810055865921788
answer_floor	7.807213930348258
checkEqual	7.806775874906926
#    print(i, ii)	7.803498325269818
answer_num	7.803149606299213
a > b	7.8002232142857135
pt	7.799088649544325
a < b	7.796950539233915
_get_distance	7.795031055900621
a == b	7.793680297397769
_get_min_distance	7.790976821192054
{0[0]} {0[1]} {0[2]}	7.79041248606466
Case {0}: {1}	7.787147102526003
bound	7.786925941249482
{:.10f}	7.783884144077238
th	7.782878411910669
S 	7.780623608017818
Positive	7.778834229020257
H 	7.7773654916512065
s_words	7.774793388429751
C 	7.774109792284866
D 	7.770856507230256
s_word	7.770755885997522
grade	7.767605633802816
infac	7.766721717588769
80	7.764357169321972
o2	7.762690879075526
1000000000000000	7.761111111111111
inner_total	7.758663366336634
buildMinHeap	7.757867456497593
sd	7.754639175257733
NOT_FREE	7.754626202812732
initialize	7.751387347391788
rsplit	7.7506183017312456
printBoard	7.748150887573965
1900	7.746600741656366
dirc	7.744916820702404
#!python3	7.742586490939045
Puzzle	7.741685144124169
# input	7.7385755454919725
NSS	7.738455855190248
compute_prefix_function	7.735228951255539
Dinic	7.734567901234568
kmp_matcher	7.732004429678849
atc_077a	7.730563554092965
1009	7.728782287822877
blist	7.7265625
base2	7.725562523054224
dv	7.72256473489519
1013	7.722345132743364
calculate_hash	7.719130114264651
LS2	7.7185702547247335
calc_hash	7.715917464996316
r_Xs	7.714579055441478
v=	7.712707182320441
r_Vs	7.710591133004925
,w=	7.709499263622975
max_neg	7.706606483381206
,r=	7.706293706293707
# ハフマン符号	7.7030905077262695
max_pos	7.7026251025430685
# https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/15/ALDS1_15_D	7.699889665318132
x_sheet	7.698646986469864
HuffmanCoding	7.696691176470589
y_sheet	7.6946721311475414
encode_table	7.693495038588754
a_buy_sheet	7.69070053256862
gen_encode_table	7.690301249081557
BubbleSort	7.687109805361734
b_buy_sheet	7.686732186732186
#入れ替え	7.683920704845814
xv	7.68276708964388
##素数判定を行う関数	7.680733944954129
energy_left_1	7.678805237315876
selectionSort	7.677549523110786
energy_left_2	7.674846625766872
# 配列の宣言	7.674367436743674
# 文字列の取得と加工	7.671187683284458
ws	7.670891251022077
bubble	7.668010260168559
tool_gate	7.6669391091131995
CHANGE	7.664835164835164
back_count	7.662990196078431
matB	7.661662394727205
forward_count	7.6590445079624345
matC	7.6584919472913615
swapcase	7.655323819978046
mxu	7.655102040816326
isalpha	7.652158010241404
atc_093a	7.651162790697674
 : 	7.6489945155393055
a_k	7.647226753670473
END_OF_TEXT	7.645833333333334
k_b	7.643293925805137
funcReplace	7.642674461088783
MASK	7.639517896274652
derive_k	7.639364303178484
# Bitset 2 - Enumeration of Subsets 1	7.636363636363637
MIN	7.635437881873727
# Bitset 2 - Enumeration of Subsets 2	7.633211678832117
atc_137a	7.631514657980455
{}: {}	7.63006202116016
inv_link	7.627594627594627
pop_back	7.62691466083151
policy1	7.623769595333576
updated	7.623677786818552
policy2	7.620626822157435
ver2	7.619764131760878
isSteep	7.617486338797814
# curを訪問した直後の処理	7.615853658536585
make_tanka	7.614348142753096
namedtuple	7.611946363266965
#print(num, w_list, i)	7.6112122315253
# AOJ 1602: ICPC Calculator	7.608078602620088
DirectedEdge	7.608042242079611
# Python3 2018.7.13 bal4u	7.604947253546744
required_flow	7.604141291108405
499	7.601818181818182
angleC	7.600243506493506
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z	7.598691384950927
Chebyshev	7.596348884381339
Cube	7.595566860465116
move_next_rows	7.592457420924575
is_in_cube	7.59244460588449
dxyz	7.589324618736384
move_prev_rows	7.588569112282125
IDENTICAL	7.586206896551724
move_next_cols	7.584683954619125
under	7.583091436865022
hour	7.580801944106925
make	7.579978237214364
minute	7.576923076923077
rdp_trace	7.5768672951414064
moved	7.573758608191374
# Python3 2018.7.5 bal4u	7.573047349251315
history	7.570652173913043
sumItUp	7.569174757281553
#print(ar[i],temp)	7.567547989858747
reset	7.565305297209866
#合流点の検出	7.5644460535843585
pre_set	7.56143896523848
#辺の張り直し	7.561346362649294
euler_tour	7.558248914616497
start_place	7.557575757575757
eq_cnt	7.55515370705244
fix_place	7.553715670436187
start1	7.552060737527116
old_count_d	7.549858700040371
start3	7.548970003614022
info_pre	7.546004842615012
start4	7.545881502890174
start5	7.5427952329360775
pay	7.542154094392901
start6	7.539711191335741
0x7fffffff	7.538306451612904
start7	7.53662937567665
page	7.534461910519951
start8	7.533549783549784
path1	7.530620467365027
start9	7.530472412549585
next_starts	7.527397260273972
w_count	7.526782118405155
news	7.524324324324324
e_count	7.5229468599033815
neg	7.521253602305476
s_alp	7.519114688128772
# 消費税8%でA円、10%のときB円の消費税が課される	7.5181850918257105
offset_table	7.515285599356396
# 税抜き価格は？	7.515118790496761
# 小数点以下切り捨て	7.51205469593379
add_node	7.511459589867311
# 税抜きx円	7.508992805755396
post_order	7.507636655948554
# A = |.08x|	7.505933117583602
rightRotate	7.5038167938931295
# B = |.10x|	7.502875629043853
pk	7.5
# x >= A / 1.08	7.4998203377650015
# x >= B / 1.10	7.49676724137931
createHeap	7.496186270574066
0.08	7.493716337522441
maxHeap	7.492375601926163
1.5	7.490667623833453
inner_product	7.488567990373044
#  print(x, a, b)	7.48762109795479
x_p0	7.48476343223737
set_val	7.484576757532281
Judge	7.481534600215131
y_p0	7.480961923847696
read_ints	7.478494623655914
x_p1	7.477163461538462
# 多くても 3 つがぎりぎり焼ける位置	7.47545682551057
y_p1	7.47336804164998
1e300	7.472421203438396
projecter	7.469575660528422
1e-7	7.469387755102041
# kのべき乗でnを超える最大の冪数を求める	7.466356478167501
#couner_clockwise	7.465786314525811
# 最大の冪数から順にとり尽くしていく	7.463327370304114
#clockwise	7.462
# 再帰で書ける？	7.460300429184549
#online_back	7.458216713314673
APPROVED	7.457275652484805
#online_front	7.454436450839328
DENIED	7.454253037884204
00	7.45123258306538
#on_segment	7.450659208949261
# 今見てる数字,次の桁の数字,を受けて	7.448214285714286
parallel_orthogonal	7.446884984025559
# 今使う,繰り上がり，を返す	7.445198143520171
xp0	7.44311377245509
# 次が5なら，そのあと5以上ががくればお得，そうでなくとも損しない	7.442184154175589
yp0	7.439345570630486
# FileName: 	addition_of_big_integers	7.439172315376382
# CreatedDate:  2020-07-26 14:23:13 +0900	7.436162624821684
xp1	7.43558037495014
# LastModified: 2020-07-26 14:23:35 +0900	7.433155080213904
yp1	7.431818181818182
# FileName: 	difference_of_big_integers	7.430149679258731
xp2	7.42805898764448
# CreatedDate:  2020-07-26 14:25:25 +0900	7.427146419665123
yp2	7.424302788844621
# LastModified: 2020-07-26 14:25:41 +0900	7.4241452991453
# FileName: 	multiplication_of_big_integers	7.421146315414738
xp3	7.420549581839904
# CreatedDate:  2020-07-26 14:26:41 +0900	7.418149466192171
yp3	7.416799363057326
# LastModified: 2020-07-26 14:26:55 +0900	7.415154749199573
get_distanceLP	7.413052128929566
getcontext	7.412162162162161
polygon	7.409307875894989
prec	7.40917170280839
ACL	7.406183368869936
is_convex	7.405566600397615
#経路圧縮？	7.403197158081705
#常に次の点が下側に	7.401828298887123
# Boolでreturn	7.400213068181818
attrgetter	7.398092967818831
234139	7.397231096911607
brute_force	7.394360603653693
build_sp	7.3942512420156135
# 移動先の座標の和	7.3912735012415745
find_par	7.390631202858277
#1-indexed	7.388297872340425
whites	7.386904761904763
# 各要素を-1倍	7.385324353066288
blues	7.383181277270925
# 2 4 3	7.382352941176471
prime_table	7.379460745440127
# 3 4 3	7.379383634431456
# 2 6 3	7.376416430594901
q_m	7.375743162901308
z_algorithm	7.373451327433628
dire	7.37202852614897
# a は電源タップの口数	7.370488322717621
newdp	7.368316831683169
# b　は欲しい口数>	7.367527414220021
# print(xxx)	7.364608076009501
# 何個電源タップが必要ですか？	7.364568599717115
# ただしもとから一つの差し込み口がある。	7.361611876988334
oversea	7.360902255639099
y_sum	7.358657243816255
myindex	7.357199367088608
in_list_count_sum	7.355704697986576
default	7.353499406880189
other_list_count	7.352754237288135
3200	7.349805859512884
cvt	7.349802371541502
# for change the recursion limit	7.346859562455892
vS	7.346108257605689
# to enable variable use in global	7.343915343915343
oA	7.342417061611375
# v : current node, f : parent node 	7.340973201692524
_sd	7.338728780102645
# parents node is already visited	7.338033133591823
# initalize gloabal variables	7.335095137420719
1e+9	7.335043409629044
# from operator import itemgetter	7.332159210989785
vdc	7.331360946745562
printout	7.329225352112676
success	7.327681388012618
sprint	7.326293558606125
new_num	7.324004729996059
# from heapq import heappop, heappush	7.323363828289937
# from itertools import product, accumulate, combinations, product	7.320436158986986
# Python3 2018.7.10 bal4u	7.32033096926714
# from copy import deepcopy	7.317510548523206
ROUND_HALF_UP	7.316660102402521
# from numba import jit	7.314586994727593
calc_area	7.312992125984252
intread	7.311665495432186
txt	7.309327036599765
mapline	7.308746048472075
mapread	7.305828651685394
boo	7.305664830841858
popcount	7.3029133029133035
b3	7.30200550530869
0x55555555	7.300000000000001
nc	7.298349056603774
0x0f0f0f0f	7.297088740792704
kcs2	7.294695481335953
0x0000007f	7.294179523141654
BaseXor	7.291272344900106
kcs2_1	7.291044776119403
make_base	7.288367203924317
persimmon	7.287396937573616
change_base	7.285464098073556
next_yama	7.283751962323391
size2	7.282563025210084
numerator	7.280109846998823
#= input()	7.2796639831991605
#= map(int, input().split())	7.276766969909028
86400	7.276470588235295
#= list(map(int, input().split()))	7.273871983210913
RG	7.272834182673462
#= [input(), input()]	7.270979020979022
1e-10	7.269200626959247
#= [list(map(int, input().split())) for _ in range(N)]	7.268088081090529
getmatnum	7.26556991774383
#= [int(input()) for _ in range(N)]	7.265199161425576
#= {i:[] for i in range(N)}	7.262312259867272
#print(x,y,c)	7.261942051683633
flags	7.259427374301676
calc_min_path	7.258317025440313
writeable	7.2565445026178015
must_move_count	7.254694835680752
ipow2	7.253663642707606
find_min_length	7.251075479077043
argmax	7.250784792465993
# force a_c[0]==a_c[N]==0	7.247907949790795
throw_sum	7.24745895230649
signed_area	7.245033112582782
{{	7.2438452520515835
# convex hull O(n)	7.242160278745645
}}	7.240234375
vertices	7.239289446185998
black_magic	7.236626317844593
AMBIGUOUS	7.236420612813371
YYMM	7.233553776540202
POSSIBLE	7.233021077283372
MMYY	7.230688935281837
_max	7.229418650019509
2.0	7.227826086956522
a_sum	7.22581903276131
Solution	7.224965229485397
pivot	7.222222222222221
numSubarrayProductLessThanK	7.222106360792493
# Bで始まりAで終わらない文字列、Bで始まらずAで終わる文字列、Bで始まりAで終わる文字列の個数	7.219249478804725
tf	7.218628215120811
#g = (n//m)*m + (n//m)	7.216394581451892
n_edges	7.215037008180756
#g = (n//m)*(m+1)	7.213541666666666
lu	7.211448598130842
#print(cs)	7.210690732384588
move_rate	7.2078629817049436
is_keepable	7.2078417765440665
get_diameter	7.204994797086368
crs1	7.204280155642023
400_000	7.202149791955618
crs2	7.200700116686114
el	7.199306759098787
dirs	7.197122861586314
# n以下の素数のリスト	7.196465696465696
# A[i] = iが素数なら1,その他は0	7.193626602009006
dz	7.193548387096774
dist_freq	7.190789473684211
_m	7.189976689976691
current_node	7.187954309449637
htmls	7.186407766990291
# 番兵	7.185121107266436
zi	7.182841614906833
# nは偶数、mは奇数	7.182289865098582
# n+mから2つ選ぶ選び方は	7.179460580912863
zj	7.179278230500582
# n:m = 0:2 和は 偶数、選び方はmC2	7.176633252678879
color_list	7.175717610550814
# n:m = 1:1 和は 奇数 （今回はこれは含めない）	7.17380787836904
exch1	7.172159751841798
# n:m = 2:0 和は 偶数、選び方はnC2	7.17098445595855
fs	7.168604651162791
#from heapq import heappush, heappop	7.168162983425415
#from scipy.sparse.csgraph import shortest_path, floyd_warshall, dijkstra, bellman_ford, johnson	7.165343458750431
ind_tap	7.16505230530802
#from decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN	7.162525879917185
count_pc	7.161502711076684
nf	7.159710244912038
fmin	7.157955865272939
nb	7.156896551724138
xopt	7.154411764705882
# Hに関してbit全探索	7.154084798345398
#グループに分ける，区切り(末尾)の数字をいれる	7.151274982770502
left_node	7.150870406189554
998_244_353	7.1484671029969
battle	7.147331786542923
gen_Y	7.145661157024794
to_sets	7.143795902589872
# sC2/1, (s-2)C2/2, (s-4)C2/3  ...	7.142857142857142
sA	7.140262751159197
gen_X	7.140055058499655
# sC3*2/1, (s-3)C3*2/2, (s-6)C3*2/3  ...	7.137254901960784
raw_data	7.136732329084589
1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51	7.134456671251719
DFS	7.133204633204633
#             print(aa,bb,cc,dd,m1,m2,i)	7.131660364386388
price	7.129679660362795
# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line	7.128865979381443
special	7.1261574074074066
ir	7.1260735142562694
tile	7.123282967032967
dbr	7.122637871191669
AAA	7.120494335736355
dbl	7.119121048573632
BBB	7.117707618393959
inputs	7.115606936416185
Stack	7.114922813036021
enqueue	7.1121399176954725
Popen	7.112095531587057
front	7.109358930407954
PIPE	7.108586830958799
dequeue	7.106579849211789
Factors	7.105080831408776
MaxPQ	7.103802672147996
heap	7.101577529819162
swim	7.101027397260275
get_max	7.098254022595002
probabilities	7.098076923076922
delete_max	7.095482546201232
delay1_next	7.0945790080738185
LexicalOrderedList	7.092712966130687
time1	7.091083781706379
__eq__	7.089945280437757
offset2_phase	7.087591240875913
__gt__	7.087179487179487
{} {} {} {} {}	7.084415584415584
inn	7.084101382488479
# FileName: 	map_search	7.081653570208404
DBG	7.0806142034548945
# CreatedDate:  2020-07-15 11:12:11 +0900	7.078893442622951
route0	7.077129700690714
# LastModified: 2020-07-15 11:20:15 +0900	7.076135199726869
isEven	7.073647871116226
# FileName: 	map_delete	7.073378839590443
# CreatedDate:  2020-07-15 11:23:30 +0900	7.070624360286592
mex	7.070168711656441
# LastModified: 2020-07-15 11:29:50 +0900	7.06787175989086
json	7.066692219241089
# FileName: 	set_union	7.065121036481418
INFINITY	7.0632183908045985
# CreatedDate:  2020-06-09 16:02:02 +0900	7.06237218813906
can	7.059747223286097
# LastModified: 2020-06-09 16:04:20 +0900	7.059625212947189
#import pandas as pd	7.056880108991825
Acount	7.056278713629403
symmetric_difference	7.054136874361593
lreq	7.052812858783009
decompress	7.051395507147719
sshead	7.049349655700077
suffix_array	7.048656005444029
0 	7.045918367346939
sstail	7.045889101338432
0 0	7.043182590955457
w0	7.042431192660551
# 75	7.040448674371175
WVs	7.038975926633549
# calc : (a**(-1)) %MOD	7.037716615698267
abc059a	7.035523300229183
10800	7.0349864130434785
calc_ex	7.03225806451613
l_min	7.032073310423826
# 最大の区間を求める	7.029531568228107
#s = input()	7.028625954198473
ifactorial	7.026806922293858
Brown	7.025181228538726
dam_list	7.024084124830393
dn	7.021739130434783
dam_all	7.021363173957274
# type(x) == type(y) == string	7.018644067796609
from_a	7.0182996568814335
# たたきルート１手１枚増える	7.015926804473059
_matrix	7.0148628048780495
# 交換ルートは2手必要	7.013211382113822
smin	7.011428571428571
# bisketをA枚にする	7.010497798848629
ncomp	7.007996953541507
NDP	7.007786052809749
blue	7.00507614213198
10001	7.004567948229919
311111	7.002368064952639
gcdcount	7.001141552511415
property	6.999661819411566
getlist	6.99771776340814
_adj	6.996957403651115
LRX	6.994296577946768
AttributeError	6.994254815816154
#[美味しさ,種類]	6.991554054054054
LX	6.990877993158495
eat_knd	6.988855116514691
mf_graph	6.987462006079028
# DSL_1_B: Weighted Union Find Trees	6.9861580013504385
get_edge	6.984048613748575
weights	6.983462706716166
wj	6.980769230769231
nA	6.980637813211844
({} [{},{}] {})	6.978077571669477
nB	6.977229601518026
# assert 0 <= i <= self.size//2	6.975387727579231
nC	6.973823975720789
# DSL_2_D: Range Update Query	6.972699696663296
ntodo	6.970420932878271
DIVIDED	6.970013477088949
_set_range	6.9673290670259345
nee	6.96702047005307
#!/usr/bin/env pypy3	6.9646464646464645
LG	6.96362258431224
# DSL_2_C: Range Search(kD Tree)	6.9619656681252104
DB	6.960227272727273
islice	6.9592866756393
XY0	6.956834532374101
sort3	6.956609485368315
TemplateTree	6.953934095494284
XY1	6.953444360333082
set_value	6.951260504201681
XY	6.95005675368899
gindex	6.948588709677419
cap1	6.946671709531014
# DSL_2_H: RMQ and RAQ	6.94591871011085
solve_2_eq	6.943289224952741
# Range Minimum Query and Range Add Query	6.943250503693754
# Lazy propagate segment tree	6.9405840886203425
ratio	6.939909297052154
MAXV	6.9379194630872485
# lis_of_lis = [[] for _ in range(N)]	6.936531922931621
_add	6.935256625293525
zz	6.933157099697885
# DSL_2_I: RSQ and RUQ	6.9325955734406435
# Range Sum Query and Range Update Query	6.929936305732484
deque_b	6.929784824462061
_update	6.927278820375335
deque_c	6.926415094339623
63	6.924623115577889
LRUD	6.923047906450396
# DSL_3_C.py	6.921969189551239
FS	6.919683257918551
compute	6.919317040508872
Integral	6.916666666666667
isqrt	6.9163211458725975
Window size must be positive	6.914018066242891
ans_int	6.912961567445365
hp	6.911371237458194
ab_used	6.909604519774012
Dijkstra	6.908726178535606
mint	6.90625
BellmanFord	6.906082887700535
add_bi_edge	6.903441363180755
calcD	6.900801603206413
has_negative_cycle	6.898163606010017
4.9	6.895527369826436
hitBlow	6.892892892892893
Sunday	6.890260173448966
Monday	6.887629209736579
Tuesday	6.885
Wednesday	6.882372542485838
Thursday	6.879746835443038
Friday	6.877122877122877
Saturday	6.874500665778961
paper	6.871880199667221
__future__	6.869261477045908
division	6.86664449617559
print_function	6.864029255319149
# 文字列置換	6.861415752741775
Hoshino	6.858803986710964
Hoshina	6.856193955496513
#!/usr/bin/python3	6.853585657370518
OUT	6.850979090607368
HIT	6.848374253483742
dir	6.845771144278607
# solve function	6.843169761273209
LOOP	6.8405701027510775
# returns a "diameter"	6.837972166998012
# input one dataset	6.835375952302087
# process	6.832781456953643
# judge & output	6.830188679245283
expression	6.827597617471873
# Aizu Problem 00151: Grid	6.825008269930533
# read input:	6.822420634920635
environ	6.819834710743802
sample-input.txt	6.8172504957039
grid_length	6.814667988107037
diag	6.812087186261559
# 1<=E<=n-1	6.8095080884780455
#a>b	6.806930693069307
# n:頂点数, es: 辺uvのコスト	6.804354998350379
# 探索リスト	6.801781002638522
# 優先度付きキューを使うと計算量が少なくなるよ	6.799208704253215
# 最小コストの頂点を取り出し	6.79663810151615
dg	6.794069192751236
# 0<=i<j<=n-1	6.791501976284585
# Ti<T<Tj なるTの個数はj-i-1	6.788936450444518
# T<Ti, Tj<T なるTの個数はn-(j-i+1)	6.786372613561554
get_divisors	6.78381046396841
# ABC142 E	6.78125
# dp[m][s]:=n個目まででsを開けるために必要な最小コスト	6.778691219993423
# 次のカギ買った	6.776134122287968
# やめといた	6.773578705225106
ans0	6.771024967148489
Sunny	6.768472906403941
Cloudy	6.765922521339461
Rainy	6.763373810305218
# ABC168F .(Single Dot)	6.7608267716535435
mv	6.7582814037389305
# https://kmjp.hatenablog.jp/entry/2020/05/10/0900	6.755737704918033
# 数学的な問題	6.753195673549656
COM	6.750655307994758
i_row	6.748116606616443
i_row_list	6.745579567779961
memo1	6.743044189852701
nx_a	6.740510471204188
nx_b	6.737978410206084
NG	6.735448005232178
# print(A, now)	6.732919254658385
# dp[i]:長さiのLISの末尾の数値の最小値	6.730392156862745
# ans[v]=idx こっちだと頂点vで終わるLISの長さになる。下が正しい	6.727866710225417
unsafe	6.725342913128674
_debug	6.722820763956905
stderr	6.720300261096606
# import decimal	6.717781402936378
# decimal.getcontext().prec = 10	6.715264187866928
# from heapq import heappush, heappop, heapify	6.712748614281057
# import math	6.710234680573664
# from math import gcd	6.70772238514174
# import itertools as it	6.7052117263843645
# import collections	6.702702702702703
# from collections import deque 	6.7001953125
# ---------------------------------------	6.697689554181581
# time, silver, vertex	6.695185426154847
2501	6.692682926829268
1e15	6.690182054616385
snuke	6.687682807929802
min_value	6.685185185185185
hashes	6.682689184800259
Yay!	6.680194805194805
:(	6.677702044790652
ABD	6.67521090201168
1e20	6.672721375283815
# size >= n	6.67023346303502
make_grid	6.667747163695299
integars	6.665262475696695
Kr	6.662779397473275
Con1	6.66029792746114
# x座標を1,2,...,N	6.6578180640984135
# y座標をN+1,N+2,...,N+N	6.655339805825243
WarshallFloyd	6.652863151083792
#O(V^3)で任意２頂点の最短距離	6.65038809831824
100002	6.647914645974781
same_line	6.645442792501616
# i+j=s,i<=a[0],i^j=z となるi,jを探す	6.64297253634895
# i+j=i^j+2*(i & j)	6.640503875968992
# s = z + 2*(i & j)	6.638036809815951
# i & j = (s-z)/2 = d	6.63557133634603
# z = 2*(i & j) - s = i ^ j	6.633107454017425
# d = (s-z) / 2	6.630645161290323
# z = x^y , x&y=0	6.628184456626895
# d^x,d^yは条件を満たす。d^x+d^y=d^x^d^y + 2*((d^x)&(d^y))= z + 2*d = s	6.6257253384912955
# (d^x)^(d^y)=x^y=z	6.623267805349662
# (d^x)&(d^y)=d (z & d = 0 のときのみ)	6.620811855670103
mod_pack	6.618357487922705
2000001	6.615904700579524
360	6.61345349211458
#最大公約数	6.611003861003861
#print(N)	6.608555805725314
ans170	6.606109324758842
get_no_dupes	6.603664416586307
busted	6.601221079691516
max_limit	6.598779312560231
xg	6.596339113680155
yg	6.593900481540931
# que->(cost, x, y, direction)	6.591463414634147
#Solve	6.589027911453321
i8[:](i8,i8,i8[:])	6.586593970493906
make_dp	6.584161590253286
minus	6.581730769230769
# i以降、a[i]に4^jをかけたところからソート	6.579301505927587
Grid	6.576873798846893
geta	6.574447646493756
co	6.57202304737516
Christmas	6.5696
Christmas Eve	6.567178502879079
Christmas Eve Eve	6.564758554525104
Christmas Eve Eve Eve	6.562340153452685
#print(p)	6.559923298178331
#lレベルバーガーの下からx層に含まれるパティーの数	6.557507987220447
753	6.555094219099329
min_abs	6.552681992337165
dwacon5th_prelims_b	6.550271305458027
dai	6.5478621569878745
syo	6.545454545454546
0.006	6.543048469387755
#cost = [[-1  for _ in range(W)] for _ in range(H)]	6.540643927319095
# 01-BFS	6.538240917782026
append_walk	6.535839439311883
task	6.5334394904458595
append_tele	6.531041069723019
RRS	6.528644175684278
SRR	6.526248806872415
RSS	6.523854961832061
SSR	6.521462639109698
cycle_t	6.519071837253655
koko	6.516682554814109
#DP containing the information of max value given k items picked in i,j	6.514294790343075
initval	6.511908542394411
#self.common=0	6.5095238095238095
<<=	6.507140590288797
200003	6.504758883248731
#import random,time	6.5023786869647955
#P=[i for i in range(2**(H-1))]	6.5
#random.shuffle(P)	6.497622820919176
min2	6.495247148288973
double_naive	6.492872980677859
Z_algorithm	6.490500316656111
# 共通接頭辞の長さを返す	6.488129154795821
# A - Expired?	6.485759493670886
delicious	6.483391331857007
dangerous	6.481024667931689
#print(N, A)	6.478659500474233
#print(next)	6.47629582806574
# 最小全域木 O(ElogV)	6.4739336492890995
prims_algorithm	6.471572962728995
lxy	6.469213766971897
LazySegmentTree	6.4668560606060606
propagate_above	6.464499842221521
# A - RGB Cards	6.462145110410095
IN_LI	6.459791863765374
IN_LS	6.457440100882724
main2	6.455089820359281
#条件が1<=n<=200kのため1から順に数えてlist内を調査した場合の最大値+1をnに記入	6.452741020793951
#条件から+1まで数えてしまうため、nを+1して調整	6.4503937007874015
search_range	6.448047858942066
out_range	6.445703493862134
initial	6.443360604153556
bust	6.441019188424033
# 正直者のパターンをbit全探索	6.438679245283019
160	6.436340773341716
cura	6.4340037712130735
curb	6.431668237511781
#from collections import defaultdict	6.429334170854271
# 各数字がｓ中に最後にあらわれる位置。	6.427001569858713
# ｓの各桁でその桁以降にある数字の種類。	6.4246704331450095
infinity	6.422340759334798
SUN	6.420012547051443
MON	6.417685794920038
TUE	6.415360501567398
WED	6.413036665622062
THU	6.410714285714286
FRI	6.408393360476041
SAT	6.406073888541014
# ライブラリ参照https://atcoder.jp/contests/practice2/submissions/16580070	6.403755868544601
400000	6.401439299123905
\d+$	6.399124178917735
labels	6.396810506566604
#.	6.394498280712723
fc	6.3921875
ec	6.389878163074039
Ti	6.387570268582136
# 'U'	6.385263815173275
# 'R'	6.382958801498128
# 'D'	6.380655226209049
# 'L'	6.3783530879600745
rotate_dice	6.376052385406922
enumerate_dice	6.373753117206983
dice_graph	6.371455282019321
__ranks	6.369158878504673
# ?±?????????????????????????????????°??????	6.366863905325443
# ????????????????????°?????????????????????????????????????????¨????????????	6.364570361145703
# ??????????????????????????¨????¨?????????????????????§????´?????°???????????????????????????°??????	6.362278244631185
#print(A,B,index)	6.359987554449284
bisect_right_rev	6.3576982892690515
# map(int, input().split())	6.355410447761194
# limitの最大値（limitなし）	6.353124028598073
# dp[iまでみた][前のj個が連続]	6.350839030453698
# 直前にK個連続しているときは追加できない	6.348555452003728
# E - Virus Tree 2	6.346273291925466
# region fastio	6.343992548897858
BUFSIZE	6.3417132216014895
8192	6.339435308718585
FastIO	6.337158808933003
newlines	6.334883720930232
_fd	6.332610043397396
fileno	6.330337775023241
writable	6.328066914498141
# '#.'という箇所が1箇所でもあるとダメなので、ある場所に黒が現れたら	6.325797460514091
# 、そこから右は全て黒にならないといけない	6.323529411764706
# dp[i][j] = a1~aiを塗った時に、赤で塗った和をjにする方法数	6.321262766945218
# dp[i][j] = a1~aiの中からいくつか選んで、和をjにする方法数	6.318997524752476
# 1010...	6.316733683884936
# 0101...	6.3144712430426715
count2	6.312210200927357
# even:1	6.309950556242274
# odd:0	6.3076923076923075
# 1-0-1-0-1 の配列にする. 両端は1にする	6.30543545398394
#以上の物の個数がK以下	6.303179993825255
#以上の物の個数がKより大きい	6.300925925925926
ans_que	6.298673248997223
# g1[i]=i! % mod　:階乗	6.296421961752005
# g2[i]=(i!)^(-1) % mod　:階乗の逆元	6.2941720629047175
add_	6.291923551171394
show_	6.289676425269645
sub_sum_	6.287430683918669
#A:0 C:1 G:2 T:3	6.285186325839236
pow4	6.282943349753695
# def LF(): return [float(x) for x in sys.stdin.readline().split()]	6.280701754385965
factorize	6.2784615384615385
# 解説AC	6.276222700707475
hpq	6.273985239852398
#from scipy.sparse.csgraph import dijkstra	6.271749154626499
nway	6.2695144437615244
#sys.setrecursionlimit(10**6)	6.267281105990784
SL	6.26504914004914
# a,b,c == k//2 + p*k を満たすとき	6.262818544673012
# a,b,c == p*k を満たすとき	6.260589318600369
inv_2	6.258361460570727
anss	6.256134969325154
n_pair	6.253909843606256
# permutationになっている極小区間に分ける	6.251686082158185
to_left	6.249463683726632
to_right	6.247242647058823
# [0, i) の要素の総和を返す	6.2450229709035225
SW0	6.242804654011023
ABCDEFGHIJ	6.24058769513315
SW1	6.238372093023256
abcdefghij	6.236157846436219
Bi	6.23394495412844
# seishin.py	6.231733414857842
Gx	6.229523227383863
RollingHash	6.227314390467461
qb	6.225106902871105
r_max	6.222900763358779
dpi	6.220695970695971
-0123456789	6.2184925236496795
#   12  11	6.216290420988408
# 13  06  13	6.214089661482159
#   05  04	6.211890243902439
# 10  03  09	6.209692167022249
#   02  01	6.207495429616087
# 13  00  13	6.205300030459945
#   08  07	6.203105968331303
condition2	6.200913242009133
# nCr=n!/r!(n-r)!で計算する関数（計算量n*logMOD）…n,rを変えつつ何度も実行する場合	6.1987218502738894
# 各x!および逆元はテーブルで持っておく	6.196531791907514
#print(M,term,bunshi,bumbo)	6.194343065693431
# print(dfs(0,-1,0))	6.19215567041654
pbit	6.189969604863222
zfill	6.187784867821331
#p2D(aa)	6.185601458080194
# 人iが勝てる相手をbitで管理する	6.183419374430611
#pbit(win,n)	6.181238615664845
# dpl[i]...[j,i]の範囲で優勝できるjをbitで	6.1790591805766315
# dpr[i]...[i,j]の範囲で優勝できるjをbitで	6.176881067961165
dpl	6.174704276615104
dpr	6.172528805336568
pate	6.170354652925129
light_on	6.168181818181818
bulb	6.166010299909119
turned_switch	6.163840096910963
# ABC128 D	6.161671207992734
# 連続する k(K,K-1,...)個の宝石をとる	6.159503631961259
# K-k個まで捨ててよい	6.157337367624811
DD	6.155172413793103
get_cross_point	6.153008769277291
{:.10f} {:.10f} {:.10f} {:.10f}	6.1508464328899635
bitdp	6.14868540344515
item_v	6.146525679758308
item_w	6.14436726064633
Vsum	6.142210144927536
# http://www.geocities.jp/m_hiroi/light/pyalgo65.html	6.1400543314216725
isinf	6.13789981894991
__createtable	6.135746606334842
mask64	6.133594692400482
hash	6.131444075972264
0x03F566ED27179461	6.1292947558770345
from_dtype	6.127146730943055
# input aliases	6.125
getN	6.1228545618789525
getList	6.120710415412402
getZList	6.118567559434246
divide	6.116425992779783
# 縦ドミノ	6.114285714285714
# 横ドミノ	6.112146722790138
# 2は素数でないとして扱って	6.110009017132552
# imosで値を入れないといけない場所	6.107872596153846
# 1手でとれるペアを見つける：最大マッチング	6.105737458696305
# 奇点から偶点に辺を貼る	6.103603603603603
INPUT	6.101471029720805
Dijkstra_heap	6.0993397358943575
# 始点sから各頂点への最短距離#始点sから各頂点への最短距離	6.0972097209720975
# まだ使われてない頂点の中から最小の距離のものを探す	6.095080983803239
# memo[i] := 色がiであるような石jについてのdp[j]の値の合計値（適宜更新する）	6.092953523238381
_nthA	6.090827338129497
ntha	6.088702427329937
MinCost	6.0865787896944274
mincost	6.0844564240790655
prev_v	6.082335329341317
prev_e	6.080215504340018
zip_longest	6.078096947935368
fillvalue	6.075979658988932
# 各連結成分の大きさ	6.073863636363637
Heisei	6.071748878923767
TBD	6.069635385534967
amount	6.067523155064237
JPY	6.065412186379929
neighborhood	6.063302478351747
dist_calc	6.061194029850746
res2	6.0590868397493285
2800	6.0569809069212415
AGC	6.054876230241574
A[a-z]+C[a-z]+	6.052772808586762
fullmatch	6.050670640834575
# Segment tree (+)	6.048569725864124
_op	6.046470062555853
_e	6.044371649791542
search_ab	6.042274486454302
# print('a', cursor)	6.040178571428571
search_ba	6.038083903600119
# print('b', cursor)	6.035990481856038
nearlist	6.033898305084746
# 隣接リスト	6.031807372175981
# 幅優先探索  # キュー	6.029717682020802
guchoku	6.027629233511586
Bad	6.025542025542025
Good	6.023456057007126
y_max_	6.021371326803206
y_min_	6.019287833827893
# dp[i]:どんぐりをi個交換した時の最大獲得どんぐり	6.017205576980125
#if a>b:continue	6.015124555160142
38	6.013044767269493
https://atcoder.jp//contests/abc129/tasks/abc129_a	6.0109662122110255
https://atcoder.jp//contests/abc129/tasks/abc129_b	6.0088888888888885
# a_n = r * a_{n-1} + b * n + c	6.006812796208531
Aoki	6.0047379330766955
Takahashi	6.002664298401421
Four	6.000591891092039
Three	5.9985207100591715
with	5.996450754214729
MARCH	5.99438202247191
U1	5.992314513745197
# N-1行目を埋めたあと、2個ずつ	5.990248226950355
# [0, ind), [ind, L-1]	5.988183161004431
testmod	5.986119314825753
#unionfind	5.984056687333924
make_levels	5.981995277449823
levels_dict	5.979935084095604
sqsum	5.977876106194691
anslis	5.975818342671778
# tenka1-2018C - Align	5.97376179245283
# 高橋くんの場合	5.9717064544650755
mincos	5.969652327637006
hen	5.96759941089838
hen2	5.965547703180212
Hello 	5.963497203414778
World	5.961447910535609
https://atcoder.jp//contests/abc111/tasks/abc111_a	5.959399823477494
# if x is not found	5.95735294117647
num_of_nth_often	5.955307262569832
v_even	5.95326278659612
v_odd	5.951219512195122
# s[0]=1,s[-1]=0,s[k]=s[n-k-1]は必要	5.949177438307873
https://atcoder.jp//contests/abc110/tasks/abc110_a	5.947136563876652
War	5.945096887844979
No War	5.943058409157617
xyp	5.941021126760563
caldp	5.938985039601056
#p = (i1 + i2) ** 2 - (i1 * i2) + i3 * (i1 + i2 + i3)	5.936950146627566
from10to2	5.9349164467897975
from2to10	5.932883939038687
# ベースの嬉しさは sum_i min(Li, Ri)	5.930852622326399
# (1) Li > Ri なるラクダ	5.928822495606327
#   なるべく先頭側に寄せることで追加の嬉しさを獲得できる	5.926793557833089
# (2) Li < Ri なるラクダ	5.92476580796253
#   なるべく末尾側に寄せることで追加の嬉しさを獲得できる	5.922739244951712
# => (1), (2) それぞれで追加できる嬉しさの最大値を求めてベースに足す	5.9207138677589235
# (1)	5.918689675343668
# Ref: https://betrue12.hateblo.jp/entry/2020/07/12/060026	5.916666666666667
generate_points	5.914644840689856
# Lagrange補完するためのデータ点を計算	5.912624196376388
comb_1	5.910604732690622
# (n+4)_C_4	5.908586448598131
comb_2	5.906569343065693
# (2n+10)_C_10	5.904553415061296
AC x 	5.902538663554129
verbose	5.900525087514586
200000	5.898512685914261
choices	5.896501457725948
#        print (ret)	5.894491401923638
POS	5.8924825174825175
4100000	5.890474803378969
#1,2~8,9,both	5.8884682585905646
Combination	5.88646288209607
1e12	5.884458672875437
shift	5.882455629909805
DisjointSetUnion	5.880453752181501
FenwickTree	5.878453038674033
#値の更新	5.876453488372093
_sum	5.874455100261552
divideArr3	5.872457873329459
convolveArr	5.870461806564043
convolveMOD	5.868466898954704
csr	5.866473149492017
scc_graph	5.864480557167731
# 0～N : X_i	5.862489120974761
# N+1～2N: Y_i = ￢X_i	5.8604988399071924
sa_naive	5.858509712960278
sa_doubling	5.856521739130435
lazysegmenttree	5.854534917415242
reflect	5.8525492468134415
propagate	5.850564726324935
fts	5.848581354950782
its	5.846599131693198
10000000000	5.844618055555555
argsort	5.842638125542377
2010	5.84065934065934
factor_iter	5.83868169991327
factorize_by_sieve	5.836705202312139
#s = input()		5.834729846865068
### 素数の逆元とCombination	5.832755632582322
# 必要なテーブルサイズ	5.830782558475311
# ai+b==0 mod M <=> i==-b*a^(-1) <=> i^(-1)==-b^(-1)*aより	5.828810623556582
#sからの距離のリスト	5.8268398268398265
#Trueなら未確定	5.824870167339873
#こいつがheapqになる	5.822901644072686
#重みと行先を1つの変数で表してる！	5.820934256055363
#miraiがTrueのやつ(未確定なやつ)から最小距離のものをさがす	5.81896800230614
#距離が小さいものから"確定"していく	5.81700288184438
#最小距離の頂点	5.815038893690579
#その距離	5.813076036866359
keyence	5.811114310394472
HC	5.809153713298791
WC	5.807194244604316
# 	5.805235903337169
#print(sums)	5.80327868852459
#print(keys)	5.80132259919494
ndp0	5.7993676343776945
ndp1	5.797413793103448
# メイン関数	5.795461074403907
# 入力データ	5.79350947731189
# dpテーブルの作成	5.7915590008613265
#Dp such that when the first takes the turn with i remaining stones,	5.789609644087256
#0->Second, 1->First wins	5.787661406025825
# 標準出力による質問 interactive	5.785714285714286
210	5.783768282190995
? %s	5.7818233944954125
#     print("hoge")	5.779879621668099
# r, ..., r+n-2に同数個	5.777936962750716
#permutationsは順列を列挙	5.775995416786021
RangeSpannedGraph	5.774054982817869
_weighted	5.772115659891211
_reflect	5.770177447052089
#a,bの最小値を記憶してくれてる？	5.76824034334764
# x分以内に食べきれるための修行回数はK回以下か	5.766304347826087
#駅x時間ｔで移動するのにかかる時間	5.764369459536746
primels	5.762435677530017
Left	5.760503000857388
Balanced	5.758571428571429
Right	5.756640959725793
#データ加工	5.754711593375214
#0->x 1->y	5.752783328575506
k_fix_way	5.750856164383562
centroid	5.748930099857347
+/	5.747005134055904
1e-5	5.7450812660393495
ex	5.743158494868871
ey	5.741236819606725
ez	5.739316239316239
shellSort	5.737396753061806
gaps	5.735478359908884
776591	5.733561058923996
345152	5.73164484917473
153401	5.72972972972973
68178	5.727815699658703
30301	5.725902758032414
keisan	5.723990903922683
schedule	5.722080136402387
listForReturn	5.720170454545454
delete	5.718261857426867
calcAreas	5.716354344122657
toDelta	5.714447913709907
\\	5.712542565266743
#---------------for input--------------------	5.7106382978723405
numberN	5.70873511060692
#---------------for input----------------------	5.706833002551743
match_count	5.704931972789115
Is_ToPut	5.7030320204023806
makeCache	5.701133144475921
fabs	5.6992353440951575
] 	5.697338618346546
Stable	5.695442966317577
Not stable	5.693548387096774
calcurate_cost	5.691654879773692
get_depth	5.689762443438914
rooted_tree	5.687871077184054
get_node_type	5.685980780101753
leaf	5.684091551285674
internal node	5.682203389830509
preorder_list	5.680316294831968
bellman_ford	5.678430265386787
# AOJ 1172: Chebyshev's Theorem	5.676545300592718
250000	5.674661399548532
# for 2	5.672778561354019
# for odd num only	5.670896785109983
195	5.669016069918241
%0	5.6671364148816235
#! cat input | python3 main.py	5.665257819103973
debug	5.663380281690141
phase	5.661503801745987
sol	5.659628378378378
fail	5.657754010695188
1e8	5.65588069780529
c_list	5.654008438818566
# cycle	5.652137232845894
# direction	5.650267078999157
#ｘは変更前税率、ｙは変更後税率、ｓは変更前税込み合計	5.648397976391231
# print('@', *args)	5.646529924135994
removeAll	5.644662921348314
removed	5.6427969671440605
sum1	5.64093206064009
turn	5.639068200954252
core_islands_num	5.6372053872053876
diameter	5.635343618513324
end_point	5.633482893998878
# AOJ 1200: Goldbach's Conjecture	5.631623212783852
# Python3 2018.7.19 bal4u	5.629764573991031
32770	5.627906976744186
# > 2^15	5.626050420168068
182	5.624194903388407
# sqrt(MAX)+1	5.622340425531915
add_area	5.620486985726281
ye	5.618634583100168
tanri	5.616783216783217
fukuri	5.614932885906041
# AOJ 1141: Dirichlet's Theorem on Arithmetic Progre...	5.613083589600223
make_pieces	5.611235326998323
R_next	5.609388097233865
L_next	5.60754189944134
# 組み込み関数input()は標準入力から読み込まれた1行を返す．	5.605696732756213
monsat	5.6038525963149075
__int__	5.602009489254814
__neg__	5.600167410714286
__mul__	5.598326359832636
Ternary(%d)	5.596486335750139
# n= 人数　p = 最初に入っている個数	5.594647337608029
Union_find	5.592809364548495
# time, speed, where, pre	5.590972415714684
# 次に進める	5.589136490250697
# r位置にxを追加	5.587301587301587
nl	5.585467706013363
addFlag	5.5836348455329805
# Union Find	5.581803005008347
# xの根を求める	5.579972183588317
# xとyの属する集合の併合	5.578142380422692
# x < y にする	5.576313594662219
#長方形の最も左の点	5.574485825458588
#長方形の最も右の点	5.572659071964434
is_bipartite_graph	5.570833333333334
cal	5.5690086087198
3500	5.567184897279289
# kはm桁	5.565362198168193
euler_phi	5.56354051054384
biggcd	5.561719833564494
positions	5.559900166389351
1121	5.5580815081785415
solve_cos	5.556263858093127
# -*- coding: utf-8 -*-/	5.554447215295095
# ??\???	5.552631578947368
# 0 0 0??§??????	5.550816948213791
# 1 ~ n????????????????????§??¨???	5.549003322259137
# ????????????????????¨????????????????????¬?????????	5.5471907002491
# ??????1?????????????????§	5.545379081350305
# ?????????????????????m???????´??????????	5.54356846473029
motomeruyuo	5.541758849557522
2001	5.539950235001382
primeTable	5.538142620232173
get_value	5.536336004421111
KeyError	5.5345303867403315
decl_prog	5.5327257663628835
(\w)\[(\d+)\]	5.530922142462728
polygon_cont	5.529119514214739
BASE	5.527317880794702
%02d:%02d:%02d	5.52551724137931
ts	5.523717595146167
ALL	5.52191894127378
bALL	5.5201212789415655
ti	5.518324607329843
min1	5.516528925619835
S0	5.514734232993666
SM	5.512940528634362
construct	5.511147811725847
nds	5.509356081452944
# return [g, x, y]	5.507565337001376
# g = gcd(a, b)	5.505775577557756
# x, y satisfies a x + b y = g	5.503986802309596
# eq0: x = a0 (mod m0)	5.5021990104453
# eq1: x = a1 (mod m1)	5.500412201154163
# returns [xt, mod] such that x =	5.498626373626373
#! /usr/bin/env python3	5.496841527053007
PotentializedUnionFind	5.4950576606260295
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ	5.4932747735382925
llcs	5.491492864983535
get_data_list	5.489711934156379
count_num_under_average	5.487931980252331
reverse_sorted_num_list	5.486153002467781
reverse_sorted_income_list	5.484375
population	5.482597972047136
empty_index	5.480821917808219
empty_nums	5.479046836483155
#num を増やしていって、aの解が整数になるかをチェックする	5.4772727272727275
cj	5.475499589378593
closest_pair_distance	5.473727422003284
# axis: x; 1, y; 2	5.471956224350206
lcs	5.470185995623632
pre_lcs	5.468416735028712
pre_lcs_len	5.46664844177146
ABCDEFGHIJKLMNOPQRSTUVWXYZ	5.464881115058759
entropy_if_smallest	5.463114754098361
ans_h	5.46134935809888
line_cross_point	5.459584926269798
bisector	5.457821457821458
Zero	5.4560589519650655
#mod should be prime number	5.454297407912688
#using homogeneous_product(n,r), max_fact ≧ max(n+r-1)	5.45253682487725
isnotxyz	5.450777202072539
invert	5.4490185387131955
sort_insertion	5.447260834014718
2000000001	5.44550408719346
#iからj人乗せた中で最小座布団	5.44374829746663
=7	5.441993464052287
# ! /usr/bin/env python	5.440239586169344
# INF =  float("inf")	5.438486663037561
# mod = 998244353	5.436734693877551
# Dinic's algorithm	5.434983677910773
# 始点ノードidx，終点ノードidx，容量をinput	5.433233614359533
#あるbより小さいaの数	5.431484502446982
count_a	5.429736341397119
count_c	5.427989130434782
5000	5.426242868785656
#空白なし	5.424497555676263
# Aj-Ai == Bj-Bi のとき、	5.4227531903339665
# (Ai,Bi) を選んだときの盤面が'よい' ⇔ (Aj,Bj) を選んだときの盤面が'よい'	5.421009771986971
# Ai = i回以下マシンを稼働することで、全て黒く塗られるような順列の個数	5.419267299864315
700	5.417525773195877
# Problem: https://atcoder.jp/contests/arc096/tasks/arc096_a	5.415785191212367
# Python 2nd Try	5.414045553145336
# from collections import defaultdict	5.412306858227161
# import heapq,copy	5.4105691056910565
# from collections import deque	5.408832294771065
# Const	5.4070964247020585
MAXSIZE	5.40536149471974
MINSIZE	5.403627504060639
solver	5.401894451962111
ab_price	5.400162337662338
#左回り用	5.398431160400325
#右周り用	5.396700919415901
energy_right_1	5.394971613949716
energy_right_2	5.393243243243243
q	5.392857142857167
#sys.setrecursionlimit(10 ** 6)	5.391515806538774
#print(to)	5.389789303079416
#n/k - n/(k+1) >= 1となる最大のkを求める。ただしn>=2	5.388063732109101
#A*B/k - A*B/(k+1) >= 1となる最大のkを求める	5.3863390928725705
#print(A, B, k, (A*B-1)//(k+1))	5.384615384615385
bell	5.382892606583918
#fin=open('in','r')	5.381170758025357
#input=lambda:fin.readline().strip()	5.3794498381877025
#sum of -((x-j)^(p-1)-1)	5.377729846319763
# (-j + x)^(p-1) = sum((-j)^i * x^(p-1-i) * binom(p-1,i))	5.376010781671159
Bssum	5.37429264349232
#dp[i][j]	5.372575431034483
get_cycle	5.370859143549691
# root?????£????????????????????????????????§?????????????????????	5.369143780290791
# ?????°????????§???????????????????????????	5.36742934051144
checking	5.365715823466092
# curからvへ訪問する直前の処理	5.364003228410008
# 未訪問なら再帰探索する	5.362291554599247
# nxtの探索が終了した直後の処理	5.36058080129067
# GRL_4_A: Path/Cycle - Cycle Detection for a Directed Graph	5.358870967741935
Digraph	5.3571620532115025
has_cycle	5.355454056958624
FordFulkerson	5.353746978243352
trace_back	5.3520408163265305
min_cost_flow	5.350335570469799
MaxFlow	5.348631239935588
_level	5.346927823987121
_iter	5.345225321888412
Daise	5.343523732904264
__move_next	5.341823056300268
__move_prev	5.340123291342803
{0} {1}	5.338424437299035
{0}:{1}:{2}	5.336726493436914
data1	5.335029459025174
get_min_value_in_row	5.333333333333333
is_max	5.331638115631692
# AOJ 1006: Boring Commercials	5.32994380519133
{0:>3}	5.328250401284109
Case {}:	5.326557903182669
up	5.324866310160428
#        print("{}	5.32317562149158
dominos	5.321485836451096
rpn	5.319796954314721
idsu	5.3181089743589745
idsuc	5.316421895861148
#根を見つける、繋ぎ直す	5.314735718099306
#x,yの含むグループを併合する	5.313050440352282
suffle	5.31136606189968
# A106633	5.309682582021873
# AOJ 1028: ICPC: Ideal Coin Payment and Change	5.308
OP	5.306318315115969
Page	5.304637526652452
Button	5.302957633892886
Buffer	5.30127863612147
pointer	5.299600532623169
contents	5.297923322683706
# AOJ 1055 Huge Family	5.296247005589566
# AOJ 1058 Winter Bells	5.294571580627994
# AOJ 1060: No Story	5.292897047086991
# Python3 2018.6.8 bal4u	5.2912234042553195
1000004	5.289550651422494
ptbl	5.287878787878788
43	5.286207812915227
47	5.284537725823592
53	5.282868525896414
67	5.281200212426978
71	5.279532784709318
79	5.2778662420382165
83	5.2762005837092065
89	5.274535809018568
103	5.272871917263325
107	5.271208907741252
109	5.269546779750861
113	5.267885532591415
131	5.266225165562914
137	5.264565677966102
139	5.262907069102463
149	5.26124933827422
151	5.259592484784334
157	5.257936507936508
163	5.256281407035176
167	5.25462718138551
173	5.252973830293418
179	5.251321353065539
181	5.249669749009247
191	5.248019017432647
193	5.2463691576445735
197	5.2447201689545935
199	5.243072050673001
211	5.241424802110818
223	5.2397784225797945
227	5.238132911392405
229	5.2364882678618505
233	5.234844491302056
239	5.233201581027668
241	5.231559536354057
251	5.229918356597314
257	5.228278041074249
263	5.226638589102396
269	5.225
271	5.22336227308603
277	5.221725407680168
281	5.220089403102814
283	5.218454258675079
293	5.216819973718791
307	5.21518654755649
311	5.213553979511427
313	5.211922268907563
317	5.210291415069572
331	5.208661417322834
337	5.20703227499344
347	5.205403987408185
349	5.2037765538945715
353	5.2021499737808075
359	5.200524246395806
367	5.198899371069182
373	5.197275347131255
379	5.195652173913044
383	5.1940298507462686
389	5.192408376963351
397	5.1907877518974095
409	5.189167974882261
419	5.187549045252419
421	5.185930962343096
431	5.184313725490196
433	5.182697334030319
# AOJ 1059 Mysterious Onslaught	5.181081787300758
2000000	5.179467084639499
XorSum2	5.177853225385218
# 尺取法インデックス	5.176240208877284
# 尺取法	5.174628034455756
ruiseki	5.1730167014613775
celi	5.1714062092355855
5000000	5.169796557120501
direction	5.168187744458931
# print(l,r,cnt,xor)	5.166579770594369
dsu	5.164972634870993
# https://atcoder.jp/contests/agc024/tasks/agc024_b	5.163366336633663
# 解法 -> 最長の連続部分列を求めればよい	5.161760875227924
# {1,3,4,5,2,7,6} => {3,4,5}	5.16015625
tempc	5.158552460296797
frombuffer	5.156949505465903
subtable	5.155347384855582
# print(Slist)	5.153746097814777
UF	5.152145643693108
num_group	5.150546021840873
binaryTree	5.148947231609046
treelist	5.147349272349272
binarysearchtree	5.1457521434138735
leftRotate	5.144155844155844
setKeys	5.142560373928849
lk	5.140965732087228
# ????????????b???????????????a??????????????´????????£?°???±???????????????????????????	5.139371917985985
extract	5.137778930980799
{:.10f} {:.10f}	5.136186770428016
CCW	5.1345954356846475
COUNTER_CLOCKWISE	5.1330049261083746
CLOCKWISE	5.131415241057542
ONLINE_BACK	5.129826379891163
ONLINE_FRONT	5.1282383419689115
ON_SEGMENT	5.126651126651127
#内積0の場合直行している	5.125064733298809
#外積0の場合平行	5.123479161273622
# p0..p3がそれぞれ座標になっている	5.121894409937888
#内積	5.120310478654592
#外積	5.118727366787377
get_distance	5.117145073700543
triangle	5.115563598759048
{:.1f}	5.1139829413285085
convex_hull	5.112403100775194
#上側を入れていく	5.110824076466029
#下側を入れていく	5.109245867768595
# http://www.prefield.com/algorithm/geometry/convex_diameter.html	5.107668474051123
convex_diameter	5.106091894682499
maxd	5.104516129032258
norm	5.102941176470588
## どの桁が1になっているかをチェックするために2進数の各桁をループ	5.101367036368326
## i >> jで確認したい桁を一番右までずらして1と論理積をとって「選択」している要素を確認	5.099793708096957
Recording	5.098221191028616
# チャンネルごとにimos配列	5.096649484536083
# imos	5.095078587992785
# Atcoder problem Solving	5.093508500772797
# Code Festival Team Relay	5.091939222250837
# case_impossible	5.090370751802266
# case_possible	5.088803088803089
MX	5.087236232629953
300	5.08567018266015
primes_small	5.084104938271605
primes_large	5.08254049884289
fact_table	5.080976863753214
Unionfindtree	5.079414032382421
# 親を探す	5.077852004110997
# x,yを繋げる	5.076290778320062
# 根	5.074730354391371
# 根からの距離	5.073170731707317
# BFS	5.071611909650924
sum_A	5.070053887605851
sum_q_p	5.068496664956388
to_remove	5.066940241087458
# 同じ文字を2つつなげると回文になるので、最低限隣り合う文字が全部異なる必要がある。	5.065384615384615
# また、abaのように、2つ先で一致してしまってもこれも回文になるのでNG。	5.0638297872340425
# となると結局「abcabc...」みたいに巡回する形の文字列しか回文回避の方法はない。	5.062275756022553
# こういう巡回する形の文字列を作るには、a,b,cの数の最大と最小の差が1以内であればOK。	5.060722521137587
#left or right	5.059170081967213
solveequation	5.057618437900128
#edge=[[to,dire,id]...]	5.056067588325653
kaibun	5.054517532633734
cnt_zero	5.052968270214944
date	5.051419800460476
timedelta	5.049872122762149
buy	5.048325236512401
sell	5.046779141104294
buy_memo	5.04523383593151
sell_memo	5.043689320388349
tmp_buy_memo	5.042145593869732
odd_even	5.040602655771195
chi	5.039060505488894
clo	5.037519142419602
pyr	5.035978565960704
CODEFESTIVAL2016	5.034438775510204
# pre+1以上の数値を何回か引き算してxを1以上pre以下にする	5.0328997704667175
# 引き算の回数はなるべく多く	5.031361550229475
__setitem__	5.029824114198318
# 要素が入ってない場合の list.index の定義	5.0282874617737
okflag	5.026751592356688
linput	5.025216505348956
#vD += [".","#"]	5.0236822001527885
#res = 0	5.02214867617108
1001001001	5.02061593280733
#sT = "No Yes".split()	5.019083969465649
#print(sT[res])	5.01755278555075
sf	5.016022380467955
restore	5.0144927536231885
acc_S	5.012963904422979
acc_T	5.01143583227446
#if i==-n: return 0	5.009908536585366
#print(a)	5.008382016764034
Que	5.006856272219401
emp	5.0053313023610055
111223111223	5.003807106598985
#n, *d = map(int, open(0).read().split())	5.002283684344075
# dream dreamer erase eraser 	5.00076103500761
# AOJ 1065 The House of Huge Family	4.999239158001521
# AOJ 1069: Squid Multiplication	4.997718052738337
# AOJ 1100: Area of Polygons	4.996197718631179
ROUND_HALF_EVEN	4.994678155093766
quantize	4.99315936154041
rounding	4.991641337386018
TextEditor	4.990124082046088
cur_w	4.988607594936709
cur_c	4.9870918754745635
queries	4.985576923076923
forward char	4.98406273716165
forward_char	4.982549317147193
forward word	4.981036662452592
forward_word	4.979524772497472
backward char	4.978013646702047
backward_char	4.976503284487115
backward word	4.974993685274059
backward_word	4.973484848484849
delete char	4.971976773542035
delete_char	4.970469459868753
delete word	4.968962906888721
delete_word	4.967457114026236
# AOJ 1102: Calculation of Expressions	4.965952080706179
# AOJ 1103: Board Arrangements for Concentration Gam...	4.964447806354009
numchange	4.9629442903957655
yaxis	4.961441532258065
xaxis	4.959939531368103
STOP	4.958438287153652
RIGHT	4.956937799043062
LEFT	4.955438066465256
movequeue	4.953939088849736
# AOJ 1106: Factorization of Quadratic Formula	4.952440865626572
# AOJ 1108: A Long Ride on a Railway	4.950943396226415
# AOJ 1110: Patience	4.949446680080483
# Python3 2018.7.8 bal4u	4.947950716620568
max_size	4.946455505279035
get_max_rectangle	4.944961045488816
max_rectangle_right	4.943467336683417
check_expandable	4.94197437829691
check_fill_ones	4.940482169763937
count_characters	4.938990710519708
kcs	4.9375
anslist	4.936010037641155
find_point	4.9345208228800805
# 二頂点(x1,y1),(x2,y2)を円周上にもつ時の半径1の円の中心	4.933032355154252
# (mx,my)+-(k/L)(-y2+y1,x2-x1)	4.931544633901705
# aa	4.930057658561043
# 1 2 4 5	4.928571428571429
# 2 3 1 6	4.927085943372588
# 3 4 2 7	4.92560120240481
# 4 1 3 8	4.92411720510894
# 5 8 6 1	4.9226339509263894
# 6 5 7 2	4.921151439299124
# 7 6 8 3	4.91966966966967
# 8 7 5 4	4.918188641481111
tc	4.916708354177088
scc	4.9152288072018
rdfs	4.91375
J	4.912271932016996
rotate	4.910794602698651
HopcroftKarp	4.909318011491381
21	4.907842157842158
DSUWeighted	4.906367041198502
wt	4.904892661008487
#assert 0 <= a < self.n	4.903419016720739
Even	4.901946107784431
Odd	4.900473933649289
#左上を(x1,y1)右下を(x2,y2)にしてmatの中の左上~右下の領域の和を算出	4.899002493765586
#pprint(dpw)	4.8975317875841435
#pprint(dpb)	4.896061814556331
# from itertools import product, takewhile	4.894592574134064
is_movable	4.893124065769806
#左上を(x1,y1)右下を(x2,y2)にしてmatの中の左上~右下の領域の和をdpから算出	4.891656288916563
impossible	4.890189243027889
# XとYをつなぐ辺の作成	4.888722927557879
n_x	4.887257341961175
n_y	4.885792485692958
Borys	4.884328358208955
# でつoO(YOU PLAY WITH THE CARDS YOU'RE DEALT..)	4.882864958965431
# ...B の直後に A を a 個、B を b 個置けるかどうか	4.881402287419195
fr'	4.879940343027592
match	4.878479125248509
48	4.877018633540373
1431655765	4.875558867362146
858993459	4.87409982617333
252645135	4.872641509433962
16711935	4.8711839166046165
65535	4.869727047146402
# 「全てに1を足して、特定のものからN+1を引く」で等価な操作になる	4.868270900520963
#print(loop)	4.866815476190476
# A - Sharing Cookies	4.865360773617654
Possible	4.863906792265741
inved	4.862453531598513
# C - Splitting Pile	4.861000991080277
spell	4.859549170175873
# sys.stdin = open('e1.in')	4.858098068350668
read_str_list	4.856647685070562
read_str	4.85519801980198
total_in	4.853749072011878
total_out	4.852300841167739
r_adj	4.850853326737571
# A - ringring	4.849406528189911
stern_brocot	4.847960444993819
lx	4.846515076618883
ly	4.845070422535211
difference	4.8436264822134385
string_to_complex	4.842183255124723
pegs	4.840740740740741
mz	4.8392989385336955
# from urllib.parse import urljoin	4.837857847976308
has_ts	4.836417468541821
Primes	4.834977799703996
book_pos	4.8335388409371145
studens	4.832100591715976
shelf	4.830663051515899
rotateX	4.829226219812716
rotateY	4.827790096082779
rotateZ	4.8263546798029555
# forward - forward	4.824919970450628
exch2	4.823485967503693
# forward - reverse	4.822052670440561
exch3	4.820620078740157
# reverse - forward	4.819188191881919
# 始点を半径0のバリアとみなす	4.817757009345795
# 終点を半径0のバリアとみなす	4.816326530612245
# Graph[i][j] = バリア i からバリア j までの'距離'	4.814896755162242
# ダイクストラ法	4.813467682477267
# dist[i] = バリア N からバリア i への最短'距離'	4.812039312039312
### 約数列挙	4.810611643330877
data_pc	4.80918467583497
data_tap	4.8077584090351095
count_tap	4.806332842415316
# print(now_num)	4.8049079754601225
delete_list	4.803483807654564
bin_data	4.802060338484179
# A - 1D Matching	4.800637567435017
calculate_cables_length	4.799215493993626
# sort A, B and the lines between A, B shouldn't cross	4.797794117647059
# cross <-> not min distance	4.796373437882872
# cf16-exhibition-final-openB - Inscribed Bicycle	4.794953454189123
# petrが、Pをx、Qを1-xで選ぶとする。	4.793534166054372
scipy	4.7921155729676785
optimize	4.790697674418604
disp	4.78928046989721
xtol	4.787863958894055
nonzero	4.7864481409001955
right_node	4.78503301540719
# L：左に曲がるインデックス集合	4.78361858190709
# R：右に曲がるインデックスのヒープ	4.782204839892447
n3	4.780791788856305
n4	4.779379428292207
#problem3	4.777967757694187
#入力は2**N個からなる	4.7765567765567765
10801	4.775146484375
# 右端ごとの最高得点を管理。まずは 1 回目。	4.773736880644374
is_empty	4.772327964860907
# 偶奇をあわせて寄せていくだけ	4.770919736521103
INFL	4.769512195121951
# O(M log B)	4.768105340160936
chds	4.766699171136032
# 10^keta の位を n にできるか	4.765293687545698
# 1～n番目の問題を全部解いた時の点数が初めてN点以上になるnを求める	4.763888888888889
# 後は間を抜いて、ジャストN点になるよう調整していく	4.762484774665043
# 1-indexで扱うので0番目は使わない	4.7610813443740865
# 2周分	4.7596785975164355
drop	4.758276533592989
train	4.756875152105135
#dp[i][j][k]=カードのi番目までからjこまでを取ってxorの値をkにする方法	4.755474452554744
#dp[i][j]=="inf" (i<jの時)	4.754074434444174
# (始点、三角形)の組に対して、3K番目を求めればよい	4.752675097276264
# 答 < x である。	4.7512764405543395
# area = 2sin(a)sin(b)sin(c) < x となるものの個数	4.749878463782207
# sin(b)sin(c) > x / 2sA	4.748481166464155
# cos((b-c)theta) + cos(a theta) > x/sA	4.747084548104956
arccos	4.7456886082098615
isnan	4.744293346284604
# FileName: 	A_fix	4.742898761835397
# CreatedDate:  2020-09-27 15:12:42 +0900	4.741504854368932
# LastModified: 2020-09-27 15:23:26 +0900	4.74011162339238
Possible_or_Impossible	4.738719068413392
cumprod_mod	4.7373271889400925
# x^n = a+bx mod 1-3x+x^2	4.735935984481086
get_min	4.734545454545454
#dp[j][t]	4.733155598642753
digit_sum	4.731766416283015
get_move	4.730377906976744
Rollinhash	4.728990070234924
2009	4.727602905569007
subprocess	4.726216412490922
inv_dict	4.7248305905130685
communicate	4.7234454391483185
t_inv	4.722060957910014
choose_increasing	4.720677146311971
# キャンディーとN人の子供	4.719294003868472
ans_dp	4.7179115300942716
maxval	4.716529724504592
# dp[i] = P(i heads coins)	4.715148586615125
#print(*dp,sep="\n")	4.713768115942029
#print(accA)	4.712388312001932
edu_dp_d_matching	4.7110091743119265
nokids	4.709630702389573
mult	4.708252895752896
#base 1 indexing	4.706875753920386
curr	4.705499276410999
20001	4.704123462744152
tami	4.70274831243973
dij	4.701373825018076
single	4.7
bipartite	4.69862683690677
not_bipartite	4.697254335260116
merge_delay_pattern	4.6958824945822295
len1	4.694511314395763
head1	4.693140794223827
#a=list(input())	4.69177093358999
#a=list(map(int,input().split()))	4.690401732018282
#b=list(map(int,input().split()))	4.689033189033189
#ab=[list(map(int,input().split())) for _ in range(n)]	4.687665304159654
#n,k,q=map(int,input().split())	4.686298076923077
# i行目に何個黒があるか	4.684931506849315
black_cnt	4.683565593464681
# i列目に黒が一つでもあればTrue	4.68220033629594
exist	4.680835734870317
# doc: git.io/vy4co	4.679471788715486
# https://atcoder.jp/contests/arc069/tasks/arc069_b	4.6781084973595775
# 両方試すかな？ (1が羊(0)のとき，1が狼(1)のとき)	4.676745860331174
# print(ans)	4.675383877159309
#from collections import deque,defaultdict	4.674022547373471
printn	4.672661870503597
# and False	4.671301846080077
BIG	4.669942473633749
#R = 998244353	4.668583752695902
ddprint	4.667225682798275
SCC	4.665868263473054
Bob	4.664511494252873
Draw	4.663155374670817
matched_lines	4.661799904260412
OneStrokePath	4.660445082555635
# 0:高橋君の番、1:青木君の番	4.659090909090909
# 奇数の要素の個数	4.6577373834011
100000000	4.656384505021521
parse_data	4.655032273487928
fav_pattern	4.65368068833652
loads	4.652329749103942
1e9	4.650979455327281
# nが奇数/偶数の場合で分ける	4.649629806544065
# 0 が１人つ残りは、2,4,6... が2人ずついるはず	4.6482808022922635
vowel	4.646932442110288
consonant	4.645584725536993
remaerd	4.644237652111668
resare	4.642891221374046
dreamer	4.641545432864298
eraser	4.640200286123033
dream	4.6388557806913
# debug = lambda *a, **kw: print(*a, **kw, file=sys.stderr)	4.637511916110581
#the number of nodes is 2n-1	4.636168691922802
Access	4.634826107670319
#[l, r)	4.633484162895928
EQUAL	4.632142857142857
GREATER	4.630802189954773
LESS	4.629462160875773
#pa(mc)	4.628122769450393
#b , c = tin()	4.626784015223596
# YouTubeの通り	4.625445897740785
qn	4.624108416547789
qi	4.622771571190873
# pos[i]...dd[i]の移動前の位置	4.62143536121673
# print(pos)	4.620099786172488
# bb[i]...dd[i]の移動前にこの距離以上の位置にいればゴールに届かないという境目	4.618764845605701
###	4.6174305390643555
# 開始時点で、(時計回りの蟻の数)-(半時計まわりの蟻)	4.616096866096866
set_mod	4.6147638262520765
type	4.61343141907926
IndexError	4.612099644128114
you must specific row and column	4.610768500948766
solve_naive	4.609437989091772
# 整数 1 つ	4.608108108108108
# 整数複数個	4.606778857549182
# 整数 N 個 (改行区切り)	4.605450236966824
# 整数 N 個 (スペース区切り)	4.604122245913291
# N = list(map(int, input().split()))	4.60279488394126
# 整数 (縦 H 横 W の行列)	4.601468150603836
# A = [list(map(int, input().split())) for i in range(H)]	4.600142045454546
Score	4.598816568047337
cumsum2	4.597491717936583
# v: h*wの2次元リスト	4.596167494677076
#Ai += x O(logN)	4.59484389782403
# Failed to predict input format	4.593520926933081
#縦3分割	4.592198581560283
#横3分割	4.590876861262113
#縦1横２分割	4.589555765595463
# print(leftlis)	4.588235294117647
# print(rightlis)	4.586915446386396
# (i, j, k+1)に置くのが、条件(l,x)に適しているか	4.585596221959858
# dp[i][j][k] (k <= j <= i) 	4.584277620396601
# 三色それぞれ、最後に使ったindex(1-indexed)がi,j,k	4.582959641255606
#!/usr/local/bin/python3	4.581642284096271
# https://atcoder.jp/contests/agc014/tasks/agc014_a	4.580325548478415
dst	4.5790094339622645
getcircle	4.577693940108465
#針にぶつかる範囲の円	4.576379066478077
crosscircle	4.575064812632571
#円の交点	4.573751178133836
solvM	4.572438162544169
lv	4.571125765426284
RS	4.569813986343301
dfs0	4.568502824858757
mod2	4.567192280536597
=+-*()01	4.565882352941176
failed	4.564573041637262
intersection01	4.563264346190028
CD	4.56195626616506
BD	4.56064880112835
CA	4.559341950646298
level	4.558035714285714
add_multi_edge	4.5567300916138125
cap2	4.555425082198215
edge1	4.55412068560695
# 残り M 秒あるとする。	4.552816901408451
# dp1：人数	4.551513729171556
# dp2：生産開始時刻の総和	4.550211168465509
newdp1	4.548909218859958
ones_like	4.5476078799249535
newdp2	4.546307151230949
zeros_like	4.5450070323488045
# 反転で同心円に帰着する	4.543707522849777
# 複比	4.54240862230553
# 内側の円が1, 外側の円が半径Rであるような同心円に帰着	4.541110330288124
num_S	4.539812646370024
# リセット	4.538515570124093
# E2 において、y-rooted tree とみて、depth,par を計算	4.537219101123595
# x の必勝頂点を判定するのに必要	4.535923238942195
#from itertools import permutations,combinations	4.534627983153954
input.py	4.533333333333333
output.py	4.5320392890551915
get_array	4.530745849894786
get_ints	4.52945301542777
#return a,b	4.528160785230194
get_3_ints	4.526869158878505
sod	4.525578135949544
isPrime	4.5242877160205515
# 0未満になる要素があるか判定	4.522997898669157
check1	4.521708683473389
len(d	4.520420070011669
.popleft()	4.51913205786281
# 黒マス1個が影響を与える3x3領域の数は9個	4.517844646606018
# 黒マスごとに周りの各3x3に対して黒マス数をインクリメントすればよい	4.516557835820896
T0	4.515271625087433
T1	4.513986013986014
pr6	4.512701002097413
.X	4.5114165890027955
<v>^	4.510132774283718
carmichael	4.508849557522124
# x = A + 1	4.507566938300349
# while True:	4.506284916201118
# 	if x*x <= n:	4.50500349080754
# 		if n//x < B:	4.503722661703118
# 			ans += 1	4.5024424284717375
# 		x += 1	4.501162790697674
# 	else:	4.4998837479655895
# 		return ans + min(n//x,B-1)	4.49860529986053
slv	4.4973274459679295
# どれだけの要素を0にできるか。	4.496050185873606
# 0にできない要素の和を最小化する。	4.494773519163763
# a<=bとなっているところは0にできる	4.493497445424988
# ナップザック問題？	4.492221964244253
# allすべて同じ文字	4.490947075208914
# any連続が存在すると0	4.489672777906707
30001	4.4883990719257545
ijk	4.487125956854558
ans092	4.485853432282004
#sys.setrecursionlimit(10**9)	4.484581497797357
#from functools import lru_cache	4.483310152990264
RD	4.4820393974507535
FI	4.480769230769231
MF	4.479499652536484
# rstrip().decode()	4.478230662343678
# 各桁の xor を考える	4.476962259782357
# 2**(i-1) の位	4.475694444444445
# [2**(i-1)-x,2*2**(i-1)-x),[3*2**(i-1)-x,4*2**(i-1)-x) にある Y の要素の個数を数え上げる	4.4744272159222405
# 尺取り法	4.473160573808422
OrderedDict	4.471894517696044
# x座標でソート 青点基準で考える	4.470629047178538
# 青点は、自分よりx座標が小さい赤点の中でy座標が最大のものをとればよい	4.469364161849711
insort_right	4.468099861303744
#func(リスト,値)	4.466836145135198
1.0e-20	4.465573012939002
lint	4.464310464310464
ilint	4.463048498845265
lprint	4.46178711613946
# ブロック数	4.4605263157894735
# x番目のブロック(0-indexed)	4.459266097392107
# x*a+y+1個目の要素(1-indexed)	4.4580064605445315
float	3.0581395348837077
K	2.7058823529411598
(	0.0
