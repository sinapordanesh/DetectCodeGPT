#!/usr/bin/env python3
from math import sqrt
# ??????
def cross(P0, P1, P2):
    x0, y0 = P0; x1, y1 = P1; x2, y2 = P2
    x1 -= x0; x2 -= x0
    y1 -= y0; y2 -= y0
    return x1*y2 - x2*y1
# ??????
def dot(P0, P1, P2):
    x0, y0 = P0; x1, y1 = P1; x2, y2 = P2
    x1 -= x0; x2 -= x0
    y1 -= y0; y2 -= y0
    return x1*x2 + y1*y2
# 2??????????????¢?????????
def dist2(P0, P1):
    x0, y0 = P0; x1, y1 = P1
    return (x1 - x0)**2 + (y1 - y0)**2
# ????????????????????????
def collision(S0, S1, T0, T1):
    return cross(S0, S1, T0)*cross(S0, S1, T1) < 0 and cross(T0, T1, S0) * cross(T0, T1, S1) < 0
# ????????¨?????????????????¢
def dist_lp(S, E, P):
    dd = dist2(S, E)
    # ???????????????P?????????????????????????¢???? => 0<=sqrt(dist(S, P))*cos??<=sqrt(dist(S, E))
    if 0 <= dot(S, E, P) <= dd:
        # ???????????°???????????????????????????????°? => sqrt(dist(S, P))*sin??
        return abs(cross(S, E, P))/sqrt(dd)
    # ?????????????????°???S??¨E???????????????????????????????????¢???????°?
    return sqrt(min(dist2(S, P), dist2(E, P)))
# ????????¨????????????????????¢
def dist_ll(S0, S1, T0, T1):
    if collision(S0, S1, T0, T1):
        return 0
    return min(
            dist_lp(S0, S1, T0),
            dist_lp(S0, S1, T1),
            dist_lp(T0, T1, S0),
            dist_lp(T0, T1, S1)
            )
# ????§???¢?????¨??????????????????
def contain(PS, A):
    l = len(PS)
    base = cross(PS[-1], PS[0], A)
    for i in range(l-1):
        P0 = PS[i]; P1 = PS[i+1]
        if base * cross(PS[i], PS[i+1], A) < 0:
            return 0
    return 1

c = 0
while 1:
    c += 1
    n = int(input())
    if n == 0:
        break
    sx, sy, ex, ey = map(int, input().split())
    S = sx, sy; E = ex, ey
    cannot = 0
    ans = 10**9
    for i in range(n):
        minx, miny, maxx, maxy, h = map(int, input().split())
        PS = ((minx, miny), (minx, maxy), (maxx, maxy), (maxx, miny))
        cannot |= contain(PS, S) or contain(PS, E)
        for j in range(4):
            cannot |= collision(PS[j-1], PS[j], S, E)
            d = dist_ll(S, E, PS[j-1], PS[j])
            ans = min(ans, (h**2+d**2)/(2*h) if h <= d else d)
    if cannot:
        print(0)
    else:
        print("%.08f" % ans)