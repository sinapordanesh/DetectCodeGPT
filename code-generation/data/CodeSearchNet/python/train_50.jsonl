{"repo": "ageitgey/face_recognition", "path": "examples/face_recognition_knn.py", "func_name": "train", "original_string": "def train(train_dir, model_save_path=None, n_neighbors=None, knn_algo='ball_tree', verbose=False):\n    \"\"\"\n    Trains a k-nearest neighbors classifier for face recognition.\n\n    :param train_dir: directory that contains a sub-directory for each known person, with its name.\n\n     (View in source code to see train_dir example tree structure)\n\n     Structure:\n        <train_dir>/\n        \u251c\u2500\u2500 <person1>/\n        \u2502   \u251c\u2500\u2500 <somename1>.jpeg\n        \u2502   \u251c\u2500\u2500 <somename2>.jpeg\n        \u2502   \u251c\u2500\u2500 ...\n        \u251c\u2500\u2500 <person2>/\n        \u2502   \u251c\u2500\u2500 <somename1>.jpeg\n        \u2502   \u2514\u2500\u2500 <somename2>.jpeg\n        \u2514\u2500\u2500 ...\n\n    :param model_save_path: (optional) path to save model on disk\n    :param n_neighbors: (optional) number of neighbors to weigh in classification. Chosen automatically if not specified\n    :param knn_algo: (optional) underlying data structure to support knn.default is ball_tree\n    :param verbose: verbosity of training\n    :return: returns knn classifier that was trained on the given data.\n    \"\"\"\n    X = []\n    y = []\n\n    # Loop through each person in the training set\n    for class_dir in os.listdir(train_dir):\n        if not os.path.isdir(os.path.join(train_dir, class_dir)):\n            continue\n\n        # Loop through each training image for the current person\n        for img_path in image_files_in_folder(os.path.join(train_dir, class_dir)):\n            image = face_recognition.load_image_file(img_path)\n            face_bounding_boxes = face_recognition.face_locations(image)\n\n            if len(face_bounding_boxes) != 1:\n                # If there are no people (or too many people) in a training image, skip the image.\n                if verbose:\n                    print(\"Image {} not suitable for training: {}\".format(img_path, \"Didn't find a face\" if len(face_bounding_boxes) < 1 else \"Found more than one face\"))\n            else:\n                # Add face encoding for current image to the training set\n                X.append(face_recognition.face_encodings(image, known_face_locations=face_bounding_boxes)[0])\n                y.append(class_dir)\n\n    # Determine how many neighbors to use for weighting in the KNN classifier\n    if n_neighbors is None:\n        n_neighbors = int(round(math.sqrt(len(X))))\n        if verbose:\n            print(\"Chose n_neighbors automatically:\", n_neighbors)\n\n    # Create and train the KNN classifier\n    knn_clf = neighbors.KNeighborsClassifier(n_neighbors=n_neighbors, algorithm=knn_algo, weights='distance')\n    knn_clf.fit(X, y)\n\n    # Save the trained KNN classifier\n    if model_save_path is not None:\n        with open(model_save_path, 'wb') as f:\n            pickle.dump(knn_clf, f)\n\n    return knn_clf", "language": "python", "code": "def train(train_dir, model_save_path=None, n_neighbors=None, knn_algo='ball_tree', verbose=False):\n    \"\"\"\n    Trains a k-nearest neighbors classifier for face recognition.\n\n    :param train_dir: directory that contains a sub-directory for each known person, with its name.\n\n     (View in source code to see train_dir example tree structure)\n\n     Structure:\n        <train_dir>/\n        \u251c\u2500\u2500 <person1>/\n        \u2502   \u251c\u2500\u2500 <somename1>.jpeg\n        \u2502   \u251c\u2500\u2500 <somename2>.jpeg\n        \u2502   \u251c\u2500\u2500 ...\n        \u251c\u2500\u2500 <person2>/\n        \u2502   \u251c\u2500\u2500 <somename1>.jpeg\n        \u2502   \u2514\u2500\u2500 <somename2>.jpeg\n        \u2514\u2500\u2500 ...\n\n    :param model_save_path: (optional) path to save model on disk\n    :param n_neighbors: (optional) number of neighbors to weigh in classification. Chosen automatically if not specified\n    :param knn_algo: (optional) underlying data structure to support knn.default is ball_tree\n    :param verbose: verbosity of training\n    :return: returns knn classifier that was trained on the given data.\n    \"\"\"\n    X = []\n    y = []\n\n    # Loop through each person in the training set\n    for class_dir in os.listdir(train_dir):\n        if not os.path.isdir(os.path.join(train_dir, class_dir)):\n            continue\n\n        # Loop through each training image for the current person\n        for img_path in image_files_in_folder(os.path.join(train_dir, class_dir)):\n            image = face_recognition.load_image_file(img_path)\n            face_bounding_boxes = face_recognition.face_locations(image)\n\n            if len(face_bounding_boxes) != 1:\n                # If there are no people (or too many people) in a training image, skip the image.\n                if verbose:\n                    print(\"Image {} not suitable for training: {}\".format(img_path, \"Didn't find a face\" if len(face_bounding_boxes) < 1 else \"Found more than one face\"))\n            else:\n                # Add face encoding for current image to the training set\n                X.append(face_recognition.face_encodings(image, known_face_locations=face_bounding_boxes)[0])\n                y.append(class_dir)\n\n    # Determine how many neighbors to use for weighting in the KNN classifier\n    if n_neighbors is None:\n        n_neighbors = int(round(math.sqrt(len(X))))\n        if verbose:\n            print(\"Chose n_neighbors automatically:\", n_neighbors)\n\n    # Create and train the KNN classifier\n    knn_clf = neighbors.KNeighborsClassifier(n_neighbors=n_neighbors, algorithm=knn_algo, weights='distance')\n    knn_clf.fit(X, y)\n\n    # Save the trained KNN classifier\n    if model_save_path is not None:\n        with open(model_save_path, 'wb') as f:\n            pickle.dump(knn_clf, f)\n\n    return knn_clf", "code_tokens": ["def", "train", "(", "train_dir", ",", "model_save_path", "=", "None", ",", "n_neighbors", "=", "None", ",", "knn_algo", "=", "'ball_tree'", ",", "verbose", "=", "False", ")", ":", "X", "=", "[", "]", "y", "=", "[", "]", "# Loop through each person in the training set", "for", "class_dir", "in", "os", ".", "listdir", "(", "train_dir", ")", ":", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "train_dir", ",", "class_dir", ")", ")", ":", "continue", "# Loop through each training image for the current person", "for", "img_path", "in", "image_files_in_folder", "(", "os", ".", "path", ".", "join", "(", "train_dir", ",", "class_dir", ")", ")", ":", "image", "=", "face_recognition", ".", "load_image_file", "(", "img_path", ")", "face_bounding_boxes", "=", "face_recognition", ".", "face_locations", "(", "image", ")", "if", "len", "(", "face_bounding_boxes", ")", "!=", "1", ":", "# If there are no people (or too many people) in a training image, skip the image.", "if", "verbose", ":", "print", "(", "\"Image {} not suitable for training: {}\"", ".", "format", "(", "img_path", ",", "\"Didn't find a face\"", "if", "len", "(", "face_bounding_boxes", ")", "<", "1", "else", "\"Found more than one face\"", ")", ")", "else", ":", "# Add face encoding for current image to the training set", "X", ".", "append", "(", "face_recognition", ".", "face_encodings", "(", "image", ",", "known_face_locations", "=", "face_bounding_boxes", ")", "[", "0", "]", ")", "y", ".", "append", "(", "class_dir", ")", "# Determine how many neighbors to use for weighting in the KNN classifier", "if", "n_neighbors", "is", "None", ":", "n_neighbors", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "len", "(", "X", ")", ")", ")", ")", "if", "verbose", ":", "print", "(", "\"Chose n_neighbors automatically:\"", ",", "n_neighbors", ")", "# Create and train the KNN classifier", "knn_clf", "=", "neighbors", ".", "KNeighborsClassifier", "(", "n_neighbors", "=", "n_neighbors", ",", "algorithm", "=", "knn_algo", ",", "weights", "=", "'distance'", ")", "knn_clf", ".", "fit", "(", "X", ",", "y", ")", "# Save the trained KNN classifier", "if", "model_save_path", "is", "not", "None", ":", "with", "open", "(", "model_save_path", ",", "'wb'", ")", "as", "f", ":", "pickle", ".", "dump", "(", "knn_clf", ",", "f", ")", "return", "knn_clf"], "docstring": "Trains a k-nearest neighbors classifier for face recognition.\n\n    :param train_dir: directory that contains a sub-directory for each known person, with its name.\n\n     (View in source code to see train_dir example tree structure)\n\n     Structure:\n        <train_dir>/\n        \u251c\u2500\u2500 <person1>/\n        \u2502   \u251c\u2500\u2500 <somename1>.jpeg\n        \u2502   \u251c\u2500\u2500 <somename2>.jpeg\n        \u2502   \u251c\u2500\u2500 ...\n        \u251c\u2500\u2500 <person2>/\n        \u2502   \u251c\u2500\u2500 <somename1>.jpeg\n        \u2502   \u2514\u2500\u2500 <somename2>.jpeg\n        \u2514\u2500\u2500 ...\n\n    :param model_save_path: (optional) path to save model on disk\n    :param n_neighbors: (optional) number of neighbors to weigh in classification. Chosen automatically if not specified\n    :param knn_algo: (optional) underlying data structure to support knn.default is ball_tree\n    :param verbose: verbosity of training\n    :return: returns knn classifier that was trained on the given data.", "docstring_tokens": ["Trains", "a", "k", "-", "nearest", "neighbors", "classifier", "for", "face", "recognition", "."], "sha": "c96b010c02f15e8eeb0f71308c641179ac1f19bb", "url": "https://github.com/ageitgey/face_recognition/blob/c96b010c02f15e8eeb0f71308c641179ac1f19bb/examples/face_recognition_knn.py#L46-L108", "partition": "train"}
{"repo": "ageitgey/face_recognition", "path": "examples/face_recognition_knn.py", "func_name": "predict", "original_string": "def predict(X_img_path, knn_clf=None, model_path=None, distance_threshold=0.6):\n    \"\"\"\n    Recognizes faces in given image using a trained KNN classifier\n\n    :param X_img_path: path to image to be recognized\n    :param knn_clf: (optional) a knn classifier object. if not specified, model_save_path must be specified.\n    :param model_path: (optional) path to a pickled knn classifier. if not specified, model_save_path must be knn_clf.\n    :param distance_threshold: (optional) distance threshold for face classification. the larger it is, the more chance\n           of mis-classifying an unknown person as a known one.\n    :return: a list of names and face locations for the recognized faces in the image: [(name, bounding box), ...].\n        For faces of unrecognized persons, the name 'unknown' will be returned.\n    \"\"\"\n    if not os.path.isfile(X_img_path) or os.path.splitext(X_img_path)[1][1:] not in ALLOWED_EXTENSIONS:\n        raise Exception(\"Invalid image path: {}\".format(X_img_path))\n\n    if knn_clf is None and model_path is None:\n        raise Exception(\"Must supply knn classifier either thourgh knn_clf or model_path\")\n\n    # Load a trained KNN model (if one was passed in)\n    if knn_clf is None:\n        with open(model_path, 'rb') as f:\n            knn_clf = pickle.load(f)\n\n    # Load image file and find face locations\n    X_img = face_recognition.load_image_file(X_img_path)\n    X_face_locations = face_recognition.face_locations(X_img)\n\n    # If no faces are found in the image, return an empty result.\n    if len(X_face_locations) == 0:\n        return []\n\n    # Find encodings for faces in the test iamge\n    faces_encodings = face_recognition.face_encodings(X_img, known_face_locations=X_face_locations)\n\n    # Use the KNN model to find the best matches for the test face\n    closest_distances = knn_clf.kneighbors(faces_encodings, n_neighbors=1)\n    are_matches = [closest_distances[0][i][0] <= distance_threshold for i in range(len(X_face_locations))]\n\n    # Predict classes and remove classifications that aren't within the threshold\n    return [(pred, loc) if rec else (\"unknown\", loc) for pred, loc, rec in zip(knn_clf.predict(faces_encodings), X_face_locations, are_matches)]", "language": "python", "code": "def predict(X_img_path, knn_clf=None, model_path=None, distance_threshold=0.6):\n    \"\"\"\n    Recognizes faces in given image using a trained KNN classifier\n\n    :param X_img_path: path to image to be recognized\n    :param knn_clf: (optional) a knn classifier object. if not specified, model_save_path must be specified.\n    :param model_path: (optional) path to a pickled knn classifier. if not specified, model_save_path must be knn_clf.\n    :param distance_threshold: (optional) distance threshold for face classification. the larger it is, the more chance\n           of mis-classifying an unknown person as a known one.\n    :return: a list of names and face locations for the recognized faces in the image: [(name, bounding box), ...].\n        For faces of unrecognized persons, the name 'unknown' will be returned.\n    \"\"\"\n    if not os.path.isfile(X_img_path) or os.path.splitext(X_img_path)[1][1:] not in ALLOWED_EXTENSIONS:\n        raise Exception(\"Invalid image path: {}\".format(X_img_path))\n\n    if knn_clf is None and model_path is None:\n        raise Exception(\"Must supply knn classifier either thourgh knn_clf or model_path\")\n\n    # Load a trained KNN model (if one was passed in)\n    if knn_clf is None:\n        with open(model_path, 'rb') as f:\n            knn_clf = pickle.load(f)\n\n    # Load image file and find face locations\n    X_img = face_recognition.load_image_file(X_img_path)\n    X_face_locations = face_recognition.face_locations(X_img)\n\n    # If no faces are found in the image, return an empty result.\n    if len(X_face_locations) == 0:\n        return []\n\n    # Find encodings for faces in the test iamge\n    faces_encodings = face_recognition.face_encodings(X_img, known_face_locations=X_face_locations)\n\n    # Use the KNN model to find the best matches for the test face\n    closest_distances = knn_clf.kneighbors(faces_encodings, n_neighbors=1)\n    are_matches = [closest_distances[0][i][0] <= distance_threshold for i in range(len(X_face_locations))]\n\n    # Predict classes and remove classifications that aren't within the threshold\n    return [(pred, loc) if rec else (\"unknown\", loc) for pred, loc, rec in zip(knn_clf.predict(faces_encodings), X_face_locations, are_matches)]", "code_tokens": ["def", "predict", "(", "X_img_path", ",", "knn_clf", "=", "None", ",", "model_path", "=", "None", ",", "distance_threshold", "=", "0.6", ")", ":", "if", "not", "os", ".", "path", ".", "isfile", "(", "X_img_path", ")", "or", "os", ".", "path", ".", "splitext", "(", "X_img_path", ")", "[", "1", "]", "[", "1", ":", "]", "not", "in", "ALLOWED_EXTENSIONS", ":", "raise", "Exception", "(", "\"Invalid image path: {}\"", ".", "format", "(", "X_img_path", ")", ")", "if", "knn_clf", "is", "None", "and", "model_path", "is", "None", ":", "raise", "Exception", "(", "\"Must supply knn classifier either thourgh knn_clf or model_path\"", ")", "# Load a trained KNN model (if one was passed in)", "if", "knn_clf", "is", "None", ":", "with", "open", "(", "model_path", ",", "'rb'", ")", "as", "f", ":", "knn_clf", "=", "pickle", ".", "load", "(", "f", ")", "# Load image file and find face locations", "X_img", "=", "face_recognition", ".", "load_image_file", "(", "X_img_path", ")", "X_face_locations", "=", "face_recognition", ".", "face_locations", "(", "X_img", ")", "# If no faces are found in the image, return an empty result.", "if", "len", "(", "X_face_locations", ")", "==", "0", ":", "return", "[", "]", "# Find encodings for faces in the test iamge", "faces_encodings", "=", "face_recognition", ".", "face_encodings", "(", "X_img", ",", "known_face_locations", "=", "X_face_locations", ")", "# Use the KNN model to find the best matches for the test face", "closest_distances", "=", "knn_clf", ".", "kneighbors", "(", "faces_encodings", ",", "n_neighbors", "=", "1", ")", "are_matches", "=", "[", "closest_distances", "[", "0", "]", "[", "i", "]", "[", "0", "]", "<=", "distance_threshold", "for", "i", "in", "range", "(", "len", "(", "X_face_locations", ")", ")", "]", "# Predict classes and remove classifications that aren't within the threshold", "return", "[", "(", "pred", ",", "loc", ")", "if", "rec", "else", "(", "\"unknown\"", ",", "loc", ")", "for", "pred", ",", "loc", ",", "rec", "in", "zip", "(", "knn_clf", ".", "predict", "(", "faces_encodings", ")", ",", "X_face_locations", ",", "are_matches", ")", "]"], "docstring": "Recognizes faces in given image using a trained KNN classifier\n\n    :param X_img_path: path to image to be recognized\n    :param knn_clf: (optional) a knn classifier object. if not specified, model_save_path must be specified.\n    :param model_path: (optional) path to a pickled knn classifier. if not specified, model_save_path must be knn_clf.\n    :param distance_threshold: (optional) distance threshold for face classification. the larger it is, the more chance\n           of mis-classifying an unknown person as a known one.\n    :return: a list of names and face locations for the recognized faces in the image: [(name, bounding box), ...].\n        For faces of unrecognized persons, the name 'unknown' will be returned.", "docstring_tokens": ["Recognizes", "faces", "in", "given", "image", "using", "a", "trained", "KNN", "classifier"], "sha": "c96b010c02f15e8eeb0f71308c641179ac1f19bb", "url": "https://github.com/ageitgey/face_recognition/blob/c96b010c02f15e8eeb0f71308c641179ac1f19bb/examples/face_recognition_knn.py#L111-L150", "partition": "train"}
{"repo": "ageitgey/face_recognition", "path": "examples/face_recognition_knn.py", "func_name": "show_prediction_labels_on_image", "original_string": "def show_prediction_labels_on_image(img_path, predictions):\n    \"\"\"\n    Shows the face recognition results visually.\n\n    :param img_path: path to image to be recognized\n    :param predictions: results of the predict function\n    :return:\n    \"\"\"\n    pil_image = Image.open(img_path).convert(\"RGB\")\n    draw = ImageDraw.Draw(pil_image)\n\n    for name, (top, right, bottom, left) in predictions:\n        # Draw a box around the face using the Pillow module\n        draw.rectangle(((left, top), (right, bottom)), outline=(0, 0, 255))\n\n        # There's a bug in Pillow where it blows up with non-UTF-8 text\n        # when using the default bitmap font\n        name = name.encode(\"UTF-8\")\n\n        # Draw a label with a name below the face\n        text_width, text_height = draw.textsize(name)\n        draw.rectangle(((left, bottom - text_height - 10), (right, bottom)), fill=(0, 0, 255), outline=(0, 0, 255))\n        draw.text((left + 6, bottom - text_height - 5), name, fill=(255, 255, 255, 255))\n\n    # Remove the drawing library from memory as per the Pillow docs\n    del draw\n\n    # Display the resulting image\n    pil_image.show()", "language": "python", "code": "def show_prediction_labels_on_image(img_path, predictions):\n    \"\"\"\n    Shows the face recognition results visually.\n\n    :param img_path: path to image to be recognized\n    :param predictions: results of the predict function\n    :return:\n    \"\"\"\n    pil_image = Image.open(img_path).convert(\"RGB\")\n    draw = ImageDraw.Draw(pil_image)\n\n    for name, (top, right, bottom, left) in predictions:\n        # Draw a box around the face using the Pillow module\n        draw.rectangle(((left, top), (right, bottom)), outline=(0, 0, 255))\n\n        # There's a bug in Pillow where it blows up with non-UTF-8 text\n        # when using the default bitmap font\n        name = name.encode(\"UTF-8\")\n\n        # Draw a label with a name below the face\n        text_width, text_height = draw.textsize(name)\n        draw.rectangle(((left, bottom - text_height - 10), (right, bottom)), fill=(0, 0, 255), outline=(0, 0, 255))\n        draw.text((left + 6, bottom - text_height - 5), name, fill=(255, 255, 255, 255))\n\n    # Remove the drawing library from memory as per the Pillow docs\n    del draw\n\n    # Display the resulting image\n    pil_image.show()", "code_tokens": ["def", "show_prediction_labels_on_image", "(", "img_path", ",", "predictions", ")", ":", "pil_image", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "\"RGB\"", ")", "draw", "=", "ImageDraw", ".", "Draw", "(", "pil_image", ")", "for", "name", ",", "(", "top", ",", "right", ",", "bottom", ",", "left", ")", "in", "predictions", ":", "# Draw a box around the face using the Pillow module", "draw", ".", "rectangle", "(", "(", "(", "left", ",", "top", ")", ",", "(", "right", ",", "bottom", ")", ")", ",", "outline", "=", "(", "0", ",", "0", ",", "255", ")", ")", "# There's a bug in Pillow where it blows up with non-UTF-8 text", "# when using the default bitmap font", "name", "=", "name", ".", "encode", "(", "\"UTF-8\"", ")", "# Draw a label with a name below the face", "text_width", ",", "text_height", "=", "draw", ".", "textsize", "(", "name", ")", "draw", ".", "rectangle", "(", "(", "(", "left", ",", "bottom", "-", "text_height", "-", "10", ")", ",", "(", "right", ",", "bottom", ")", ")", ",", "fill", "=", "(", "0", ",", "0", ",", "255", ")", ",", "outline", "=", "(", "0", ",", "0", ",", "255", ")", ")", "draw", ".", "text", "(", "(", "left", "+", "6", ",", "bottom", "-", "text_height", "-", "5", ")", ",", "name", ",", "fill", "=", "(", "255", ",", "255", ",", "255", ",", "255", ")", ")", "# Remove the drawing library from memory as per the Pillow docs", "del", "draw", "# Display the resulting image", "pil_image", ".", "show", "(", ")"], "docstring": "Shows the face recognition results visually.\n\n    :param img_path: path to image to be recognized\n    :param predictions: results of the predict function\n    :return:", "docstring_tokens": ["Shows", "the", "face", "recognition", "results", "visually", "."], "sha": "c96b010c02f15e8eeb0f71308c641179ac1f19bb", "url": "https://github.com/ageitgey/face_recognition/blob/c96b010c02f15e8eeb0f71308c641179ac1f19bb/examples/face_recognition_knn.py#L153-L181", "partition": "train"}
{"repo": "ageitgey/face_recognition", "path": "face_recognition/api.py", "func_name": "_rect_to_css", "original_string": "def _rect_to_css(rect):\n    \"\"\"\n    Convert a dlib 'rect' object to a plain tuple in (top, right, bottom, left) order\n\n    :param rect: a dlib 'rect' object\n    :return: a plain tuple representation of the rect in (top, right, bottom, left) order\n    \"\"\"\n    return rect.top(), rect.right(), rect.bottom(), rect.left()", "language": "python", "code": "def _rect_to_css(rect):\n    \"\"\"\n    Convert a dlib 'rect' object to a plain tuple in (top, right, bottom, left) order\n\n    :param rect: a dlib 'rect' object\n    :return: a plain tuple representation of the rect in (top, right, bottom, left) order\n    \"\"\"\n    return rect.top(), rect.right(), rect.bottom(), rect.left()", "code_tokens": ["def", "_rect_to_css", "(", "rect", ")", ":", "return", "rect", ".", "top", "(", ")", ",", "rect", ".", "right", "(", ")", ",", "rect", ".", "bottom", "(", ")", ",", "rect", ".", "left", "(", ")"], "docstring": "Convert a dlib 'rect' object to a plain tuple in (top, right, bottom, left) order\n\n    :param rect: a dlib 'rect' object\n    :return: a plain tuple representation of the rect in (top, right, bottom, left) order", "docstring_tokens": ["Convert", "a", "dlib", "rect", "object", "to", "a", "plain", "tuple", "in", "(", "top", "right", "bottom", "left", ")", "order"], "sha": "c96b010c02f15e8eeb0f71308c641179ac1f19bb", "url": "https://github.com/ageitgey/face_recognition/blob/c96b010c02f15e8eeb0f71308c641179ac1f19bb/face_recognition/api.py#L32-L39", "partition": "train"}
{"repo": "ageitgey/face_recognition", "path": "face_recognition/api.py", "func_name": "_trim_css_to_bounds", "original_string": "def _trim_css_to_bounds(css, image_shape):\n    \"\"\"\n    Make sure a tuple in (top, right, bottom, left) order is within the bounds of the image.\n\n    :param css:  plain tuple representation of the rect in (top, right, bottom, left) order\n    :param image_shape: numpy shape of the image array\n    :return: a trimmed plain tuple representation of the rect in (top, right, bottom, left) order\n    \"\"\"\n    return max(css[0], 0), min(css[1], image_shape[1]), min(css[2], image_shape[0]), max(css[3], 0)", "language": "python", "code": "def _trim_css_to_bounds(css, image_shape):\n    \"\"\"\n    Make sure a tuple in (top, right, bottom, left) order is within the bounds of the image.\n\n    :param css:  plain tuple representation of the rect in (top, right, bottom, left) order\n    :param image_shape: numpy shape of the image array\n    :return: a trimmed plain tuple representation of the rect in (top, right, bottom, left) order\n    \"\"\"\n    return max(css[0], 0), min(css[1], image_shape[1]), min(css[2], image_shape[0]), max(css[3], 0)", "code_tokens": ["def", "_trim_css_to_bounds", "(", "css", ",", "image_shape", ")", ":", "return", "max", "(", "css", "[", "0", "]", ",", "0", ")", ",", "min", "(", "css", "[", "1", "]", ",", "image_shape", "[", "1", "]", ")", ",", "min", "(", "css", "[", "2", "]", ",", "image_shape", "[", "0", "]", ")", ",", "max", "(", "css", "[", "3", "]", ",", "0", ")"], "docstring": "Make sure a tuple in (top, right, bottom, left) order is within the bounds of the image.\n\n    :param css:  plain tuple representation of the rect in (top, right, bottom, left) order\n    :param image_shape: numpy shape of the image array\n    :return: a trimmed plain tuple representation of the rect in (top, right, bottom, left) order", "docstring_tokens": ["Make", "sure", "a", "tuple", "in", "(", "top", "right", "bottom", "left", ")", "order", "is", "within", "the", "bounds", "of", "the", "image", "."], "sha": "c96b010c02f15e8eeb0f71308c641179ac1f19bb", "url": "https://github.com/ageitgey/face_recognition/blob/c96b010c02f15e8eeb0f71308c641179ac1f19bb/face_recognition/api.py#L52-L60", "partition": "train"}
{"repo": "ageitgey/face_recognition", "path": "face_recognition/api.py", "func_name": "face_distance", "original_string": "def face_distance(face_encodings, face_to_compare):\n    \"\"\"\n    Given a list of face encodings, compare them to a known face encoding and get a euclidean distance\n    for each comparison face. The distance tells you how similar the faces are.\n\n    :param faces: List of face encodings to compare\n    :param face_to_compare: A face encoding to compare against\n    :return: A numpy ndarray with the distance for each face in the same order as the 'faces' array\n    \"\"\"\n    if len(face_encodings) == 0:\n        return np.empty((0))\n\n    return np.linalg.norm(face_encodings - face_to_compare, axis=1)", "language": "python", "code": "def face_distance(face_encodings, face_to_compare):\n    \"\"\"\n    Given a list of face encodings, compare them to a known face encoding and get a euclidean distance\n    for each comparison face. The distance tells you how similar the faces are.\n\n    :param faces: List of face encodings to compare\n    :param face_to_compare: A face encoding to compare against\n    :return: A numpy ndarray with the distance for each face in the same order as the 'faces' array\n    \"\"\"\n    if len(face_encodings) == 0:\n        return np.empty((0))\n\n    return np.linalg.norm(face_encodings - face_to_compare, axis=1)", "code_tokens": ["def", "face_distance", "(", "face_encodings", ",", "face_to_compare", ")", ":", "if", "len", "(", "face_encodings", ")", "==", "0", ":", "return", "np", ".", "empty", "(", "(", "0", ")", ")", "return", "np", ".", "linalg", ".", "norm", "(", "face_encodings", "-", "face_to_compare", ",", "axis", "=", "1", ")"], "docstring": "Given a list of face encodings, compare them to a known face encoding and get a euclidean distance\n    for each comparison face. The distance tells you how similar the faces are.\n\n    :param faces: List of face encodings to compare\n    :param face_to_compare: A face encoding to compare against\n    :return: A numpy ndarray with the distance for each face in the same order as the 'faces' array", "docstring_tokens": ["Given", "a", "list", "of", "face", "encodings", "compare", "them", "to", "a", "known", "face", "encoding", "and", "get", "a", "euclidean", "distance", "for", "each", "comparison", "face", ".", "The", "distance", "tells", "you", "how", "similar", "the", "faces", "are", "."], "sha": "c96b010c02f15e8eeb0f71308c641179ac1f19bb", "url": "https://github.com/ageitgey/face_recognition/blob/c96b010c02f15e8eeb0f71308c641179ac1f19bb/face_recognition/api.py#L63-L75", "partition": "train"}
{"repo": "ageitgey/face_recognition", "path": "face_recognition/api.py", "func_name": "load_image_file", "original_string": "def load_image_file(file, mode='RGB'):\n    \"\"\"\n    Loads an image file (.jpg, .png, etc) into a numpy array\n\n    :param file: image file name or file object to load\n    :param mode: format to convert the image to. Only 'RGB' (8-bit RGB, 3 channels) and 'L' (black and white) are supported.\n    :return: image contents as numpy array\n    \"\"\"\n    im = PIL.Image.open(file)\n    if mode:\n        im = im.convert(mode)\n    return np.array(im)", "language": "python", "code": "def load_image_file(file, mode='RGB'):\n    \"\"\"\n    Loads an image file (.jpg, .png, etc) into a numpy array\n\n    :param file: image file name or file object to load\n    :param mode: format to convert the image to. Only 'RGB' (8-bit RGB, 3 channels) and 'L' (black and white) are supported.\n    :return: image contents as numpy array\n    \"\"\"\n    im = PIL.Image.open(file)\n    if mode:\n        im = im.convert(mode)\n    return np.array(im)", "code_tokens": ["def", "load_image_file", "(", "file", ",", "mode", "=", "'RGB'", ")", ":", "im", "=", "PIL", ".", "Image", ".", "open", "(", "file", ")", "if", "mode", ":", "im", "=", "im", ".", "convert", "(", "mode", ")", "return", "np", ".", "array", "(", "im", ")"], "docstring": "Loads an image file (.jpg, .png, etc) into a numpy array\n\n    :param file: image file name or file object to load\n    :param mode: format to convert the image to. Only 'RGB' (8-bit RGB, 3 channels) and 'L' (black and white) are supported.\n    :return: image contents as numpy array", "docstring_tokens": ["Loads", "an", "image", "file", "(", ".", "jpg", ".", "png", "etc", ")", "into", "a", "numpy", "array"], "sha": "c96b010c02f15e8eeb0f71308c641179ac1f19bb", "url": "https://github.com/ageitgey/face_recognition/blob/c96b010c02f15e8eeb0f71308c641179ac1f19bb/face_recognition/api.py#L78-L89", "partition": "train"}
{"repo": "ageitgey/face_recognition", "path": "face_recognition/api.py", "func_name": "_raw_face_locations", "original_string": "def _raw_face_locations(img, number_of_times_to_upsample=1, model=\"hog\"):\n    \"\"\"\n    Returns an array of bounding boxes of human faces in a image\n\n    :param img: An image (as a numpy array)\n    :param number_of_times_to_upsample: How many times to upsample the image looking for faces. Higher numbers find smaller faces.\n    :param model: Which face detection model to use. \"hog\" is less accurate but faster on CPUs. \"cnn\" is a more accurate\n                  deep-learning model which is GPU/CUDA accelerated (if available). The default is \"hog\".\n    :return: A list of dlib 'rect' objects of found face locations\n    \"\"\"\n    if model == \"cnn\":\n        return cnn_face_detector(img, number_of_times_to_upsample)\n    else:\n        return face_detector(img, number_of_times_to_upsample)", "language": "python", "code": "def _raw_face_locations(img, number_of_times_to_upsample=1, model=\"hog\"):\n    \"\"\"\n    Returns an array of bounding boxes of human faces in a image\n\n    :param img: An image (as a numpy array)\n    :param number_of_times_to_upsample: How many times to upsample the image looking for faces. Higher numbers find smaller faces.\n    :param model: Which face detection model to use. \"hog\" is less accurate but faster on CPUs. \"cnn\" is a more accurate\n                  deep-learning model which is GPU/CUDA accelerated (if available). The default is \"hog\".\n    :return: A list of dlib 'rect' objects of found face locations\n    \"\"\"\n    if model == \"cnn\":\n        return cnn_face_detector(img, number_of_times_to_upsample)\n    else:\n        return face_detector(img, number_of_times_to_upsample)", "code_tokens": ["def", "_raw_face_locations", "(", "img", ",", "number_of_times_to_upsample", "=", "1", ",", "model", "=", "\"hog\"", ")", ":", "if", "model", "==", "\"cnn\"", ":", "return", "cnn_face_detector", "(", "img", ",", "number_of_times_to_upsample", ")", "else", ":", "return", "face_detector", "(", "img", ",", "number_of_times_to_upsample", ")"], "docstring": "Returns an array of bounding boxes of human faces in a image\n\n    :param img: An image (as a numpy array)\n    :param number_of_times_to_upsample: How many times to upsample the image looking for faces. Higher numbers find smaller faces.\n    :param model: Which face detection model to use. \"hog\" is less accurate but faster on CPUs. \"cnn\" is a more accurate\n                  deep-learning model which is GPU/CUDA accelerated (if available). The default is \"hog\".\n    :return: A list of dlib 'rect' objects of found face locations", "docstring_tokens": ["Returns", "an", "array", "of", "bounding", "boxes", "of", "human", "faces", "in", "a", "image"], "sha": "c96b010c02f15e8eeb0f71308c641179ac1f19bb", "url": "https://github.com/ageitgey/face_recognition/blob/c96b010c02f15e8eeb0f71308c641179ac1f19bb/face_recognition/api.py#L92-L105", "partition": "train"}
{"repo": "ageitgey/face_recognition", "path": "face_recognition/api.py", "func_name": "face_locations", "original_string": "def face_locations(img, number_of_times_to_upsample=1, model=\"hog\"):\n    \"\"\"\n    Returns an array of bounding boxes of human faces in a image\n\n    :param img: An image (as a numpy array)\n    :param number_of_times_to_upsample: How many times to upsample the image looking for faces. Higher numbers find smaller faces.\n    :param model: Which face detection model to use. \"hog\" is less accurate but faster on CPUs. \"cnn\" is a more accurate\n                  deep-learning model which is GPU/CUDA accelerated (if available). The default is \"hog\".\n    :return: A list of tuples of found face locations in css (top, right, bottom, left) order\n    \"\"\"\n    if model == \"cnn\":\n        return [_trim_css_to_bounds(_rect_to_css(face.rect), img.shape) for face in _raw_face_locations(img, number_of_times_to_upsample, \"cnn\")]\n    else:\n        return [_trim_css_to_bounds(_rect_to_css(face), img.shape) for face in _raw_face_locations(img, number_of_times_to_upsample, model)]", "language": "python", "code": "def face_locations(img, number_of_times_to_upsample=1, model=\"hog\"):\n    \"\"\"\n    Returns an array of bounding boxes of human faces in a image\n\n    :param img: An image (as a numpy array)\n    :param number_of_times_to_upsample: How many times to upsample the image looking for faces. Higher numbers find smaller faces.\n    :param model: Which face detection model to use. \"hog\" is less accurate but faster on CPUs. \"cnn\" is a more accurate\n                  deep-learning model which is GPU/CUDA accelerated (if available). The default is \"hog\".\n    :return: A list of tuples of found face locations in css (top, right, bottom, left) order\n    \"\"\"\n    if model == \"cnn\":\n        return [_trim_css_to_bounds(_rect_to_css(face.rect), img.shape) for face in _raw_face_locations(img, number_of_times_to_upsample, \"cnn\")]\n    else:\n        return [_trim_css_to_bounds(_rect_to_css(face), img.shape) for face in _raw_face_locations(img, number_of_times_to_upsample, model)]", "code_tokens": ["def", "face_locations", "(", "img", ",", "number_of_times_to_upsample", "=", "1", ",", "model", "=", "\"hog\"", ")", ":", "if", "model", "==", "\"cnn\"", ":", "return", "[", "_trim_css_to_bounds", "(", "_rect_to_css", "(", "face", ".", "rect", ")", ",", "img", ".", "shape", ")", "for", "face", "in", "_raw_face_locations", "(", "img", ",", "number_of_times_to_upsample", ",", "\"cnn\"", ")", "]", "else", ":", "return", "[", "_trim_css_to_bounds", "(", "_rect_to_css", "(", "face", ")", ",", "img", ".", "shape", ")", "for", "face", "in", "_raw_face_locations", "(", "img", ",", "number_of_times_to_upsample", ",", "model", ")", "]"], "docstring": "Returns an array of bounding boxes of human faces in a image\n\n    :param img: An image (as a numpy array)\n    :param number_of_times_to_upsample: How many times to upsample the image looking for faces. Higher numbers find smaller faces.\n    :param model: Which face detection model to use. \"hog\" is less accurate but faster on CPUs. \"cnn\" is a more accurate\n                  deep-learning model which is GPU/CUDA accelerated (if available). The default is \"hog\".\n    :return: A list of tuples of found face locations in css (top, right, bottom, left) order", "docstring_tokens": ["Returns", "an", "array", "of", "bounding", "boxes", "of", "human", "faces", "in", "a", "image"], "sha": "c96b010c02f15e8eeb0f71308c641179ac1f19bb", "url": "https://github.com/ageitgey/face_recognition/blob/c96b010c02f15e8eeb0f71308c641179ac1f19bb/face_recognition/api.py#L108-L121", "partition": "train"}
{"repo": "ageitgey/face_recognition", "path": "face_recognition/api.py", "func_name": "batch_face_locations", "original_string": "def batch_face_locations(images, number_of_times_to_upsample=1, batch_size=128):\n    \"\"\"\n    Returns an 2d array of bounding boxes of human faces in a image using the cnn face detector\n    If you are using a GPU, this can give you much faster results since the GPU\n    can process batches of images at once. If you aren't using a GPU, you don't need this function.\n\n    :param img: A list of images (each as a numpy array)\n    :param number_of_times_to_upsample: How many times to upsample the image looking for faces. Higher numbers find smaller faces.\n    :param batch_size: How many images to include in each GPU processing batch.\n    :return: A list of tuples of found face locations in css (top, right, bottom, left) order\n    \"\"\"\n    def convert_cnn_detections_to_css(detections):\n        return [_trim_css_to_bounds(_rect_to_css(face.rect), images[0].shape) for face in detections]\n\n    raw_detections_batched = _raw_face_locations_batched(images, number_of_times_to_upsample, batch_size)\n\n    return list(map(convert_cnn_detections_to_css, raw_detections_batched))", "language": "python", "code": "def batch_face_locations(images, number_of_times_to_upsample=1, batch_size=128):\n    \"\"\"\n    Returns an 2d array of bounding boxes of human faces in a image using the cnn face detector\n    If you are using a GPU, this can give you much faster results since the GPU\n    can process batches of images at once. If you aren't using a GPU, you don't need this function.\n\n    :param img: A list of images (each as a numpy array)\n    :param number_of_times_to_upsample: How many times to upsample the image looking for faces. Higher numbers find smaller faces.\n    :param batch_size: How many images to include in each GPU processing batch.\n    :return: A list of tuples of found face locations in css (top, right, bottom, left) order\n    \"\"\"\n    def convert_cnn_detections_to_css(detections):\n        return [_trim_css_to_bounds(_rect_to_css(face.rect), images[0].shape) for face in detections]\n\n    raw_detections_batched = _raw_face_locations_batched(images, number_of_times_to_upsample, batch_size)\n\n    return list(map(convert_cnn_detections_to_css, raw_detections_batched))", "code_tokens": ["def", "batch_face_locations", "(", "images", ",", "number_of_times_to_upsample", "=", "1", ",", "batch_size", "=", "128", ")", ":", "def", "convert_cnn_detections_to_css", "(", "detections", ")", ":", "return", "[", "_trim_css_to_bounds", "(", "_rect_to_css", "(", "face", ".", "rect", ")", ",", "images", "[", "0", "]", ".", "shape", ")", "for", "face", "in", "detections", "]", "raw_detections_batched", "=", "_raw_face_locations_batched", "(", "images", ",", "number_of_times_to_upsample", ",", "batch_size", ")", "return", "list", "(", "map", "(", "convert_cnn_detections_to_css", ",", "raw_detections_batched", ")", ")"], "docstring": "Returns an 2d array of bounding boxes of human faces in a image using the cnn face detector\n    If you are using a GPU, this can give you much faster results since the GPU\n    can process batches of images at once. If you aren't using a GPU, you don't need this function.\n\n    :param img: A list of images (each as a numpy array)\n    :param number_of_times_to_upsample: How many times to upsample the image looking for faces. Higher numbers find smaller faces.\n    :param batch_size: How many images to include in each GPU processing batch.\n    :return: A list of tuples of found face locations in css (top, right, bottom, left) order", "docstring_tokens": ["Returns", "an", "2d", "array", "of", "bounding", "boxes", "of", "human", "faces", "in", "a", "image", "using", "the", "cnn", "face", "detector", "If", "you", "are", "using", "a", "GPU", "this", "can", "give", "you", "much", "faster", "results", "since", "the", "GPU", "can", "process", "batches", "of", "images", "at", "once", ".", "If", "you", "aren", "t", "using", "a", "GPU", "you", "don", "t", "need", "this", "function", "."], "sha": "c96b010c02f15e8eeb0f71308c641179ac1f19bb", "url": "https://github.com/ageitgey/face_recognition/blob/c96b010c02f15e8eeb0f71308c641179ac1f19bb/face_recognition/api.py#L135-L151", "partition": "train"}
{"repo": "ageitgey/face_recognition", "path": "face_recognition/api.py", "func_name": "face_landmarks", "original_string": "def face_landmarks(face_image, face_locations=None, model=\"large\"):\n    \"\"\"\n    Given an image, returns a dict of face feature locations (eyes, nose, etc) for each face in the image\n\n    :param face_image: image to search\n    :param face_locations: Optionally provide a list of face locations to check.\n    :param model: Optional - which model to use. \"large\" (default) or \"small\" which only returns 5 points but is faster.\n    :return: A list of dicts of face feature locations (eyes, nose, etc)\n    \"\"\"\n    landmarks = _raw_face_landmarks(face_image, face_locations, model)\n    landmarks_as_tuples = [[(p.x, p.y) for p in landmark.parts()] for landmark in landmarks]\n\n    # For a definition of each point index, see https://cdn-images-1.medium.com/max/1600/1*AbEg31EgkbXSQehuNJBlWg.png\n    if model == 'large':\n        return [{\n            \"chin\": points[0:17],\n            \"left_eyebrow\": points[17:22],\n            \"right_eyebrow\": points[22:27],\n            \"nose_bridge\": points[27:31],\n            \"nose_tip\": points[31:36],\n            \"left_eye\": points[36:42],\n            \"right_eye\": points[42:48],\n            \"top_lip\": points[48:55] + [points[64]] + [points[63]] + [points[62]] + [points[61]] + [points[60]],\n            \"bottom_lip\": points[54:60] + [points[48]] + [points[60]] + [points[67]] + [points[66]] + [points[65]] + [points[64]]\n        } for points in landmarks_as_tuples]\n    elif model == 'small':\n        return [{\n            \"nose_tip\": [points[4]],\n            \"left_eye\": points[2:4],\n            \"right_eye\": points[0:2],\n        } for points in landmarks_as_tuples]\n    else:\n        raise ValueError(\"Invalid landmarks model type. Supported models are ['small', 'large'].\")", "language": "python", "code": "def face_landmarks(face_image, face_locations=None, model=\"large\"):\n    \"\"\"\n    Given an image, returns a dict of face feature locations (eyes, nose, etc) for each face in the image\n\n    :param face_image: image to search\n    :param face_locations: Optionally provide a list of face locations to check.\n    :param model: Optional - which model to use. \"large\" (default) or \"small\" which only returns 5 points but is faster.\n    :return: A list of dicts of face feature locations (eyes, nose, etc)\n    \"\"\"\n    landmarks = _raw_face_landmarks(face_image, face_locations, model)\n    landmarks_as_tuples = [[(p.x, p.y) for p in landmark.parts()] for landmark in landmarks]\n\n    # For a definition of each point index, see https://cdn-images-1.medium.com/max/1600/1*AbEg31EgkbXSQehuNJBlWg.png\n    if model == 'large':\n        return [{\n            \"chin\": points[0:17],\n            \"left_eyebrow\": points[17:22],\n            \"right_eyebrow\": points[22:27],\n            \"nose_bridge\": points[27:31],\n            \"nose_tip\": points[31:36],\n            \"left_eye\": points[36:42],\n            \"right_eye\": points[42:48],\n            \"top_lip\": points[48:55] + [points[64]] + [points[63]] + [points[62]] + [points[61]] + [points[60]],\n            \"bottom_lip\": points[54:60] + [points[48]] + [points[60]] + [points[67]] + [points[66]] + [points[65]] + [points[64]]\n        } for points in landmarks_as_tuples]\n    elif model == 'small':\n        return [{\n            \"nose_tip\": [points[4]],\n            \"left_eye\": points[2:4],\n            \"right_eye\": points[0:2],\n        } for points in landmarks_as_tuples]\n    else:\n        raise ValueError(\"Invalid landmarks model type. Supported models are ['small', 'large'].\")", "code_tokens": ["def", "face_landmarks", "(", "face_image", ",", "face_locations", "=", "None", ",", "model", "=", "\"large\"", ")", ":", "landmarks", "=", "_raw_face_landmarks", "(", "face_image", ",", "face_locations", ",", "model", ")", "landmarks_as_tuples", "=", "[", "[", "(", "p", ".", "x", ",", "p", ".", "y", ")", "for", "p", "in", "landmark", ".", "parts", "(", ")", "]", "for", "landmark", "in", "landmarks", "]", "# For a definition of each point index, see https://cdn-images-1.medium.com/max/1600/1*AbEg31EgkbXSQehuNJBlWg.png", "if", "model", "==", "'large'", ":", "return", "[", "{", "\"chin\"", ":", "points", "[", "0", ":", "17", "]", ",", "\"left_eyebrow\"", ":", "points", "[", "17", ":", "22", "]", ",", "\"right_eyebrow\"", ":", "points", "[", "22", ":", "27", "]", ",", "\"nose_bridge\"", ":", "points", "[", "27", ":", "31", "]", ",", "\"nose_tip\"", ":", "points", "[", "31", ":", "36", "]", ",", "\"left_eye\"", ":", "points", "[", "36", ":", "42", "]", ",", "\"right_eye\"", ":", "points", "[", "42", ":", "48", "]", ",", "\"top_lip\"", ":", "points", "[", "48", ":", "55", "]", "+", "[", "points", "[", "64", "]", "]", "+", "[", "points", "[", "63", "]", "]", "+", "[", "points", "[", "62", "]", "]", "+", "[", "points", "[", "61", "]", "]", "+", "[", "points", "[", "60", "]", "]", ",", "\"bottom_lip\"", ":", "points", "[", "54", ":", "60", "]", "+", "[", "points", "[", "48", "]", "]", "+", "[", "points", "[", "60", "]", "]", "+", "[", "points", "[", "67", "]", "]", "+", "[", "points", "[", "66", "]", "]", "+", "[", "points", "[", "65", "]", "]", "+", "[", "points", "[", "64", "]", "]", "}", "for", "points", "in", "landmarks_as_tuples", "]", "elif", "model", "==", "'small'", ":", "return", "[", "{", "\"nose_tip\"", ":", "[", "points", "[", "4", "]", "]", ",", "\"left_eye\"", ":", "points", "[", "2", ":", "4", "]", ",", "\"right_eye\"", ":", "points", "[", "0", ":", "2", "]", ",", "}", "for", "points", "in", "landmarks_as_tuples", "]", "else", ":", "raise", "ValueError", "(", "\"Invalid landmarks model type. Supported models are ['small', 'large'].\"", ")"], "docstring": "Given an image, returns a dict of face feature locations (eyes, nose, etc) for each face in the image\n\n    :param face_image: image to search\n    :param face_locations: Optionally provide a list of face locations to check.\n    :param model: Optional - which model to use. \"large\" (default) or \"small\" which only returns 5 points but is faster.\n    :return: A list of dicts of face feature locations (eyes, nose, etc)", "docstring_tokens": ["Given", "an", "image", "returns", "a", "dict", "of", "face", "feature", "locations", "(", "eyes", "nose", "etc", ")", "for", "each", "face", "in", "the", "image"], "sha": "c96b010c02f15e8eeb0f71308c641179ac1f19bb", "url": "https://github.com/ageitgey/face_recognition/blob/c96b010c02f15e8eeb0f71308c641179ac1f19bb/face_recognition/api.py#L168-L200", "partition": "train"}
{"repo": "ageitgey/face_recognition", "path": "face_recognition/api.py", "func_name": "face_encodings", "original_string": "def face_encodings(face_image, known_face_locations=None, num_jitters=1):\n    \"\"\"\n    Given an image, return the 128-dimension face encoding for each face in the image.\n\n    :param face_image: The image that contains one or more faces\n    :param known_face_locations: Optional - the bounding boxes of each face if you already know them.\n    :param num_jitters: How many times to re-sample the face when calculating encoding. Higher is more accurate, but slower (i.e. 100 is 100x slower)\n    :return: A list of 128-dimensional face encodings (one for each face in the image)\n    \"\"\"\n    raw_landmarks = _raw_face_landmarks(face_image, known_face_locations, model=\"small\")\n    return [np.array(face_encoder.compute_face_descriptor(face_image, raw_landmark_set, num_jitters)) for raw_landmark_set in raw_landmarks]", "language": "python", "code": "def face_encodings(face_image, known_face_locations=None, num_jitters=1):\n    \"\"\"\n    Given an image, return the 128-dimension face encoding for each face in the image.\n\n    :param face_image: The image that contains one or more faces\n    :param known_face_locations: Optional - the bounding boxes of each face if you already know them.\n    :param num_jitters: How many times to re-sample the face when calculating encoding. Higher is more accurate, but slower (i.e. 100 is 100x slower)\n    :return: A list of 128-dimensional face encodings (one for each face in the image)\n    \"\"\"\n    raw_landmarks = _raw_face_landmarks(face_image, known_face_locations, model=\"small\")\n    return [np.array(face_encoder.compute_face_descriptor(face_image, raw_landmark_set, num_jitters)) for raw_landmark_set in raw_landmarks]", "code_tokens": ["def", "face_encodings", "(", "face_image", ",", "known_face_locations", "=", "None", ",", "num_jitters", "=", "1", ")", ":", "raw_landmarks", "=", "_raw_face_landmarks", "(", "face_image", ",", "known_face_locations", ",", "model", "=", "\"small\"", ")", "return", "[", "np", ".", "array", "(", "face_encoder", ".", "compute_face_descriptor", "(", "face_image", ",", "raw_landmark_set", ",", "num_jitters", ")", ")", "for", "raw_landmark_set", "in", "raw_landmarks", "]"], "docstring": "Given an image, return the 128-dimension face encoding for each face in the image.\n\n    :param face_image: The image that contains one or more faces\n    :param known_face_locations: Optional - the bounding boxes of each face if you already know them.\n    :param num_jitters: How many times to re-sample the face when calculating encoding. Higher is more accurate, but slower (i.e. 100 is 100x slower)\n    :return: A list of 128-dimensional face encodings (one for each face in the image)", "docstring_tokens": ["Given", "an", "image", "return", "the", "128", "-", "dimension", "face", "encoding", "for", "each", "face", "in", "the", "image", "."], "sha": "c96b010c02f15e8eeb0f71308c641179ac1f19bb", "url": "https://github.com/ageitgey/face_recognition/blob/c96b010c02f15e8eeb0f71308c641179ac1f19bb/face_recognition/api.py#L203-L213", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/sql/types.py", "func_name": "_parse_datatype_string", "original_string": "def _parse_datatype_string(s):\n    \"\"\"\n    Parses the given data type string to a :class:`DataType`. The data type string format equals\n    to :class:`DataType.simpleString`, except that top level struct type can omit\n    the ``struct<>`` and atomic types use ``typeName()`` as their format, e.g. use ``byte`` instead\n    of ``tinyint`` for :class:`ByteType`. We can also use ``int`` as a short name\n    for :class:`IntegerType`. Since Spark 2.3, this also supports a schema in a DDL-formatted\n    string and case-insensitive strings.\n\n    >>> _parse_datatype_string(\"int \")\n    IntegerType\n    >>> _parse_datatype_string(\"INT \")\n    IntegerType\n    >>> _parse_datatype_string(\"a: byte, b: decimal(  16 , 8   ) \")\n    StructType(List(StructField(a,ByteType,true),StructField(b,DecimalType(16,8),true)))\n    >>> _parse_datatype_string(\"a DOUBLE, b STRING\")\n    StructType(List(StructField(a,DoubleType,true),StructField(b,StringType,true)))\n    >>> _parse_datatype_string(\"a: array< short>\")\n    StructType(List(StructField(a,ArrayType(ShortType,true),true)))\n    >>> _parse_datatype_string(\" map<string , string > \")\n    MapType(StringType,StringType,true)\n\n    >>> # Error cases\n    >>> _parse_datatype_string(\"blabla\") # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ParseException:...\n    >>> _parse_datatype_string(\"a: int,\") # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ParseException:...\n    >>> _parse_datatype_string(\"array<int\") # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ParseException:...\n    >>> _parse_datatype_string(\"map<int, boolean>>\") # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ParseException:...\n    \"\"\"\n    sc = SparkContext._active_spark_context\n\n    def from_ddl_schema(type_str):\n        return _parse_datatype_json_string(\n            sc._jvm.org.apache.spark.sql.types.StructType.fromDDL(type_str).json())\n\n    def from_ddl_datatype(type_str):\n        return _parse_datatype_json_string(\n            sc._jvm.org.apache.spark.sql.api.python.PythonSQLUtils.parseDataType(type_str).json())\n\n    try:\n        # DDL format, \"fieldname datatype, fieldname datatype\".\n        return from_ddl_schema(s)\n    except Exception as e:\n        try:\n            # For backwards compatibility, \"integer\", \"struct<fieldname: datatype>\" and etc.\n            return from_ddl_datatype(s)\n        except:\n            try:\n                # For backwards compatibility, \"fieldname: datatype, fieldname: datatype\" case.\n                return from_ddl_datatype(\"struct<%s>\" % s.strip())\n            except:\n                raise e", "language": "python", "code": "def _parse_datatype_string(s):\n    \"\"\"\n    Parses the given data type string to a :class:`DataType`. The data type string format equals\n    to :class:`DataType.simpleString`, except that top level struct type can omit\n    the ``struct<>`` and atomic types use ``typeName()`` as their format, e.g. use ``byte`` instead\n    of ``tinyint`` for :class:`ByteType`. We can also use ``int`` as a short name\n    for :class:`IntegerType`. Since Spark 2.3, this also supports a schema in a DDL-formatted\n    string and case-insensitive strings.\n\n    >>> _parse_datatype_string(\"int \")\n    IntegerType\n    >>> _parse_datatype_string(\"INT \")\n    IntegerType\n    >>> _parse_datatype_string(\"a: byte, b: decimal(  16 , 8   ) \")\n    StructType(List(StructField(a,ByteType,true),StructField(b,DecimalType(16,8),true)))\n    >>> _parse_datatype_string(\"a DOUBLE, b STRING\")\n    StructType(List(StructField(a,DoubleType,true),StructField(b,StringType,true)))\n    >>> _parse_datatype_string(\"a: array< short>\")\n    StructType(List(StructField(a,ArrayType(ShortType,true),true)))\n    >>> _parse_datatype_string(\" map<string , string > \")\n    MapType(StringType,StringType,true)\n\n    >>> # Error cases\n    >>> _parse_datatype_string(\"blabla\") # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ParseException:...\n    >>> _parse_datatype_string(\"a: int,\") # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ParseException:...\n    >>> _parse_datatype_string(\"array<int\") # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ParseException:...\n    >>> _parse_datatype_string(\"map<int, boolean>>\") # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ParseException:...\n    \"\"\"\n    sc = SparkContext._active_spark_context\n\n    def from_ddl_schema(type_str):\n        return _parse_datatype_json_string(\n            sc._jvm.org.apache.spark.sql.types.StructType.fromDDL(type_str).json())\n\n    def from_ddl_datatype(type_str):\n        return _parse_datatype_json_string(\n            sc._jvm.org.apache.spark.sql.api.python.PythonSQLUtils.parseDataType(type_str).json())\n\n    try:\n        # DDL format, \"fieldname datatype, fieldname datatype\".\n        return from_ddl_schema(s)\n    except Exception as e:\n        try:\n            # For backwards compatibility, \"integer\", \"struct<fieldname: datatype>\" and etc.\n            return from_ddl_datatype(s)\n        except:\n            try:\n                # For backwards compatibility, \"fieldname: datatype, fieldname: datatype\" case.\n                return from_ddl_datatype(\"struct<%s>\" % s.strip())\n            except:\n                raise e", "code_tokens": ["def", "_parse_datatype_string", "(", "s", ")", ":", "sc", "=", "SparkContext", ".", "_active_spark_context", "def", "from_ddl_schema", "(", "type_str", ")", ":", "return", "_parse_datatype_json_string", "(", "sc", ".", "_jvm", ".", "org", ".", "apache", ".", "spark", ".", "sql", ".", "types", ".", "StructType", ".", "fromDDL", "(", "type_str", ")", ".", "json", "(", ")", ")", "def", "from_ddl_datatype", "(", "type_str", ")", ":", "return", "_parse_datatype_json_string", "(", "sc", ".", "_jvm", ".", "org", ".", "apache", ".", "spark", ".", "sql", ".", "api", ".", "python", ".", "PythonSQLUtils", ".", "parseDataType", "(", "type_str", ")", ".", "json", "(", ")", ")", "try", ":", "# DDL format, \"fieldname datatype, fieldname datatype\".", "return", "from_ddl_schema", "(", "s", ")", "except", "Exception", "as", "e", ":", "try", ":", "# For backwards compatibility, \"integer\", \"struct<fieldname: datatype>\" and etc.", "return", "from_ddl_datatype", "(", "s", ")", "except", ":", "try", ":", "# For backwards compatibility, \"fieldname: datatype, fieldname: datatype\" case.", "return", "from_ddl_datatype", "(", "\"struct<%s>\"", "%", "s", ".", "strip", "(", ")", ")", "except", ":", "raise", "e"], "docstring": "Parses the given data type string to a :class:`DataType`. The data type string format equals\n    to :class:`DataType.simpleString`, except that top level struct type can omit\n    the ``struct<>`` and atomic types use ``typeName()`` as their format, e.g. use ``byte`` instead\n    of ``tinyint`` for :class:`ByteType`. We can also use ``int`` as a short name\n    for :class:`IntegerType`. Since Spark 2.3, this also supports a schema in a DDL-formatted\n    string and case-insensitive strings.\n\n    >>> _parse_datatype_string(\"int \")\n    IntegerType\n    >>> _parse_datatype_string(\"INT \")\n    IntegerType\n    >>> _parse_datatype_string(\"a: byte, b: decimal(  16 , 8   ) \")\n    StructType(List(StructField(a,ByteType,true),StructField(b,DecimalType(16,8),true)))\n    >>> _parse_datatype_string(\"a DOUBLE, b STRING\")\n    StructType(List(StructField(a,DoubleType,true),StructField(b,StringType,true)))\n    >>> _parse_datatype_string(\"a: array< short>\")\n    StructType(List(StructField(a,ArrayType(ShortType,true),true)))\n    >>> _parse_datatype_string(\" map<string , string > \")\n    MapType(StringType,StringType,true)\n\n    >>> # Error cases\n    >>> _parse_datatype_string(\"blabla\") # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ParseException:...\n    >>> _parse_datatype_string(\"a: int,\") # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ParseException:...\n    >>> _parse_datatype_string(\"array<int\") # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ParseException:...\n    >>> _parse_datatype_string(\"map<int, boolean>>\") # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ParseException:...", "docstring_tokens": ["Parses", "the", "given", "data", "type", "string", "to", "a", ":", "class", ":", "DataType", ".", "The", "data", "type", "string", "format", "equals", "to", ":", "class", ":", "DataType", ".", "simpleString", "except", "that", "top", "level", "struct", "type", "can", "omit", "the", "struct<", ">", "and", "atomic", "types", "use", "typeName", "()", "as", "their", "format", "e", ".", "g", ".", "use", "byte", "instead", "of", "tinyint", "for", ":", "class", ":", "ByteType", ".", "We", "can", "also", "use", "int", "as", "a", "short", "name", "for", ":", "class", ":", "IntegerType", ".", "Since", "Spark", "2", ".", "3", "this", "also", "supports", "a", "schema", "in", "a", "DDL", "-", "formatted", "string", "and", "case", "-", "insensitive", "strings", "."], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/sql/types.py#L758-L820", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/sql/types.py", "func_name": "_int_size_to_type", "original_string": "def _int_size_to_type(size):\n    \"\"\"\n    Return the Catalyst datatype from the size of integers.\n    \"\"\"\n    if size <= 8:\n        return ByteType\n    if size <= 16:\n        return ShortType\n    if size <= 32:\n        return IntegerType\n    if size <= 64:\n        return LongType", "language": "python", "code": "def _int_size_to_type(size):\n    \"\"\"\n    Return the Catalyst datatype from the size of integers.\n    \"\"\"\n    if size <= 8:\n        return ByteType\n    if size <= 16:\n        return ShortType\n    if size <= 32:\n        return IntegerType\n    if size <= 64:\n        return LongType", "code_tokens": ["def", "_int_size_to_type", "(", "size", ")", ":", "if", "size", "<=", "8", ":", "return", "ByteType", "if", "size", "<=", "16", ":", "return", "ShortType", "if", "size", "<=", "32", ":", "return", "IntegerType", "if", "size", "<=", "64", ":", "return", "LongType"], "docstring": "Return the Catalyst datatype from the size of integers.", "docstring_tokens": ["Return", "the", "Catalyst", "datatype", "from", "the", "size", "of", "integers", "."], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/sql/types.py#L944-L955", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/sql/types.py", "func_name": "_infer_type", "original_string": "def _infer_type(obj):\n    \"\"\"Infer the DataType from obj\n    \"\"\"\n    if obj is None:\n        return NullType()\n\n    if hasattr(obj, '__UDT__'):\n        return obj.__UDT__\n\n    dataType = _type_mappings.get(type(obj))\n    if dataType is DecimalType:\n        # the precision and scale of `obj` may be different from row to row.\n        return DecimalType(38, 18)\n    elif dataType is not None:\n        return dataType()\n\n    if isinstance(obj, dict):\n        for key, value in obj.items():\n            if key is not None and value is not None:\n                return MapType(_infer_type(key), _infer_type(value), True)\n        return MapType(NullType(), NullType(), True)\n    elif isinstance(obj, list):\n        for v in obj:\n            if v is not None:\n                return ArrayType(_infer_type(obj[0]), True)\n        return ArrayType(NullType(), True)\n    elif isinstance(obj, array):\n        if obj.typecode in _array_type_mappings:\n            return ArrayType(_array_type_mappings[obj.typecode](), False)\n        else:\n            raise TypeError(\"not supported type: array(%s)\" % obj.typecode)\n    else:\n        try:\n            return _infer_schema(obj)\n        except TypeError:\n            raise TypeError(\"not supported type: %s\" % type(obj))", "language": "python", "code": "def _infer_type(obj):\n    \"\"\"Infer the DataType from obj\n    \"\"\"\n    if obj is None:\n        return NullType()\n\n    if hasattr(obj, '__UDT__'):\n        return obj.__UDT__\n\n    dataType = _type_mappings.get(type(obj))\n    if dataType is DecimalType:\n        # the precision and scale of `obj` may be different from row to row.\n        return DecimalType(38, 18)\n    elif dataType is not None:\n        return dataType()\n\n    if isinstance(obj, dict):\n        for key, value in obj.items():\n            if key is not None and value is not None:\n                return MapType(_infer_type(key), _infer_type(value), True)\n        return MapType(NullType(), NullType(), True)\n    elif isinstance(obj, list):\n        for v in obj:\n            if v is not None:\n                return ArrayType(_infer_type(obj[0]), True)\n        return ArrayType(NullType(), True)\n    elif isinstance(obj, array):\n        if obj.typecode in _array_type_mappings:\n            return ArrayType(_array_type_mappings[obj.typecode](), False)\n        else:\n            raise TypeError(\"not supported type: array(%s)\" % obj.typecode)\n    else:\n        try:\n            return _infer_schema(obj)\n        except TypeError:\n            raise TypeError(\"not supported type: %s\" % type(obj))", "code_tokens": ["def", "_infer_type", "(", "obj", ")", ":", "if", "obj", "is", "None", ":", "return", "NullType", "(", ")", "if", "hasattr", "(", "obj", ",", "'__UDT__'", ")", ":", "return", "obj", ".", "__UDT__", "dataType", "=", "_type_mappings", ".", "get", "(", "type", "(", "obj", ")", ")", "if", "dataType", "is", "DecimalType", ":", "# the precision and scale of `obj` may be different from row to row.", "return", "DecimalType", "(", "38", ",", "18", ")", "elif", "dataType", "is", "not", "None", ":", "return", "dataType", "(", ")", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "for", "key", ",", "value", "in", "obj", ".", "items", "(", ")", ":", "if", "key", "is", "not", "None", "and", "value", "is", "not", "None", ":", "return", "MapType", "(", "_infer_type", "(", "key", ")", ",", "_infer_type", "(", "value", ")", ",", "True", ")", "return", "MapType", "(", "NullType", "(", ")", ",", "NullType", "(", ")", ",", "True", ")", "elif", "isinstance", "(", "obj", ",", "list", ")", ":", "for", "v", "in", "obj", ":", "if", "v", "is", "not", "None", ":", "return", "ArrayType", "(", "_infer_type", "(", "obj", "[", "0", "]", ")", ",", "True", ")", "return", "ArrayType", "(", "NullType", "(", ")", ",", "True", ")", "elif", "isinstance", "(", "obj", ",", "array", ")", ":", "if", "obj", ".", "typecode", "in", "_array_type_mappings", ":", "return", "ArrayType", "(", "_array_type_mappings", "[", "obj", ".", "typecode", "]", "(", ")", ",", "False", ")", "else", ":", "raise", "TypeError", "(", "\"not supported type: array(%s)\"", "%", "obj", ".", "typecode", ")", "else", ":", "try", ":", "return", "_infer_schema", "(", "obj", ")", "except", "TypeError", ":", "raise", "TypeError", "(", "\"not supported type: %s\"", "%", "type", "(", "obj", ")", ")"], "docstring": "Infer the DataType from obj", "docstring_tokens": ["Infer", "the", "DataType", "from", "obj"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/sql/types.py#L1003-L1038", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/sql/types.py", "func_name": "_infer_schema", "original_string": "def _infer_schema(row, names=None):\n    \"\"\"Infer the schema from dict/namedtuple/object\"\"\"\n    if isinstance(row, dict):\n        items = sorted(row.items())\n\n    elif isinstance(row, (tuple, list)):\n        if hasattr(row, \"__fields__\"):  # Row\n            items = zip(row.__fields__, tuple(row))\n        elif hasattr(row, \"_fields\"):  # namedtuple\n            items = zip(row._fields, tuple(row))\n        else:\n            if names is None:\n                names = ['_%d' % i for i in range(1, len(row) + 1)]\n            elif len(names) < len(row):\n                names.extend('_%d' % i for i in range(len(names) + 1, len(row) + 1))\n            items = zip(names, row)\n\n    elif hasattr(row, \"__dict__\"):  # object\n        items = sorted(row.__dict__.items())\n\n    else:\n        raise TypeError(\"Can not infer schema for type: %s\" % type(row))\n\n    fields = [StructField(k, _infer_type(v), True) for k, v in items]\n    return StructType(fields)", "language": "python", "code": "def _infer_schema(row, names=None):\n    \"\"\"Infer the schema from dict/namedtuple/object\"\"\"\n    if isinstance(row, dict):\n        items = sorted(row.items())\n\n    elif isinstance(row, (tuple, list)):\n        if hasattr(row, \"__fields__\"):  # Row\n            items = zip(row.__fields__, tuple(row))\n        elif hasattr(row, \"_fields\"):  # namedtuple\n            items = zip(row._fields, tuple(row))\n        else:\n            if names is None:\n                names = ['_%d' % i for i in range(1, len(row) + 1)]\n            elif len(names) < len(row):\n                names.extend('_%d' % i for i in range(len(names) + 1, len(row) + 1))\n            items = zip(names, row)\n\n    elif hasattr(row, \"__dict__\"):  # object\n        items = sorted(row.__dict__.items())\n\n    else:\n        raise TypeError(\"Can not infer schema for type: %s\" % type(row))\n\n    fields = [StructField(k, _infer_type(v), True) for k, v in items]\n    return StructType(fields)", "code_tokens": ["def", "_infer_schema", "(", "row", ",", "names", "=", "None", ")", ":", "if", "isinstance", "(", "row", ",", "dict", ")", ":", "items", "=", "sorted", "(", "row", ".", "items", "(", ")", ")", "elif", "isinstance", "(", "row", ",", "(", "tuple", ",", "list", ")", ")", ":", "if", "hasattr", "(", "row", ",", "\"__fields__\"", ")", ":", "# Row", "items", "=", "zip", "(", "row", ".", "__fields__", ",", "tuple", "(", "row", ")", ")", "elif", "hasattr", "(", "row", ",", "\"_fields\"", ")", ":", "# namedtuple", "items", "=", "zip", "(", "row", ".", "_fields", ",", "tuple", "(", "row", ")", ")", "else", ":", "if", "names", "is", "None", ":", "names", "=", "[", "'_%d'", "%", "i", "for", "i", "in", "range", "(", "1", ",", "len", "(", "row", ")", "+", "1", ")", "]", "elif", "len", "(", "names", ")", "<", "len", "(", "row", ")", ":", "names", ".", "extend", "(", "'_%d'", "%", "i", "for", "i", "in", "range", "(", "len", "(", "names", ")", "+", "1", ",", "len", "(", "row", ")", "+", "1", ")", ")", "items", "=", "zip", "(", "names", ",", "row", ")", "elif", "hasattr", "(", "row", ",", "\"__dict__\"", ")", ":", "# object", "items", "=", "sorted", "(", "row", ".", "__dict__", ".", "items", "(", ")", ")", "else", ":", "raise", "TypeError", "(", "\"Can not infer schema for type: %s\"", "%", "type", "(", "row", ")", ")", "fields", "=", "[", "StructField", "(", "k", ",", "_infer_type", "(", "v", ")", ",", "True", ")", "for", "k", ",", "v", "in", "items", "]", "return", "StructType", "(", "fields", ")"], "docstring": "Infer the schema from dict/namedtuple/object", "docstring_tokens": ["Infer", "the", "schema", "from", "dict", "/", "namedtuple", "/", "object"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/sql/types.py#L1041-L1065", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/sql/types.py", "func_name": "_has_nulltype", "original_string": "def _has_nulltype(dt):\n    \"\"\" Return whether there is NullType in `dt` or not \"\"\"\n    if isinstance(dt, StructType):\n        return any(_has_nulltype(f.dataType) for f in dt.fields)\n    elif isinstance(dt, ArrayType):\n        return _has_nulltype((dt.elementType))\n    elif isinstance(dt, MapType):\n        return _has_nulltype(dt.keyType) or _has_nulltype(dt.valueType)\n    else:\n        return isinstance(dt, NullType)", "language": "python", "code": "def _has_nulltype(dt):\n    \"\"\" Return whether there is NullType in `dt` or not \"\"\"\n    if isinstance(dt, StructType):\n        return any(_has_nulltype(f.dataType) for f in dt.fields)\n    elif isinstance(dt, ArrayType):\n        return _has_nulltype((dt.elementType))\n    elif isinstance(dt, MapType):\n        return _has_nulltype(dt.keyType) or _has_nulltype(dt.valueType)\n    else:\n        return isinstance(dt, NullType)", "code_tokens": ["def", "_has_nulltype", "(", "dt", ")", ":", "if", "isinstance", "(", "dt", ",", "StructType", ")", ":", "return", "any", "(", "_has_nulltype", "(", "f", ".", "dataType", ")", "for", "f", "in", "dt", ".", "fields", ")", "elif", "isinstance", "(", "dt", ",", "ArrayType", ")", ":", "return", "_has_nulltype", "(", "(", "dt", ".", "elementType", ")", ")", "elif", "isinstance", "(", "dt", ",", "MapType", ")", ":", "return", "_has_nulltype", "(", "dt", ".", "keyType", ")", "or", "_has_nulltype", "(", "dt", ".", "valueType", ")", "else", ":", "return", "isinstance", "(", "dt", ",", "NullType", ")"], "docstring": "Return whether there is NullType in `dt` or not", "docstring_tokens": ["Return", "whether", "there", "is", "NullType", "in", "dt", "or", "not"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/sql/types.py#L1068-L1077", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/sql/types.py", "func_name": "_create_converter", "original_string": "def _create_converter(dataType):\n    \"\"\"Create a converter to drop the names of fields in obj \"\"\"\n    if not _need_converter(dataType):\n        return lambda x: x\n\n    if isinstance(dataType, ArrayType):\n        conv = _create_converter(dataType.elementType)\n        return lambda row: [conv(v) for v in row]\n\n    elif isinstance(dataType, MapType):\n        kconv = _create_converter(dataType.keyType)\n        vconv = _create_converter(dataType.valueType)\n        return lambda row: dict((kconv(k), vconv(v)) for k, v in row.items())\n\n    elif isinstance(dataType, NullType):\n        return lambda x: None\n\n    elif not isinstance(dataType, StructType):\n        return lambda x: x\n\n    # dataType must be StructType\n    names = [f.name for f in dataType.fields]\n    converters = [_create_converter(f.dataType) for f in dataType.fields]\n    convert_fields = any(_need_converter(f.dataType) for f in dataType.fields)\n\n    def convert_struct(obj):\n        if obj is None:\n            return\n\n        if isinstance(obj, (tuple, list)):\n            if convert_fields:\n                return tuple(conv(v) for v, conv in zip(obj, converters))\n            else:\n                return tuple(obj)\n\n        if isinstance(obj, dict):\n            d = obj\n        elif hasattr(obj, \"__dict__\"):  # object\n            d = obj.__dict__\n        else:\n            raise TypeError(\"Unexpected obj type: %s\" % type(obj))\n\n        if convert_fields:\n            return tuple([conv(d.get(name)) for name, conv in zip(names, converters)])\n        else:\n            return tuple([d.get(name) for name in names])\n\n    return convert_struct", "language": "python", "code": "def _create_converter(dataType):\n    \"\"\"Create a converter to drop the names of fields in obj \"\"\"\n    if not _need_converter(dataType):\n        return lambda x: x\n\n    if isinstance(dataType, ArrayType):\n        conv = _create_converter(dataType.elementType)\n        return lambda row: [conv(v) for v in row]\n\n    elif isinstance(dataType, MapType):\n        kconv = _create_converter(dataType.keyType)\n        vconv = _create_converter(dataType.valueType)\n        return lambda row: dict((kconv(k), vconv(v)) for k, v in row.items())\n\n    elif isinstance(dataType, NullType):\n        return lambda x: None\n\n    elif not isinstance(dataType, StructType):\n        return lambda x: x\n\n    # dataType must be StructType\n    names = [f.name for f in dataType.fields]\n    converters = [_create_converter(f.dataType) for f in dataType.fields]\n    convert_fields = any(_need_converter(f.dataType) for f in dataType.fields)\n\n    def convert_struct(obj):\n        if obj is None:\n            return\n\n        if isinstance(obj, (tuple, list)):\n            if convert_fields:\n                return tuple(conv(v) for v, conv in zip(obj, converters))\n            else:\n                return tuple(obj)\n\n        if isinstance(obj, dict):\n            d = obj\n        elif hasattr(obj, \"__dict__\"):  # object\n            d = obj.__dict__\n        else:\n            raise TypeError(\"Unexpected obj type: %s\" % type(obj))\n\n        if convert_fields:\n            return tuple([conv(d.get(name)) for name, conv in zip(names, converters)])\n        else:\n            return tuple([d.get(name) for name in names])\n\n    return convert_struct", "code_tokens": ["def", "_create_converter", "(", "dataType", ")", ":", "if", "not", "_need_converter", "(", "dataType", ")", ":", "return", "lambda", "x", ":", "x", "if", "isinstance", "(", "dataType", ",", "ArrayType", ")", ":", "conv", "=", "_create_converter", "(", "dataType", ".", "elementType", ")", "return", "lambda", "row", ":", "[", "conv", "(", "v", ")", "for", "v", "in", "row", "]", "elif", "isinstance", "(", "dataType", ",", "MapType", ")", ":", "kconv", "=", "_create_converter", "(", "dataType", ".", "keyType", ")", "vconv", "=", "_create_converter", "(", "dataType", ".", "valueType", ")", "return", "lambda", "row", ":", "dict", "(", "(", "kconv", "(", "k", ")", ",", "vconv", "(", "v", ")", ")", "for", "k", ",", "v", "in", "row", ".", "items", "(", ")", ")", "elif", "isinstance", "(", "dataType", ",", "NullType", ")", ":", "return", "lambda", "x", ":", "None", "elif", "not", "isinstance", "(", "dataType", ",", "StructType", ")", ":", "return", "lambda", "x", ":", "x", "# dataType must be StructType", "names", "=", "[", "f", ".", "name", "for", "f", "in", "dataType", ".", "fields", "]", "converters", "=", "[", "_create_converter", "(", "f", ".", "dataType", ")", "for", "f", "in", "dataType", ".", "fields", "]", "convert_fields", "=", "any", "(", "_need_converter", "(", "f", ".", "dataType", ")", "for", "f", "in", "dataType", ".", "fields", ")", "def", "convert_struct", "(", "obj", ")", ":", "if", "obj", "is", "None", ":", "return", "if", "isinstance", "(", "obj", ",", "(", "tuple", ",", "list", ")", ")", ":", "if", "convert_fields", ":", "return", "tuple", "(", "conv", "(", "v", ")", "for", "v", ",", "conv", "in", "zip", "(", "obj", ",", "converters", ")", ")", "else", ":", "return", "tuple", "(", "obj", ")", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "d", "=", "obj", "elif", "hasattr", "(", "obj", ",", "\"__dict__\"", ")", ":", "# object", "d", "=", "obj", ".", "__dict__", "else", ":", "raise", "TypeError", "(", "\"Unexpected obj type: %s\"", "%", "type", "(", "obj", ")", ")", "if", "convert_fields", ":", "return", "tuple", "(", "[", "conv", "(", "d", ".", "get", "(", "name", ")", ")", "for", "name", ",", "conv", "in", "zip", "(", "names", ",", "converters", ")", "]", ")", "else", ":", "return", "tuple", "(", "[", "d", ".", "get", "(", "name", ")", "for", "name", "in", "names", "]", ")", "return", "convert_struct"], "docstring": "Create a converter to drop the names of fields in obj", "docstring_tokens": ["Create", "a", "converter", "to", "drop", "the", "names", "of", "fields", "in", "obj"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/sql/types.py#L1133-L1180", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/sql/types.py", "func_name": "_make_type_verifier", "original_string": "def _make_type_verifier(dataType, nullable=True, name=None):\n    \"\"\"\n    Make a verifier that checks the type of obj against dataType and raises a TypeError if they do\n    not match.\n\n    This verifier also checks the value of obj against datatype and raises a ValueError if it's not\n    within the allowed range, e.g. using 128 as ByteType will overflow. Note that, Python float is\n    not checked, so it will become infinity when cast to Java float if it overflows.\n\n    >>> _make_type_verifier(StructType([]))(None)\n    >>> _make_type_verifier(StringType())(\"\")\n    >>> _make_type_verifier(LongType())(0)\n    >>> _make_type_verifier(ArrayType(ShortType()))(list(range(3)))\n    >>> _make_type_verifier(ArrayType(StringType()))(set()) # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    TypeError:...\n    >>> _make_type_verifier(MapType(StringType(), IntegerType()))({})\n    >>> _make_type_verifier(StructType([]))(())\n    >>> _make_type_verifier(StructType([]))([])\n    >>> _make_type_verifier(StructType([]))([1]) # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValueError:...\n    >>> # Check if numeric values are within the allowed range.\n    >>> _make_type_verifier(ByteType())(12)\n    >>> _make_type_verifier(ByteType())(1234) # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValueError:...\n    >>> _make_type_verifier(ByteType(), False)(None) # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValueError:...\n    >>> _make_type_verifier(\n    ...     ArrayType(ShortType(), False))([1, None]) # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValueError:...\n    >>> _make_type_verifier(MapType(StringType(), IntegerType()))({None: 1})\n    Traceback (most recent call last):\n        ...\n    ValueError:...\n    >>> schema = StructType().add(\"a\", IntegerType()).add(\"b\", StringType(), False)\n    >>> _make_type_verifier(schema)((1, None)) # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValueError:...\n    \"\"\"\n\n    if name is None:\n        new_msg = lambda msg: msg\n        new_name = lambda n: \"field %s\" % n\n    else:\n        new_msg = lambda msg: \"%s: %s\" % (name, msg)\n        new_name = lambda n: \"field %s in %s\" % (n, name)\n\n    def verify_nullability(obj):\n        if obj is None:\n            if nullable:\n                return True\n            else:\n                raise ValueError(new_msg(\"This field is not nullable, but got None\"))\n        else:\n            return False\n\n    _type = type(dataType)\n\n    def assert_acceptable_types(obj):\n        assert _type in _acceptable_types, \\\n            new_msg(\"unknown datatype: %s for object %r\" % (dataType, obj))\n\n    def verify_acceptable_types(obj):\n        # subclass of them can not be fromInternal in JVM\n        if type(obj) not in _acceptable_types[_type]:\n            raise TypeError(new_msg(\"%s can not accept object %r in type %s\"\n                                    % (dataType, obj, type(obj))))\n\n    if isinstance(dataType, StringType):\n        # StringType can work with any types\n        verify_value = lambda _: _\n\n    elif isinstance(dataType, UserDefinedType):\n        verifier = _make_type_verifier(dataType.sqlType(), name=name)\n\n        def verify_udf(obj):\n            if not (hasattr(obj, '__UDT__') and obj.__UDT__ == dataType):\n                raise ValueError(new_msg(\"%r is not an instance of type %r\" % (obj, dataType)))\n            verifier(dataType.toInternal(obj))\n\n        verify_value = verify_udf\n\n    elif isinstance(dataType, ByteType):\n        def verify_byte(obj):\n            assert_acceptable_types(obj)\n            verify_acceptable_types(obj)\n            if obj < -128 or obj > 127:\n                raise ValueError(new_msg(\"object of ByteType out of range, got: %s\" % obj))\n\n        verify_value = verify_byte\n\n    elif isinstance(dataType, ShortType):\n        def verify_short(obj):\n            assert_acceptable_types(obj)\n            verify_acceptable_types(obj)\n            if obj < -32768 or obj > 32767:\n                raise ValueError(new_msg(\"object of ShortType out of range, got: %s\" % obj))\n\n        verify_value = verify_short\n\n    elif isinstance(dataType, IntegerType):\n        def verify_integer(obj):\n            assert_acceptable_types(obj)\n            verify_acceptable_types(obj)\n            if obj < -2147483648 or obj > 2147483647:\n                raise ValueError(\n                    new_msg(\"object of IntegerType out of range, got: %s\" % obj))\n\n        verify_value = verify_integer\n\n    elif isinstance(dataType, ArrayType):\n        element_verifier = _make_type_verifier(\n            dataType.elementType, dataType.containsNull, name=\"element in array %s\" % name)\n\n        def verify_array(obj):\n            assert_acceptable_types(obj)\n            verify_acceptable_types(obj)\n            for i in obj:\n                element_verifier(i)\n\n        verify_value = verify_array\n\n    elif isinstance(dataType, MapType):\n        key_verifier = _make_type_verifier(dataType.keyType, False, name=\"key of map %s\" % name)\n        value_verifier = _make_type_verifier(\n            dataType.valueType, dataType.valueContainsNull, name=\"value of map %s\" % name)\n\n        def verify_map(obj):\n            assert_acceptable_types(obj)\n            verify_acceptable_types(obj)\n            for k, v in obj.items():\n                key_verifier(k)\n                value_verifier(v)\n\n        verify_value = verify_map\n\n    elif isinstance(dataType, StructType):\n        verifiers = []\n        for f in dataType.fields:\n            verifier = _make_type_verifier(f.dataType, f.nullable, name=new_name(f.name))\n            verifiers.append((f.name, verifier))\n\n        def verify_struct(obj):\n            assert_acceptable_types(obj)\n\n            if isinstance(obj, dict):\n                for f, verifier in verifiers:\n                    verifier(obj.get(f))\n            elif isinstance(obj, Row) and getattr(obj, \"__from_dict__\", False):\n                # the order in obj could be different than dataType.fields\n                for f, verifier in verifiers:\n                    verifier(obj[f])\n            elif isinstance(obj, (tuple, list)):\n                if len(obj) != len(verifiers):\n                    raise ValueError(\n                        new_msg(\"Length of object (%d) does not match with \"\n                                \"length of fields (%d)\" % (len(obj), len(verifiers))))\n                for v, (_, verifier) in zip(obj, verifiers):\n                    verifier(v)\n            elif hasattr(obj, \"__dict__\"):\n                d = obj.__dict__\n                for f, verifier in verifiers:\n                    verifier(d.get(f))\n            else:\n                raise TypeError(new_msg(\"StructType can not accept object %r in type %s\"\n                                        % (obj, type(obj))))\n        verify_value = verify_struct\n\n    else:\n        def verify_default(obj):\n            assert_acceptable_types(obj)\n            verify_acceptable_types(obj)\n\n        verify_value = verify_default\n\n    def verify(obj):\n        if not verify_nullability(obj):\n            verify_value(obj)\n\n    return verify", "language": "python", "code": "def _make_type_verifier(dataType, nullable=True, name=None):\n    \"\"\"\n    Make a verifier that checks the type of obj against dataType and raises a TypeError if they do\n    not match.\n\n    This verifier also checks the value of obj against datatype and raises a ValueError if it's not\n    within the allowed range, e.g. using 128 as ByteType will overflow. Note that, Python float is\n    not checked, so it will become infinity when cast to Java float if it overflows.\n\n    >>> _make_type_verifier(StructType([]))(None)\n    >>> _make_type_verifier(StringType())(\"\")\n    >>> _make_type_verifier(LongType())(0)\n    >>> _make_type_verifier(ArrayType(ShortType()))(list(range(3)))\n    >>> _make_type_verifier(ArrayType(StringType()))(set()) # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    TypeError:...\n    >>> _make_type_verifier(MapType(StringType(), IntegerType()))({})\n    >>> _make_type_verifier(StructType([]))(())\n    >>> _make_type_verifier(StructType([]))([])\n    >>> _make_type_verifier(StructType([]))([1]) # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValueError:...\n    >>> # Check if numeric values are within the allowed range.\n    >>> _make_type_verifier(ByteType())(12)\n    >>> _make_type_verifier(ByteType())(1234) # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValueError:...\n    >>> _make_type_verifier(ByteType(), False)(None) # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValueError:...\n    >>> _make_type_verifier(\n    ...     ArrayType(ShortType(), False))([1, None]) # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValueError:...\n    >>> _make_type_verifier(MapType(StringType(), IntegerType()))({None: 1})\n    Traceback (most recent call last):\n        ...\n    ValueError:...\n    >>> schema = StructType().add(\"a\", IntegerType()).add(\"b\", StringType(), False)\n    >>> _make_type_verifier(schema)((1, None)) # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValueError:...\n    \"\"\"\n\n    if name is None:\n        new_msg = lambda msg: msg\n        new_name = lambda n: \"field %s\" % n\n    else:\n        new_msg = lambda msg: \"%s: %s\" % (name, msg)\n        new_name = lambda n: \"field %s in %s\" % (n, name)\n\n    def verify_nullability(obj):\n        if obj is None:\n            if nullable:\n                return True\n            else:\n                raise ValueError(new_msg(\"This field is not nullable, but got None\"))\n        else:\n            return False\n\n    _type = type(dataType)\n\n    def assert_acceptable_types(obj):\n        assert _type in _acceptable_types, \\\n            new_msg(\"unknown datatype: %s for object %r\" % (dataType, obj))\n\n    def verify_acceptable_types(obj):\n        # subclass of them can not be fromInternal in JVM\n        if type(obj) not in _acceptable_types[_type]:\n            raise TypeError(new_msg(\"%s can not accept object %r in type %s\"\n                                    % (dataType, obj, type(obj))))\n\n    if isinstance(dataType, StringType):\n        # StringType can work with any types\n        verify_value = lambda _: _\n\n    elif isinstance(dataType, UserDefinedType):\n        verifier = _make_type_verifier(dataType.sqlType(), name=name)\n\n        def verify_udf(obj):\n            if not (hasattr(obj, '__UDT__') and obj.__UDT__ == dataType):\n                raise ValueError(new_msg(\"%r is not an instance of type %r\" % (obj, dataType)))\n            verifier(dataType.toInternal(obj))\n\n        verify_value = verify_udf\n\n    elif isinstance(dataType, ByteType):\n        def verify_byte(obj):\n            assert_acceptable_types(obj)\n            verify_acceptable_types(obj)\n            if obj < -128 or obj > 127:\n                raise ValueError(new_msg(\"object of ByteType out of range, got: %s\" % obj))\n\n        verify_value = verify_byte\n\n    elif isinstance(dataType, ShortType):\n        def verify_short(obj):\n            assert_acceptable_types(obj)\n            verify_acceptable_types(obj)\n            if obj < -32768 or obj > 32767:\n                raise ValueError(new_msg(\"object of ShortType out of range, got: %s\" % obj))\n\n        verify_value = verify_short\n\n    elif isinstance(dataType, IntegerType):\n        def verify_integer(obj):\n            assert_acceptable_types(obj)\n            verify_acceptable_types(obj)\n            if obj < -2147483648 or obj > 2147483647:\n                raise ValueError(\n                    new_msg(\"object of IntegerType out of range, got: %s\" % obj))\n\n        verify_value = verify_integer\n\n    elif isinstance(dataType, ArrayType):\n        element_verifier = _make_type_verifier(\n            dataType.elementType, dataType.containsNull, name=\"element in array %s\" % name)\n\n        def verify_array(obj):\n            assert_acceptable_types(obj)\n            verify_acceptable_types(obj)\n            for i in obj:\n                element_verifier(i)\n\n        verify_value = verify_array\n\n    elif isinstance(dataType, MapType):\n        key_verifier = _make_type_verifier(dataType.keyType, False, name=\"key of map %s\" % name)\n        value_verifier = _make_type_verifier(\n            dataType.valueType, dataType.valueContainsNull, name=\"value of map %s\" % name)\n\n        def verify_map(obj):\n            assert_acceptable_types(obj)\n            verify_acceptable_types(obj)\n            for k, v in obj.items():\n                key_verifier(k)\n                value_verifier(v)\n\n        verify_value = verify_map\n\n    elif isinstance(dataType, StructType):\n        verifiers = []\n        for f in dataType.fields:\n            verifier = _make_type_verifier(f.dataType, f.nullable, name=new_name(f.name))\n            verifiers.append((f.name, verifier))\n\n        def verify_struct(obj):\n            assert_acceptable_types(obj)\n\n            if isinstance(obj, dict):\n                for f, verifier in verifiers:\n                    verifier(obj.get(f))\n            elif isinstance(obj, Row) and getattr(obj, \"__from_dict__\", False):\n                # the order in obj could be different than dataType.fields\n                for f, verifier in verifiers:\n                    verifier(obj[f])\n            elif isinstance(obj, (tuple, list)):\n                if len(obj) != len(verifiers):\n                    raise ValueError(\n                        new_msg(\"Length of object (%d) does not match with \"\n                                \"length of fields (%d)\" % (len(obj), len(verifiers))))\n                for v, (_, verifier) in zip(obj, verifiers):\n                    verifier(v)\n            elif hasattr(obj, \"__dict__\"):\n                d = obj.__dict__\n                for f, verifier in verifiers:\n                    verifier(d.get(f))\n            else:\n                raise TypeError(new_msg(\"StructType can not accept object %r in type %s\"\n                                        % (obj, type(obj))))\n        verify_value = verify_struct\n\n    else:\n        def verify_default(obj):\n            assert_acceptable_types(obj)\n            verify_acceptable_types(obj)\n\n        verify_value = verify_default\n\n    def verify(obj):\n        if not verify_nullability(obj):\n            verify_value(obj)\n\n    return verify", "code_tokens": ["def", "_make_type_verifier", "(", "dataType", ",", "nullable", "=", "True", ",", "name", "=", "None", ")", ":", "if", "name", "is", "None", ":", "new_msg", "=", "lambda", "msg", ":", "msg", "new_name", "=", "lambda", "n", ":", "\"field %s\"", "%", "n", "else", ":", "new_msg", "=", "lambda", "msg", ":", "\"%s: %s\"", "%", "(", "name", ",", "msg", ")", "new_name", "=", "lambda", "n", ":", "\"field %s in %s\"", "%", "(", "n", ",", "name", ")", "def", "verify_nullability", "(", "obj", ")", ":", "if", "obj", "is", "None", ":", "if", "nullable", ":", "return", "True", "else", ":", "raise", "ValueError", "(", "new_msg", "(", "\"This field is not nullable, but got None\"", ")", ")", "else", ":", "return", "False", "_type", "=", "type", "(", "dataType", ")", "def", "assert_acceptable_types", "(", "obj", ")", ":", "assert", "_type", "in", "_acceptable_types", ",", "new_msg", "(", "\"unknown datatype: %s for object %r\"", "%", "(", "dataType", ",", "obj", ")", ")", "def", "verify_acceptable_types", "(", "obj", ")", ":", "# subclass of them can not be fromInternal in JVM", "if", "type", "(", "obj", ")", "not", "in", "_acceptable_types", "[", "_type", "]", ":", "raise", "TypeError", "(", "new_msg", "(", "\"%s can not accept object %r in type %s\"", "%", "(", "dataType", ",", "obj", ",", "type", "(", "obj", ")", ")", ")", ")", "if", "isinstance", "(", "dataType", ",", "StringType", ")", ":", "# StringType can work with any types", "verify_value", "=", "lambda", "_", ":", "_", "elif", "isinstance", "(", "dataType", ",", "UserDefinedType", ")", ":", "verifier", "=", "_make_type_verifier", "(", "dataType", ".", "sqlType", "(", ")", ",", "name", "=", "name", ")", "def", "verify_udf", "(", "obj", ")", ":", "if", "not", "(", "hasattr", "(", "obj", ",", "'__UDT__'", ")", "and", "obj", ".", "__UDT__", "==", "dataType", ")", ":", "raise", "ValueError", "(", "new_msg", "(", "\"%r is not an instance of type %r\"", "%", "(", "obj", ",", "dataType", ")", ")", ")", "verifier", "(", "dataType", ".", "toInternal", "(", "obj", ")", ")", "verify_value", "=", "verify_udf", "elif", "isinstance", "(", "dataType", ",", "ByteType", ")", ":", "def", "verify_byte", "(", "obj", ")", ":", "assert_acceptable_types", "(", "obj", ")", "verify_acceptable_types", "(", "obj", ")", "if", "obj", "<", "-", "128", "or", "obj", ">", "127", ":", "raise", "ValueError", "(", "new_msg", "(", "\"object of ByteType out of range, got: %s\"", "%", "obj", ")", ")", "verify_value", "=", "verify_byte", "elif", "isinstance", "(", "dataType", ",", "ShortType", ")", ":", "def", "verify_short", "(", "obj", ")", ":", "assert_acceptable_types", "(", "obj", ")", "verify_acceptable_types", "(", "obj", ")", "if", "obj", "<", "-", "32768", "or", "obj", ">", "32767", ":", "raise", "ValueError", "(", "new_msg", "(", "\"object of ShortType out of range, got: %s\"", "%", "obj", ")", ")", "verify_value", "=", "verify_short", "elif", "isinstance", "(", "dataType", ",", "IntegerType", ")", ":", "def", "verify_integer", "(", "obj", ")", ":", "assert_acceptable_types", "(", "obj", ")", "verify_acceptable_types", "(", "obj", ")", "if", "obj", "<", "-", "2147483648", "or", "obj", ">", "2147483647", ":", "raise", "ValueError", "(", "new_msg", "(", "\"object of IntegerType out of range, got: %s\"", "%", "obj", ")", ")", "verify_value", "=", "verify_integer", "elif", "isinstance", "(", "dataType", ",", "ArrayType", ")", ":", "element_verifier", "=", "_make_type_verifier", "(", "dataType", ".", "elementType", ",", "dataType", ".", "containsNull", ",", "name", "=", "\"element in array %s\"", "%", "name", ")", "def", "verify_array", "(", "obj", ")", ":", "assert_acceptable_types", "(", "obj", ")", "verify_acceptable_types", "(", "obj", ")", "for", "i", "in", "obj", ":", "element_verifier", "(", "i", ")", "verify_value", "=", "verify_array", "elif", "isinstance", "(", "dataType", ",", "MapType", ")", ":", "key_verifier", "=", "_make_type_verifier", "(", "dataType", ".", "keyType", ",", "False", ",", "name", "=", "\"key of map %s\"", "%", "name", ")", "value_verifier", "=", "_make_type_verifier", "(", "dataType", ".", "valueType", ",", "dataType", ".", "valueContainsNull", ",", "name", "=", "\"value of map %s\"", "%", "name", ")", "def", "verify_map", "(", "obj", ")", ":", "assert_acceptable_types", "(", "obj", ")", "verify_acceptable_types", "(", "obj", ")", "for", "k", ",", "v", "in", "obj", ".", "items", "(", ")", ":", "key_verifier", "(", "k", ")", "value_verifier", "(", "v", ")", "verify_value", "=", "verify_map", "elif", "isinstance", "(", "dataType", ",", "StructType", ")", ":", "verifiers", "=", "[", "]", "for", "f", "in", "dataType", ".", "fields", ":", "verifier", "=", "_make_type_verifier", "(", "f", ".", "dataType", ",", "f", ".", "nullable", ",", "name", "=", "new_name", "(", "f", ".", "name", ")", ")", "verifiers", ".", "append", "(", "(", "f", ".", "name", ",", "verifier", ")", ")", "def", "verify_struct", "(", "obj", ")", ":", "assert_acceptable_types", "(", "obj", ")", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "for", "f", ",", "verifier", "in", "verifiers", ":", "verifier", "(", "obj", ".", "get", "(", "f", ")", ")", "elif", "isinstance", "(", "obj", ",", "Row", ")", "and", "getattr", "(", "obj", ",", "\"__from_dict__\"", ",", "False", ")", ":", "# the order in obj could be different than dataType.fields", "for", "f", ",", "verifier", "in", "verifiers", ":", "verifier", "(", "obj", "[", "f", "]", ")", "elif", "isinstance", "(", "obj", ",", "(", "tuple", ",", "list", ")", ")", ":", "if", "len", "(", "obj", ")", "!=", "len", "(", "verifiers", ")", ":", "raise", "ValueError", "(", "new_msg", "(", "\"Length of object (%d) does not match with \"", "\"length of fields (%d)\"", "%", "(", "len", "(", "obj", ")", ",", "len", "(", "verifiers", ")", ")", ")", ")", "for", "v", ",", "(", "_", ",", "verifier", ")", "in", "zip", "(", "obj", ",", "verifiers", ")", ":", "verifier", "(", "v", ")", "elif", "hasattr", "(", "obj", ",", "\"__dict__\"", ")", ":", "d", "=", "obj", ".", "__dict__", "for", "f", ",", "verifier", "in", "verifiers", ":", "verifier", "(", "d", ".", "get", "(", "f", ")", ")", "else", ":", "raise", "TypeError", "(", "new_msg", "(", "\"StructType can not accept object %r in type %s\"", "%", "(", "obj", ",", "type", "(", "obj", ")", ")", ")", ")", "verify_value", "=", "verify_struct", "else", ":", "def", "verify_default", "(", "obj", ")", ":", "assert_acceptable_types", "(", "obj", ")", "verify_acceptable_types", "(", "obj", ")", "verify_value", "=", "verify_default", "def", "verify", "(", "obj", ")", ":", "if", "not", "verify_nullability", "(", "obj", ")", ":", "verify_value", "(", "obj", ")", "return", "verify"], "docstring": "Make a verifier that checks the type of obj against dataType and raises a TypeError if they do\n    not match.\n\n    This verifier also checks the value of obj against datatype and raises a ValueError if it's not\n    within the allowed range, e.g. using 128 as ByteType will overflow. Note that, Python float is\n    not checked, so it will become infinity when cast to Java float if it overflows.\n\n    >>> _make_type_verifier(StructType([]))(None)\n    >>> _make_type_verifier(StringType())(\"\")\n    >>> _make_type_verifier(LongType())(0)\n    >>> _make_type_verifier(ArrayType(ShortType()))(list(range(3)))\n    >>> _make_type_verifier(ArrayType(StringType()))(set()) # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    TypeError:...\n    >>> _make_type_verifier(MapType(StringType(), IntegerType()))({})\n    >>> _make_type_verifier(StructType([]))(())\n    >>> _make_type_verifier(StructType([]))([])\n    >>> _make_type_verifier(StructType([]))([1]) # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValueError:...\n    >>> # Check if numeric values are within the allowed range.\n    >>> _make_type_verifier(ByteType())(12)\n    >>> _make_type_verifier(ByteType())(1234) # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValueError:...\n    >>> _make_type_verifier(ByteType(), False)(None) # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValueError:...\n    >>> _make_type_verifier(\n    ...     ArrayType(ShortType(), False))([1, None]) # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValueError:...\n    >>> _make_type_verifier(MapType(StringType(), IntegerType()))({None: 1})\n    Traceback (most recent call last):\n        ...\n    ValueError:...\n    >>> schema = StructType().add(\"a\", IntegerType()).add(\"b\", StringType(), False)\n    >>> _make_type_verifier(schema)((1, None)) # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValueError:...", "docstring_tokens": ["Make", "a", "verifier", "that", "checks", "the", "type", "of", "obj", "against", "dataType", "and", "raises", "a", "TypeError", "if", "they", "do", "not", "match", "."], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/sql/types.py#L1202-L1391", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/sql/types.py", "func_name": "to_arrow_type", "original_string": "def to_arrow_type(dt):\n    \"\"\" Convert Spark data type to pyarrow type\n    \"\"\"\n    import pyarrow as pa\n    if type(dt) == BooleanType:\n        arrow_type = pa.bool_()\n    elif type(dt) == ByteType:\n        arrow_type = pa.int8()\n    elif type(dt) == ShortType:\n        arrow_type = pa.int16()\n    elif type(dt) == IntegerType:\n        arrow_type = pa.int32()\n    elif type(dt) == LongType:\n        arrow_type = pa.int64()\n    elif type(dt) == FloatType:\n        arrow_type = pa.float32()\n    elif type(dt) == DoubleType:\n        arrow_type = pa.float64()\n    elif type(dt) == DecimalType:\n        arrow_type = pa.decimal128(dt.precision, dt.scale)\n    elif type(dt) == StringType:\n        arrow_type = pa.string()\n    elif type(dt) == BinaryType:\n        arrow_type = pa.binary()\n    elif type(dt) == DateType:\n        arrow_type = pa.date32()\n    elif type(dt) == TimestampType:\n        # Timestamps should be in UTC, JVM Arrow timestamps require a timezone to be read\n        arrow_type = pa.timestamp('us', tz='UTC')\n    elif type(dt) == ArrayType:\n        if type(dt.elementType) in [StructType, TimestampType]:\n            raise TypeError(\"Unsupported type in conversion to Arrow: \" + str(dt))\n        arrow_type = pa.list_(to_arrow_type(dt.elementType))\n    elif type(dt) == StructType:\n        if any(type(field.dataType) == StructType for field in dt):\n            raise TypeError(\"Nested StructType not supported in conversion to Arrow\")\n        fields = [pa.field(field.name, to_arrow_type(field.dataType), nullable=field.nullable)\n                  for field in dt]\n        arrow_type = pa.struct(fields)\n    else:\n        raise TypeError(\"Unsupported type in conversion to Arrow: \" + str(dt))\n    return arrow_type", "language": "python", "code": "def to_arrow_type(dt):\n    \"\"\" Convert Spark data type to pyarrow type\n    \"\"\"\n    import pyarrow as pa\n    if type(dt) == BooleanType:\n        arrow_type = pa.bool_()\n    elif type(dt) == ByteType:\n        arrow_type = pa.int8()\n    elif type(dt) == ShortType:\n        arrow_type = pa.int16()\n    elif type(dt) == IntegerType:\n        arrow_type = pa.int32()\n    elif type(dt) == LongType:\n        arrow_type = pa.int64()\n    elif type(dt) == FloatType:\n        arrow_type = pa.float32()\n    elif type(dt) == DoubleType:\n        arrow_type = pa.float64()\n    elif type(dt) == DecimalType:\n        arrow_type = pa.decimal128(dt.precision, dt.scale)\n    elif type(dt) == StringType:\n        arrow_type = pa.string()\n    elif type(dt) == BinaryType:\n        arrow_type = pa.binary()\n    elif type(dt) == DateType:\n        arrow_type = pa.date32()\n    elif type(dt) == TimestampType:\n        # Timestamps should be in UTC, JVM Arrow timestamps require a timezone to be read\n        arrow_type = pa.timestamp('us', tz='UTC')\n    elif type(dt) == ArrayType:\n        if type(dt.elementType) in [StructType, TimestampType]:\n            raise TypeError(\"Unsupported type in conversion to Arrow: \" + str(dt))\n        arrow_type = pa.list_(to_arrow_type(dt.elementType))\n    elif type(dt) == StructType:\n        if any(type(field.dataType) == StructType for field in dt):\n            raise TypeError(\"Nested StructType not supported in conversion to Arrow\")\n        fields = [pa.field(field.name, to_arrow_type(field.dataType), nullable=field.nullable)\n                  for field in dt]\n        arrow_type = pa.struct(fields)\n    else:\n        raise TypeError(\"Unsupported type in conversion to Arrow: \" + str(dt))\n    return arrow_type", "code_tokens": ["def", "to_arrow_type", "(", "dt", ")", ":", "import", "pyarrow", "as", "pa", "if", "type", "(", "dt", ")", "==", "BooleanType", ":", "arrow_type", "=", "pa", ".", "bool_", "(", ")", "elif", "type", "(", "dt", ")", "==", "ByteType", ":", "arrow_type", "=", "pa", ".", "int8", "(", ")", "elif", "type", "(", "dt", ")", "==", "ShortType", ":", "arrow_type", "=", "pa", ".", "int16", "(", ")", "elif", "type", "(", "dt", ")", "==", "IntegerType", ":", "arrow_type", "=", "pa", ".", "int32", "(", ")", "elif", "type", "(", "dt", ")", "==", "LongType", ":", "arrow_type", "=", "pa", ".", "int64", "(", ")", "elif", "type", "(", "dt", ")", "==", "FloatType", ":", "arrow_type", "=", "pa", ".", "float32", "(", ")", "elif", "type", "(", "dt", ")", "==", "DoubleType", ":", "arrow_type", "=", "pa", ".", "float64", "(", ")", "elif", "type", "(", "dt", ")", "==", "DecimalType", ":", "arrow_type", "=", "pa", ".", "decimal128", "(", "dt", ".", "precision", ",", "dt", ".", "scale", ")", "elif", "type", "(", "dt", ")", "==", "StringType", ":", "arrow_type", "=", "pa", ".", "string", "(", ")", "elif", "type", "(", "dt", ")", "==", "BinaryType", ":", "arrow_type", "=", "pa", ".", "binary", "(", ")", "elif", "type", "(", "dt", ")", "==", "DateType", ":", "arrow_type", "=", "pa", ".", "date32", "(", ")", "elif", "type", "(", "dt", ")", "==", "TimestampType", ":", "# Timestamps should be in UTC, JVM Arrow timestamps require a timezone to be read", "arrow_type", "=", "pa", ".", "timestamp", "(", "'us'", ",", "tz", "=", "'UTC'", ")", "elif", "type", "(", "dt", ")", "==", "ArrayType", ":", "if", "type", "(", "dt", ".", "elementType", ")", "in", "[", "StructType", ",", "TimestampType", "]", ":", "raise", "TypeError", "(", "\"Unsupported type in conversion to Arrow: \"", "+", "str", "(", "dt", ")", ")", "arrow_type", "=", "pa", ".", "list_", "(", "to_arrow_type", "(", "dt", ".", "elementType", ")", ")", "elif", "type", "(", "dt", ")", "==", "StructType", ":", "if", "any", "(", "type", "(", "field", ".", "dataType", ")", "==", "StructType", "for", "field", "in", "dt", ")", ":", "raise", "TypeError", "(", "\"Nested StructType not supported in conversion to Arrow\"", ")", "fields", "=", "[", "pa", ".", "field", "(", "field", ".", "name", ",", "to_arrow_type", "(", "field", ".", "dataType", ")", ",", "nullable", "=", "field", ".", "nullable", ")", "for", "field", "in", "dt", "]", "arrow_type", "=", "pa", ".", "struct", "(", "fields", ")", "else", ":", "raise", "TypeError", "(", "\"Unsupported type in conversion to Arrow: \"", "+", "str", "(", "dt", ")", ")", "return", "arrow_type"], "docstring": "Convert Spark data type to pyarrow type", "docstring_tokens": ["Convert", "Spark", "data", "type", "to", "pyarrow", "type"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/sql/types.py#L1581-L1622", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/sql/types.py", "func_name": "to_arrow_schema", "original_string": "def to_arrow_schema(schema):\n    \"\"\" Convert a schema from Spark to Arrow\n    \"\"\"\n    import pyarrow as pa\n    fields = [pa.field(field.name, to_arrow_type(field.dataType), nullable=field.nullable)\n              for field in schema]\n    return pa.schema(fields)", "language": "python", "code": "def to_arrow_schema(schema):\n    \"\"\" Convert a schema from Spark to Arrow\n    \"\"\"\n    import pyarrow as pa\n    fields = [pa.field(field.name, to_arrow_type(field.dataType), nullable=field.nullable)\n              for field in schema]\n    return pa.schema(fields)", "code_tokens": ["def", "to_arrow_schema", "(", "schema", ")", ":", "import", "pyarrow", "as", "pa", "fields", "=", "[", "pa", ".", "field", "(", "field", ".", "name", ",", "to_arrow_type", "(", "field", ".", "dataType", ")", ",", "nullable", "=", "field", ".", "nullable", ")", "for", "field", "in", "schema", "]", "return", "pa", ".", "schema", "(", "fields", ")"], "docstring": "Convert a schema from Spark to Arrow", "docstring_tokens": ["Convert", "a", "schema", "from", "Spark", "to", "Arrow"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/sql/types.py#L1625-L1631", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/sql/types.py", "func_name": "from_arrow_type", "original_string": "def from_arrow_type(at):\n    \"\"\" Convert pyarrow type to Spark data type.\n    \"\"\"\n    import pyarrow.types as types\n    if types.is_boolean(at):\n        spark_type = BooleanType()\n    elif types.is_int8(at):\n        spark_type = ByteType()\n    elif types.is_int16(at):\n        spark_type = ShortType()\n    elif types.is_int32(at):\n        spark_type = IntegerType()\n    elif types.is_int64(at):\n        spark_type = LongType()\n    elif types.is_float32(at):\n        spark_type = FloatType()\n    elif types.is_float64(at):\n        spark_type = DoubleType()\n    elif types.is_decimal(at):\n        spark_type = DecimalType(precision=at.precision, scale=at.scale)\n    elif types.is_string(at):\n        spark_type = StringType()\n    elif types.is_binary(at):\n        spark_type = BinaryType()\n    elif types.is_date32(at):\n        spark_type = DateType()\n    elif types.is_timestamp(at):\n        spark_type = TimestampType()\n    elif types.is_list(at):\n        if types.is_timestamp(at.value_type):\n            raise TypeError(\"Unsupported type in conversion from Arrow: \" + str(at))\n        spark_type = ArrayType(from_arrow_type(at.value_type))\n    elif types.is_struct(at):\n        if any(types.is_struct(field.type) for field in at):\n            raise TypeError(\"Nested StructType not supported in conversion from Arrow: \" + str(at))\n        return StructType(\n            [StructField(field.name, from_arrow_type(field.type), nullable=field.nullable)\n             for field in at])\n    else:\n        raise TypeError(\"Unsupported type in conversion from Arrow: \" + str(at))\n    return spark_type", "language": "python", "code": "def from_arrow_type(at):\n    \"\"\" Convert pyarrow type to Spark data type.\n    \"\"\"\n    import pyarrow.types as types\n    if types.is_boolean(at):\n        spark_type = BooleanType()\n    elif types.is_int8(at):\n        spark_type = ByteType()\n    elif types.is_int16(at):\n        spark_type = ShortType()\n    elif types.is_int32(at):\n        spark_type = IntegerType()\n    elif types.is_int64(at):\n        spark_type = LongType()\n    elif types.is_float32(at):\n        spark_type = FloatType()\n    elif types.is_float64(at):\n        spark_type = DoubleType()\n    elif types.is_decimal(at):\n        spark_type = DecimalType(precision=at.precision, scale=at.scale)\n    elif types.is_string(at):\n        spark_type = StringType()\n    elif types.is_binary(at):\n        spark_type = BinaryType()\n    elif types.is_date32(at):\n        spark_type = DateType()\n    elif types.is_timestamp(at):\n        spark_type = TimestampType()\n    elif types.is_list(at):\n        if types.is_timestamp(at.value_type):\n            raise TypeError(\"Unsupported type in conversion from Arrow: \" + str(at))\n        spark_type = ArrayType(from_arrow_type(at.value_type))\n    elif types.is_struct(at):\n        if any(types.is_struct(field.type) for field in at):\n            raise TypeError(\"Nested StructType not supported in conversion from Arrow: \" + str(at))\n        return StructType(\n            [StructField(field.name, from_arrow_type(field.type), nullable=field.nullable)\n             for field in at])\n    else:\n        raise TypeError(\"Unsupported type in conversion from Arrow: \" + str(at))\n    return spark_type", "code_tokens": ["def", "from_arrow_type", "(", "at", ")", ":", "import", "pyarrow", ".", "types", "as", "types", "if", "types", ".", "is_boolean", "(", "at", ")", ":", "spark_type", "=", "BooleanType", "(", ")", "elif", "types", ".", "is_int8", "(", "at", ")", ":", "spark_type", "=", "ByteType", "(", ")", "elif", "types", ".", "is_int16", "(", "at", ")", ":", "spark_type", "=", "ShortType", "(", ")", "elif", "types", ".", "is_int32", "(", "at", ")", ":", "spark_type", "=", "IntegerType", "(", ")", "elif", "types", ".", "is_int64", "(", "at", ")", ":", "spark_type", "=", "LongType", "(", ")", "elif", "types", ".", "is_float32", "(", "at", ")", ":", "spark_type", "=", "FloatType", "(", ")", "elif", "types", ".", "is_float64", "(", "at", ")", ":", "spark_type", "=", "DoubleType", "(", ")", "elif", "types", ".", "is_decimal", "(", "at", ")", ":", "spark_type", "=", "DecimalType", "(", "precision", "=", "at", ".", "precision", ",", "scale", "=", "at", ".", "scale", ")", "elif", "types", ".", "is_string", "(", "at", ")", ":", "spark_type", "=", "StringType", "(", ")", "elif", "types", ".", "is_binary", "(", "at", ")", ":", "spark_type", "=", "BinaryType", "(", ")", "elif", "types", ".", "is_date32", "(", "at", ")", ":", "spark_type", "=", "DateType", "(", ")", "elif", "types", ".", "is_timestamp", "(", "at", ")", ":", "spark_type", "=", "TimestampType", "(", ")", "elif", "types", ".", "is_list", "(", "at", ")", ":", "if", "types", ".", "is_timestamp", "(", "at", ".", "value_type", ")", ":", "raise", "TypeError", "(", "\"Unsupported type in conversion from Arrow: \"", "+", "str", "(", "at", ")", ")", "spark_type", "=", "ArrayType", "(", "from_arrow_type", "(", "at", ".", "value_type", ")", ")", "elif", "types", ".", "is_struct", "(", "at", ")", ":", "if", "any", "(", "types", ".", "is_struct", "(", "field", ".", "type", ")", "for", "field", "in", "at", ")", ":", "raise", "TypeError", "(", "\"Nested StructType not supported in conversion from Arrow: \"", "+", "str", "(", "at", ")", ")", "return", "StructType", "(", "[", "StructField", "(", "field", ".", "name", ",", "from_arrow_type", "(", "field", ".", "type", ")", ",", "nullable", "=", "field", ".", "nullable", ")", "for", "field", "in", "at", "]", ")", "else", ":", "raise", "TypeError", "(", "\"Unsupported type in conversion from Arrow: \"", "+", "str", "(", "at", ")", ")", "return", "spark_type"], "docstring": "Convert pyarrow type to Spark data type.", "docstring_tokens": ["Convert", "pyarrow", "type", "to", "Spark", "data", "type", "."], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/sql/types.py#L1634-L1674", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/sql/types.py", "func_name": "from_arrow_schema", "original_string": "def from_arrow_schema(arrow_schema):\n    \"\"\" Convert schema from Arrow to Spark.\n    \"\"\"\n    return StructType(\n        [StructField(field.name, from_arrow_type(field.type), nullable=field.nullable)\n         for field in arrow_schema])", "language": "python", "code": "def from_arrow_schema(arrow_schema):\n    \"\"\" Convert schema from Arrow to Spark.\n    \"\"\"\n    return StructType(\n        [StructField(field.name, from_arrow_type(field.type), nullable=field.nullable)\n         for field in arrow_schema])", "code_tokens": ["def", "from_arrow_schema", "(", "arrow_schema", ")", ":", "return", "StructType", "(", "[", "StructField", "(", "field", ".", "name", ",", "from_arrow_type", "(", "field", ".", "type", ")", ",", "nullable", "=", "field", ".", "nullable", ")", "for", "field", "in", "arrow_schema", "]", ")"], "docstring": "Convert schema from Arrow to Spark.", "docstring_tokens": ["Convert", "schema", "from", "Arrow", "to", "Spark", "."], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/sql/types.py#L1677-L1682", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/sql/types.py", "func_name": "_check_series_localize_timestamps", "original_string": "def _check_series_localize_timestamps(s, timezone):\n    \"\"\"\n    Convert timezone aware timestamps to timezone-naive in the specified timezone or local timezone.\n\n    If the input series is not a timestamp series, then the same series is returned. If the input\n    series is a timestamp series, then a converted series is returned.\n\n    :param s: pandas.Series\n    :param timezone: the timezone to convert. if None then use local timezone\n    :return pandas.Series that have been converted to tz-naive\n    \"\"\"\n    from pyspark.sql.utils import require_minimum_pandas_version\n    require_minimum_pandas_version()\n\n    from pandas.api.types import is_datetime64tz_dtype\n    tz = timezone or _get_local_timezone()\n    # TODO: handle nested timestamps, such as ArrayType(TimestampType())?\n    if is_datetime64tz_dtype(s.dtype):\n        return s.dt.tz_convert(tz).dt.tz_localize(None)\n    else:\n        return s", "language": "python", "code": "def _check_series_localize_timestamps(s, timezone):\n    \"\"\"\n    Convert timezone aware timestamps to timezone-naive in the specified timezone or local timezone.\n\n    If the input series is not a timestamp series, then the same series is returned. If the input\n    series is a timestamp series, then a converted series is returned.\n\n    :param s: pandas.Series\n    :param timezone: the timezone to convert. if None then use local timezone\n    :return pandas.Series that have been converted to tz-naive\n    \"\"\"\n    from pyspark.sql.utils import require_minimum_pandas_version\n    require_minimum_pandas_version()\n\n    from pandas.api.types import is_datetime64tz_dtype\n    tz = timezone or _get_local_timezone()\n    # TODO: handle nested timestamps, such as ArrayType(TimestampType())?\n    if is_datetime64tz_dtype(s.dtype):\n        return s.dt.tz_convert(tz).dt.tz_localize(None)\n    else:\n        return s", "code_tokens": ["def", "_check_series_localize_timestamps", "(", "s", ",", "timezone", ")", ":", "from", "pyspark", ".", "sql", ".", "utils", "import", "require_minimum_pandas_version", "require_minimum_pandas_version", "(", ")", "from", "pandas", ".", "api", ".", "types", "import", "is_datetime64tz_dtype", "tz", "=", "timezone", "or", "_get_local_timezone", "(", ")", "# TODO: handle nested timestamps, such as ArrayType(TimestampType())?", "if", "is_datetime64tz_dtype", "(", "s", ".", "dtype", ")", ":", "return", "s", ".", "dt", ".", "tz_convert", "(", "tz", ")", ".", "dt", ".", "tz_localize", "(", "None", ")", "else", ":", "return", "s"], "docstring": "Convert timezone aware timestamps to timezone-naive in the specified timezone or local timezone.\n\n    If the input series is not a timestamp series, then the same series is returned. If the input\n    series is a timestamp series, then a converted series is returned.\n\n    :param s: pandas.Series\n    :param timezone: the timezone to convert. if None then use local timezone\n    :return pandas.Series that have been converted to tz-naive", "docstring_tokens": ["Convert", "timezone", "aware", "timestamps", "to", "timezone", "-", "naive", "in", "the", "specified", "timezone", "or", "local", "timezone", "."], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/sql/types.py#L1700-L1720", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/sql/types.py", "func_name": "_check_dataframe_localize_timestamps", "original_string": "def _check_dataframe_localize_timestamps(pdf, timezone):\n    \"\"\"\n    Convert timezone aware timestamps to timezone-naive in the specified timezone or local timezone\n\n    :param pdf: pandas.DataFrame\n    :param timezone: the timezone to convert. if None then use local timezone\n    :return pandas.DataFrame where any timezone aware columns have been converted to tz-naive\n    \"\"\"\n    from pyspark.sql.utils import require_minimum_pandas_version\n    require_minimum_pandas_version()\n\n    for column, series in pdf.iteritems():\n        pdf[column] = _check_series_localize_timestamps(series, timezone)\n    return pdf", "language": "python", "code": "def _check_dataframe_localize_timestamps(pdf, timezone):\n    \"\"\"\n    Convert timezone aware timestamps to timezone-naive in the specified timezone or local timezone\n\n    :param pdf: pandas.DataFrame\n    :param timezone: the timezone to convert. if None then use local timezone\n    :return pandas.DataFrame where any timezone aware columns have been converted to tz-naive\n    \"\"\"\n    from pyspark.sql.utils import require_minimum_pandas_version\n    require_minimum_pandas_version()\n\n    for column, series in pdf.iteritems():\n        pdf[column] = _check_series_localize_timestamps(series, timezone)\n    return pdf", "code_tokens": ["def", "_check_dataframe_localize_timestamps", "(", "pdf", ",", "timezone", ")", ":", "from", "pyspark", ".", "sql", ".", "utils", "import", "require_minimum_pandas_version", "require_minimum_pandas_version", "(", ")", "for", "column", ",", "series", "in", "pdf", ".", "iteritems", "(", ")", ":", "pdf", "[", "column", "]", "=", "_check_series_localize_timestamps", "(", "series", ",", "timezone", ")", "return", "pdf"], "docstring": "Convert timezone aware timestamps to timezone-naive in the specified timezone or local timezone\n\n    :param pdf: pandas.DataFrame\n    :param timezone: the timezone to convert. if None then use local timezone\n    :return pandas.DataFrame where any timezone aware columns have been converted to tz-naive", "docstring_tokens": ["Convert", "timezone", "aware", "timestamps", "to", "timezone", "-", "naive", "in", "the", "specified", "timezone", "or", "local", "timezone"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/sql/types.py#L1723-L1736", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/sql/types.py", "func_name": "_check_series_convert_timestamps_internal", "original_string": "def _check_series_convert_timestamps_internal(s, timezone):\n    \"\"\"\n    Convert a tz-naive timestamp in the specified timezone or local timezone to UTC normalized for\n    Spark internal storage\n\n    :param s: a pandas.Series\n    :param timezone: the timezone to convert. if None then use local timezone\n    :return pandas.Series where if it is a timestamp, has been UTC normalized without a time zone\n    \"\"\"\n    from pyspark.sql.utils import require_minimum_pandas_version\n    require_minimum_pandas_version()\n\n    from pandas.api.types import is_datetime64_dtype, is_datetime64tz_dtype\n    # TODO: handle nested timestamps, such as ArrayType(TimestampType())?\n    if is_datetime64_dtype(s.dtype):\n        # When tz_localize a tz-naive timestamp, the result is ambiguous if the tz-naive\n        # timestamp is during the hour when the clock is adjusted backward during due to\n        # daylight saving time (dst).\n        # E.g., for America/New_York, the clock is adjusted backward on 2015-11-01 2:00 to\n        # 2015-11-01 1:00 from dst-time to standard time, and therefore, when tz_localize\n        # a tz-naive timestamp 2015-11-01 1:30 with America/New_York timezone, it can be either\n        # dst time (2015-01-01 1:30-0400) or standard time (2015-11-01 1:30-0500).\n        #\n        # Here we explicit choose to use standard time. This matches the default behavior of\n        # pytz.\n        #\n        # Here are some code to help understand this behavior:\n        # >>> import datetime\n        # >>> import pandas as pd\n        # >>> import pytz\n        # >>>\n        # >>> t = datetime.datetime(2015, 11, 1, 1, 30)\n        # >>> ts = pd.Series([t])\n        # >>> tz = pytz.timezone('America/New_York')\n        # >>>\n        # >>> ts.dt.tz_localize(tz, ambiguous=True)\n        # 0   2015-11-01 01:30:00-04:00\n        # dtype: datetime64[ns, America/New_York]\n        # >>>\n        # >>> ts.dt.tz_localize(tz, ambiguous=False)\n        # 0   2015-11-01 01:30:00-05:00\n        # dtype: datetime64[ns, America/New_York]\n        # >>>\n        # >>> str(tz.localize(t))\n        # '2015-11-01 01:30:00-05:00'\n        tz = timezone or _get_local_timezone()\n        return s.dt.tz_localize(tz, ambiguous=False).dt.tz_convert('UTC')\n    elif is_datetime64tz_dtype(s.dtype):\n        return s.dt.tz_convert('UTC')\n    else:\n        return s", "language": "python", "code": "def _check_series_convert_timestamps_internal(s, timezone):\n    \"\"\"\n    Convert a tz-naive timestamp in the specified timezone or local timezone to UTC normalized for\n    Spark internal storage\n\n    :param s: a pandas.Series\n    :param timezone: the timezone to convert. if None then use local timezone\n    :return pandas.Series where if it is a timestamp, has been UTC normalized without a time zone\n    \"\"\"\n    from pyspark.sql.utils import require_minimum_pandas_version\n    require_minimum_pandas_version()\n\n    from pandas.api.types import is_datetime64_dtype, is_datetime64tz_dtype\n    # TODO: handle nested timestamps, such as ArrayType(TimestampType())?\n    if is_datetime64_dtype(s.dtype):\n        # When tz_localize a tz-naive timestamp, the result is ambiguous if the tz-naive\n        # timestamp is during the hour when the clock is adjusted backward during due to\n        # daylight saving time (dst).\n        # E.g., for America/New_York, the clock is adjusted backward on 2015-11-01 2:00 to\n        # 2015-11-01 1:00 from dst-time to standard time, and therefore, when tz_localize\n        # a tz-naive timestamp 2015-11-01 1:30 with America/New_York timezone, it can be either\n        # dst time (2015-01-01 1:30-0400) or standard time (2015-11-01 1:30-0500).\n        #\n        # Here we explicit choose to use standard time. This matches the default behavior of\n        # pytz.\n        #\n        # Here are some code to help understand this behavior:\n        # >>> import datetime\n        # >>> import pandas as pd\n        # >>> import pytz\n        # >>>\n        # >>> t = datetime.datetime(2015, 11, 1, 1, 30)\n        # >>> ts = pd.Series([t])\n        # >>> tz = pytz.timezone('America/New_York')\n        # >>>\n        # >>> ts.dt.tz_localize(tz, ambiguous=True)\n        # 0   2015-11-01 01:30:00-04:00\n        # dtype: datetime64[ns, America/New_York]\n        # >>>\n        # >>> ts.dt.tz_localize(tz, ambiguous=False)\n        # 0   2015-11-01 01:30:00-05:00\n        # dtype: datetime64[ns, America/New_York]\n        # >>>\n        # >>> str(tz.localize(t))\n        # '2015-11-01 01:30:00-05:00'\n        tz = timezone or _get_local_timezone()\n        return s.dt.tz_localize(tz, ambiguous=False).dt.tz_convert('UTC')\n    elif is_datetime64tz_dtype(s.dtype):\n        return s.dt.tz_convert('UTC')\n    else:\n        return s", "code_tokens": ["def", "_check_series_convert_timestamps_internal", "(", "s", ",", "timezone", ")", ":", "from", "pyspark", ".", "sql", ".", "utils", "import", "require_minimum_pandas_version", "require_minimum_pandas_version", "(", ")", "from", "pandas", ".", "api", ".", "types", "import", "is_datetime64_dtype", ",", "is_datetime64tz_dtype", "# TODO: handle nested timestamps, such as ArrayType(TimestampType())?", "if", "is_datetime64_dtype", "(", "s", ".", "dtype", ")", ":", "# When tz_localize a tz-naive timestamp, the result is ambiguous if the tz-naive", "# timestamp is during the hour when the clock is adjusted backward during due to", "# daylight saving time (dst).", "# E.g., for America/New_York, the clock is adjusted backward on 2015-11-01 2:00 to", "# 2015-11-01 1:00 from dst-time to standard time, and therefore, when tz_localize", "# a tz-naive timestamp 2015-11-01 1:30 with America/New_York timezone, it can be either", "# dst time (2015-01-01 1:30-0400) or standard time (2015-11-01 1:30-0500).", "#", "# Here we explicit choose to use standard time. This matches the default behavior of", "# pytz.", "#", "# Here are some code to help understand this behavior:", "# >>> import datetime", "# >>> import pandas as pd", "# >>> import pytz", "# >>>", "# >>> t = datetime.datetime(2015, 11, 1, 1, 30)", "# >>> ts = pd.Series([t])", "# >>> tz = pytz.timezone('America/New_York')", "# >>>", "# >>> ts.dt.tz_localize(tz, ambiguous=True)", "# 0   2015-11-01 01:30:00-04:00", "# dtype: datetime64[ns, America/New_York]", "# >>>", "# >>> ts.dt.tz_localize(tz, ambiguous=False)", "# 0   2015-11-01 01:30:00-05:00", "# dtype: datetime64[ns, America/New_York]", "# >>>", "# >>> str(tz.localize(t))", "# '2015-11-01 01:30:00-05:00'", "tz", "=", "timezone", "or", "_get_local_timezone", "(", ")", "return", "s", ".", "dt", ".", "tz_localize", "(", "tz", ",", "ambiguous", "=", "False", ")", ".", "dt", ".", "tz_convert", "(", "'UTC'", ")", "elif", "is_datetime64tz_dtype", "(", "s", ".", "dtype", ")", ":", "return", "s", ".", "dt", ".", "tz_convert", "(", "'UTC'", ")", "else", ":", "return", "s"], "docstring": "Convert a tz-naive timestamp in the specified timezone or local timezone to UTC normalized for\n    Spark internal storage\n\n    :param s: a pandas.Series\n    :param timezone: the timezone to convert. if None then use local timezone\n    :return pandas.Series where if it is a timestamp, has been UTC normalized without a time zone", "docstring_tokens": ["Convert", "a", "tz", "-", "naive", "timestamp", "in", "the", "specified", "timezone", "or", "local", "timezone", "to", "UTC", "normalized", "for", "Spark", "internal", "storage"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/sql/types.py#L1739-L1789", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/sql/types.py", "func_name": "_check_series_convert_timestamps_localize", "original_string": "def _check_series_convert_timestamps_localize(s, from_timezone, to_timezone):\n    \"\"\"\n    Convert timestamp to timezone-naive in the specified timezone or local timezone\n\n    :param s: a pandas.Series\n    :param from_timezone: the timezone to convert from. if None then use local timezone\n    :param to_timezone: the timezone to convert to. if None then use local timezone\n    :return pandas.Series where if it is a timestamp, has been converted to tz-naive\n    \"\"\"\n    from pyspark.sql.utils import require_minimum_pandas_version\n    require_minimum_pandas_version()\n\n    import pandas as pd\n    from pandas.api.types import is_datetime64tz_dtype, is_datetime64_dtype\n    from_tz = from_timezone or _get_local_timezone()\n    to_tz = to_timezone or _get_local_timezone()\n    # TODO: handle nested timestamps, such as ArrayType(TimestampType())?\n    if is_datetime64tz_dtype(s.dtype):\n        return s.dt.tz_convert(to_tz).dt.tz_localize(None)\n    elif is_datetime64_dtype(s.dtype) and from_tz != to_tz:\n        # `s.dt.tz_localize('tzlocal()')` doesn't work properly when including NaT.\n        return s.apply(\n            lambda ts: ts.tz_localize(from_tz, ambiguous=False).tz_convert(to_tz).tz_localize(None)\n            if ts is not pd.NaT else pd.NaT)\n    else:\n        return s", "language": "python", "code": "def _check_series_convert_timestamps_localize(s, from_timezone, to_timezone):\n    \"\"\"\n    Convert timestamp to timezone-naive in the specified timezone or local timezone\n\n    :param s: a pandas.Series\n    :param from_timezone: the timezone to convert from. if None then use local timezone\n    :param to_timezone: the timezone to convert to. if None then use local timezone\n    :return pandas.Series where if it is a timestamp, has been converted to tz-naive\n    \"\"\"\n    from pyspark.sql.utils import require_minimum_pandas_version\n    require_minimum_pandas_version()\n\n    import pandas as pd\n    from pandas.api.types import is_datetime64tz_dtype, is_datetime64_dtype\n    from_tz = from_timezone or _get_local_timezone()\n    to_tz = to_timezone or _get_local_timezone()\n    # TODO: handle nested timestamps, such as ArrayType(TimestampType())?\n    if is_datetime64tz_dtype(s.dtype):\n        return s.dt.tz_convert(to_tz).dt.tz_localize(None)\n    elif is_datetime64_dtype(s.dtype) and from_tz != to_tz:\n        # `s.dt.tz_localize('tzlocal()')` doesn't work properly when including NaT.\n        return s.apply(\n            lambda ts: ts.tz_localize(from_tz, ambiguous=False).tz_convert(to_tz).tz_localize(None)\n            if ts is not pd.NaT else pd.NaT)\n    else:\n        return s", "code_tokens": ["def", "_check_series_convert_timestamps_localize", "(", "s", ",", "from_timezone", ",", "to_timezone", ")", ":", "from", "pyspark", ".", "sql", ".", "utils", "import", "require_minimum_pandas_version", "require_minimum_pandas_version", "(", ")", "import", "pandas", "as", "pd", "from", "pandas", ".", "api", ".", "types", "import", "is_datetime64tz_dtype", ",", "is_datetime64_dtype", "from_tz", "=", "from_timezone", "or", "_get_local_timezone", "(", ")", "to_tz", "=", "to_timezone", "or", "_get_local_timezone", "(", ")", "# TODO: handle nested timestamps, such as ArrayType(TimestampType())?", "if", "is_datetime64tz_dtype", "(", "s", ".", "dtype", ")", ":", "return", "s", ".", "dt", ".", "tz_convert", "(", "to_tz", ")", ".", "dt", ".", "tz_localize", "(", "None", ")", "elif", "is_datetime64_dtype", "(", "s", ".", "dtype", ")", "and", "from_tz", "!=", "to_tz", ":", "# `s.dt.tz_localize('tzlocal()')` doesn't work properly when including NaT.", "return", "s", ".", "apply", "(", "lambda", "ts", ":", "ts", ".", "tz_localize", "(", "from_tz", ",", "ambiguous", "=", "False", ")", ".", "tz_convert", "(", "to_tz", ")", ".", "tz_localize", "(", "None", ")", "if", "ts", "is", "not", "pd", ".", "NaT", "else", "pd", ".", "NaT", ")", "else", ":", "return", "s"], "docstring": "Convert timestamp to timezone-naive in the specified timezone or local timezone\n\n    :param s: a pandas.Series\n    :param from_timezone: the timezone to convert from. if None then use local timezone\n    :param to_timezone: the timezone to convert to. if None then use local timezone\n    :return pandas.Series where if it is a timestamp, has been converted to tz-naive", "docstring_tokens": ["Convert", "timestamp", "to", "timezone", "-", "naive", "in", "the", "specified", "timezone", "or", "local", "timezone"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/sql/types.py#L1792-L1817", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/sql/types.py", "func_name": "StructType.add", "original_string": "def add(self, field, data_type=None, nullable=True, metadata=None):\n        \"\"\"\n        Construct a StructType by adding new elements to it to define the schema. The method accepts\n        either:\n\n            a) A single parameter which is a StructField object.\n            b) Between 2 and 4 parameters as (name, data_type, nullable (optional),\n               metadata(optional). The data_type parameter may be either a String or a\n               DataType object.\n\n        >>> struct1 = StructType().add(\"f1\", StringType(), True).add(\"f2\", StringType(), True, None)\n        >>> struct2 = StructType([StructField(\"f1\", StringType(), True), \\\\\n        ...     StructField(\"f2\", StringType(), True, None)])\n        >>> struct1 == struct2\n        True\n        >>> struct1 = StructType().add(StructField(\"f1\", StringType(), True))\n        >>> struct2 = StructType([StructField(\"f1\", StringType(), True)])\n        >>> struct1 == struct2\n        True\n        >>> struct1 = StructType().add(\"f1\", \"string\", True)\n        >>> struct2 = StructType([StructField(\"f1\", StringType(), True)])\n        >>> struct1 == struct2\n        True\n\n        :param field: Either the name of the field or a StructField object\n        :param data_type: If present, the DataType of the StructField to create\n        :param nullable: Whether the field to add should be nullable (default True)\n        :param metadata: Any additional metadata (default None)\n        :return: a new updated StructType\n        \"\"\"\n        if isinstance(field, StructField):\n            self.fields.append(field)\n            self.names.append(field.name)\n        else:\n            if isinstance(field, str) and data_type is None:\n                raise ValueError(\"Must specify DataType if passing name of struct_field to create.\")\n\n            if isinstance(data_type, str):\n                data_type_f = _parse_datatype_json_value(data_type)\n            else:\n                data_type_f = data_type\n            self.fields.append(StructField(field, data_type_f, nullable, metadata))\n            self.names.append(field)\n        # Precalculated list of fields that need conversion with fromInternal/toInternal functions\n        self._needConversion = [f.needConversion() for f in self]\n        self._needSerializeAnyField = any(self._needConversion)\n        return self", "language": "python", "code": "def add(self, field, data_type=None, nullable=True, metadata=None):\n        \"\"\"\n        Construct a StructType by adding new elements to it to define the schema. The method accepts\n        either:\n\n            a) A single parameter which is a StructField object.\n            b) Between 2 and 4 parameters as (name, data_type, nullable (optional),\n               metadata(optional). The data_type parameter may be either a String or a\n               DataType object.\n\n        >>> struct1 = StructType().add(\"f1\", StringType(), True).add(\"f2\", StringType(), True, None)\n        >>> struct2 = StructType([StructField(\"f1\", StringType(), True), \\\\\n        ...     StructField(\"f2\", StringType(), True, None)])\n        >>> struct1 == struct2\n        True\n        >>> struct1 = StructType().add(StructField(\"f1\", StringType(), True))\n        >>> struct2 = StructType([StructField(\"f1\", StringType(), True)])\n        >>> struct1 == struct2\n        True\n        >>> struct1 = StructType().add(\"f1\", \"string\", True)\n        >>> struct2 = StructType([StructField(\"f1\", StringType(), True)])\n        >>> struct1 == struct2\n        True\n\n        :param field: Either the name of the field or a StructField object\n        :param data_type: If present, the DataType of the StructField to create\n        :param nullable: Whether the field to add should be nullable (default True)\n        :param metadata: Any additional metadata (default None)\n        :return: a new updated StructType\n        \"\"\"\n        if isinstance(field, StructField):\n            self.fields.append(field)\n            self.names.append(field.name)\n        else:\n            if isinstance(field, str) and data_type is None:\n                raise ValueError(\"Must specify DataType if passing name of struct_field to create.\")\n\n            if isinstance(data_type, str):\n                data_type_f = _parse_datatype_json_value(data_type)\n            else:\n                data_type_f = data_type\n            self.fields.append(StructField(field, data_type_f, nullable, metadata))\n            self.names.append(field)\n        # Precalculated list of fields that need conversion with fromInternal/toInternal functions\n        self._needConversion = [f.needConversion() for f in self]\n        self._needSerializeAnyField = any(self._needConversion)\n        return self", "code_tokens": ["def", "add", "(", "self", ",", "field", ",", "data_type", "=", "None", ",", "nullable", "=", "True", ",", "metadata", "=", "None", ")", ":", "if", "isinstance", "(", "field", ",", "StructField", ")", ":", "self", ".", "fields", ".", "append", "(", "field", ")", "self", ".", "names", ".", "append", "(", "field", ".", "name", ")", "else", ":", "if", "isinstance", "(", "field", ",", "str", ")", "and", "data_type", "is", "None", ":", "raise", "ValueError", "(", "\"Must specify DataType if passing name of struct_field to create.\"", ")", "if", "isinstance", "(", "data_type", ",", "str", ")", ":", "data_type_f", "=", "_parse_datatype_json_value", "(", "data_type", ")", "else", ":", "data_type_f", "=", "data_type", "self", ".", "fields", ".", "append", "(", "StructField", "(", "field", ",", "data_type_f", ",", "nullable", ",", "metadata", ")", ")", "self", ".", "names", ".", "append", "(", "field", ")", "# Precalculated list of fields that need conversion with fromInternal/toInternal functions", "self", ".", "_needConversion", "=", "[", "f", ".", "needConversion", "(", ")", "for", "f", "in", "self", "]", "self", ".", "_needSerializeAnyField", "=", "any", "(", "self", ".", "_needConversion", ")", "return", "self"], "docstring": "Construct a StructType by adding new elements to it to define the schema. The method accepts\n        either:\n\n            a) A single parameter which is a StructField object.\n            b) Between 2 and 4 parameters as (name, data_type, nullable (optional),\n               metadata(optional). The data_type parameter may be either a String or a\n               DataType object.\n\n        >>> struct1 = StructType().add(\"f1\", StringType(), True).add(\"f2\", StringType(), True, None)\n        >>> struct2 = StructType([StructField(\"f1\", StringType(), True), \\\\\n        ...     StructField(\"f2\", StringType(), True, None)])\n        >>> struct1 == struct2\n        True\n        >>> struct1 = StructType().add(StructField(\"f1\", StringType(), True))\n        >>> struct2 = StructType([StructField(\"f1\", StringType(), True)])\n        >>> struct1 == struct2\n        True\n        >>> struct1 = StructType().add(\"f1\", \"string\", True)\n        >>> struct2 = StructType([StructField(\"f1\", StringType(), True)])\n        >>> struct1 == struct2\n        True\n\n        :param field: Either the name of the field or a StructField object\n        :param data_type: If present, the DataType of the StructField to create\n        :param nullable: Whether the field to add should be nullable (default True)\n        :param metadata: Any additional metadata (default None)\n        :return: a new updated StructType", "docstring_tokens": ["Construct", "a", "StructType", "by", "adding", "new", "elements", "to", "it", "to", "define", "the", "schema", ".", "The", "method", "accepts", "either", ":"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/sql/types.py#L491-L537", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/sql/types.py", "func_name": "UserDefinedType._cachedSqlType", "original_string": "def _cachedSqlType(cls):\n        \"\"\"\n        Cache the sqlType() into class, because it's heavy used in `toInternal`.\n        \"\"\"\n        if not hasattr(cls, \"_cached_sql_type\"):\n            cls._cached_sql_type = cls.sqlType()\n        return cls._cached_sql_type", "language": "python", "code": "def _cachedSqlType(cls):\n        \"\"\"\n        Cache the sqlType() into class, because it's heavy used in `toInternal`.\n        \"\"\"\n        if not hasattr(cls, \"_cached_sql_type\"):\n            cls._cached_sql_type = cls.sqlType()\n        return cls._cached_sql_type", "code_tokens": ["def", "_cachedSqlType", "(", "cls", ")", ":", "if", "not", "hasattr", "(", "cls", ",", "\"_cached_sql_type\"", ")", ":", "cls", ".", "_cached_sql_type", "=", "cls", ".", "sqlType", "(", ")", "return", "cls", ".", "_cached_sql_type"], "docstring": "Cache the sqlType() into class, because it's heavy used in `toInternal`.", "docstring_tokens": ["Cache", "the", "sqlType", "()", "into", "class", "because", "it", "s", "heavy", "used", "in", "toInternal", "."], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/sql/types.py#L675-L681", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/sql/types.py", "func_name": "Row.asDict", "original_string": "def asDict(self, recursive=False):\n        \"\"\"\n        Return as an dict\n\n        :param recursive: turns the nested Row as dict (default: False).\n\n        >>> Row(name=\"Alice\", age=11).asDict() == {'name': 'Alice', 'age': 11}\n        True\n        >>> row = Row(key=1, value=Row(name='a', age=2))\n        >>> row.asDict() == {'key': 1, 'value': Row(age=2, name='a')}\n        True\n        >>> row.asDict(True) == {'key': 1, 'value': {'name': 'a', 'age': 2}}\n        True\n        \"\"\"\n        if not hasattr(self, \"__fields__\"):\n            raise TypeError(\"Cannot convert a Row class into dict\")\n\n        if recursive:\n            def conv(obj):\n                if isinstance(obj, Row):\n                    return obj.asDict(True)\n                elif isinstance(obj, list):\n                    return [conv(o) for o in obj]\n                elif isinstance(obj, dict):\n                    return dict((k, conv(v)) for k, v in obj.items())\n                else:\n                    return obj\n            return dict(zip(self.__fields__, (conv(o) for o in self)))\n        else:\n            return dict(zip(self.__fields__, self))", "language": "python", "code": "def asDict(self, recursive=False):\n        \"\"\"\n        Return as an dict\n\n        :param recursive: turns the nested Row as dict (default: False).\n\n        >>> Row(name=\"Alice\", age=11).asDict() == {'name': 'Alice', 'age': 11}\n        True\n        >>> row = Row(key=1, value=Row(name='a', age=2))\n        >>> row.asDict() == {'key': 1, 'value': Row(age=2, name='a')}\n        True\n        >>> row.asDict(True) == {'key': 1, 'value': {'name': 'a', 'age': 2}}\n        True\n        \"\"\"\n        if not hasattr(self, \"__fields__\"):\n            raise TypeError(\"Cannot convert a Row class into dict\")\n\n        if recursive:\n            def conv(obj):\n                if isinstance(obj, Row):\n                    return obj.asDict(True)\n                elif isinstance(obj, list):\n                    return [conv(o) for o in obj]\n                elif isinstance(obj, dict):\n                    return dict((k, conv(v)) for k, v in obj.items())\n                else:\n                    return obj\n            return dict(zip(self.__fields__, (conv(o) for o in self)))\n        else:\n            return dict(zip(self.__fields__, self))", "code_tokens": ["def", "asDict", "(", "self", ",", "recursive", "=", "False", ")", ":", "if", "not", "hasattr", "(", "self", ",", "\"__fields__\"", ")", ":", "raise", "TypeError", "(", "\"Cannot convert a Row class into dict\"", ")", "if", "recursive", ":", "def", "conv", "(", "obj", ")", ":", "if", "isinstance", "(", "obj", ",", "Row", ")", ":", "return", "obj", ".", "asDict", "(", "True", ")", "elif", "isinstance", "(", "obj", ",", "list", ")", ":", "return", "[", "conv", "(", "o", ")", "for", "o", "in", "obj", "]", "elif", "isinstance", "(", "obj", ",", "dict", ")", ":", "return", "dict", "(", "(", "k", ",", "conv", "(", "v", ")", ")", "for", "k", ",", "v", "in", "obj", ".", "items", "(", ")", ")", "else", ":", "return", "obj", "return", "dict", "(", "zip", "(", "self", ".", "__fields__", ",", "(", "conv", "(", "o", ")", "for", "o", "in", "self", ")", ")", ")", "else", ":", "return", "dict", "(", "zip", "(", "self", ".", "__fields__", ",", "self", ")", ")"], "docstring": "Return as an dict\n\n        :param recursive: turns the nested Row as dict (default: False).\n\n        >>> Row(name=\"Alice\", age=11).asDict() == {'name': 'Alice', 'age': 11}\n        True\n        >>> row = Row(key=1, value=Row(name='a', age=2))\n        >>> row.asDict() == {'key': 1, 'value': Row(age=2, name='a')}\n        True\n        >>> row.asDict(True) == {'key': 1, 'value': {'name': 'a', 'age': 2}}\n        True", "docstring_tokens": ["Return", "as", "an", "dict"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/sql/types.py#L1463-L1492", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/ml/regression.py", "func_name": "LinearRegressionModel.summary", "original_string": "def summary(self):\n        \"\"\"\n        Gets summary (e.g. residuals, mse, r-squared ) of model on\n        training set. An exception is thrown if\n        `trainingSummary is None`.\n        \"\"\"\n        if self.hasSummary:\n            return LinearRegressionTrainingSummary(super(LinearRegressionModel, self).summary)\n        else:\n            raise RuntimeError(\"No training summary available for this %s\" %\n                               self.__class__.__name__)", "language": "python", "code": "def summary(self):\n        \"\"\"\n        Gets summary (e.g. residuals, mse, r-squared ) of model on\n        training set. An exception is thrown if\n        `trainingSummary is None`.\n        \"\"\"\n        if self.hasSummary:\n            return LinearRegressionTrainingSummary(super(LinearRegressionModel, self).summary)\n        else:\n            raise RuntimeError(\"No training summary available for this %s\" %\n                               self.__class__.__name__)", "code_tokens": ["def", "summary", "(", "self", ")", ":", "if", "self", ".", "hasSummary", ":", "return", "LinearRegressionTrainingSummary", "(", "super", "(", "LinearRegressionModel", ",", "self", ")", ".", "summary", ")", "else", ":", "raise", "RuntimeError", "(", "\"No training summary available for this %s\"", "%", "self", ".", "__class__", ".", "__name__", ")"], "docstring": "Gets summary (e.g. residuals, mse, r-squared ) of model on\n        training set. An exception is thrown if\n        `trainingSummary is None`.", "docstring_tokens": ["Gets", "summary", "(", "e", ".", "g", ".", "residuals", "mse", "r", "-", "squared", ")", "of", "model", "on", "training", "set", ".", "An", "exception", "is", "thrown", "if", "trainingSummary", "is", "None", "."], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/ml/regression.py#L198-L208", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/ml/regression.py", "func_name": "LinearRegressionModel.evaluate", "original_string": "def evaluate(self, dataset):\n        \"\"\"\n        Evaluates the model on a test dataset.\n\n        :param dataset:\n          Test dataset to evaluate model on, where dataset is an\n          instance of :py:class:`pyspark.sql.DataFrame`\n        \"\"\"\n        if not isinstance(dataset, DataFrame):\n            raise ValueError(\"dataset must be a DataFrame but got %s.\" % type(dataset))\n        java_lr_summary = self._call_java(\"evaluate\", dataset)\n        return LinearRegressionSummary(java_lr_summary)", "language": "python", "code": "def evaluate(self, dataset):\n        \"\"\"\n        Evaluates the model on a test dataset.\n\n        :param dataset:\n          Test dataset to evaluate model on, where dataset is an\n          instance of :py:class:`pyspark.sql.DataFrame`\n        \"\"\"\n        if not isinstance(dataset, DataFrame):\n            raise ValueError(\"dataset must be a DataFrame but got %s.\" % type(dataset))\n        java_lr_summary = self._call_java(\"evaluate\", dataset)\n        return LinearRegressionSummary(java_lr_summary)", "code_tokens": ["def", "evaluate", "(", "self", ",", "dataset", ")", ":", "if", "not", "isinstance", "(", "dataset", ",", "DataFrame", ")", ":", "raise", "ValueError", "(", "\"dataset must be a DataFrame but got %s.\"", "%", "type", "(", "dataset", ")", ")", "java_lr_summary", "=", "self", ".", "_call_java", "(", "\"evaluate\"", ",", "dataset", ")", "return", "LinearRegressionSummary", "(", "java_lr_summary", ")"], "docstring": "Evaluates the model on a test dataset.\n\n        :param dataset:\n          Test dataset to evaluate model on, where dataset is an\n          instance of :py:class:`pyspark.sql.DataFrame`", "docstring_tokens": ["Evaluates", "the", "model", "on", "a", "test", "dataset", "."], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/ml/regression.py#L211-L222", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/ml/regression.py", "func_name": "GeneralizedLinearRegressionModel.summary", "original_string": "def summary(self):\n        \"\"\"\n        Gets summary (e.g. residuals, deviance, pValues) of model on\n        training set. An exception is thrown if\n        `trainingSummary is None`.\n        \"\"\"\n        if self.hasSummary:\n            return GeneralizedLinearRegressionTrainingSummary(\n                super(GeneralizedLinearRegressionModel, self).summary)\n        else:\n            raise RuntimeError(\"No training summary available for this %s\" %\n                               self.__class__.__name__)", "language": "python", "code": "def summary(self):\n        \"\"\"\n        Gets summary (e.g. residuals, deviance, pValues) of model on\n        training set. An exception is thrown if\n        `trainingSummary is None`.\n        \"\"\"\n        if self.hasSummary:\n            return GeneralizedLinearRegressionTrainingSummary(\n                super(GeneralizedLinearRegressionModel, self).summary)\n        else:\n            raise RuntimeError(\"No training summary available for this %s\" %\n                               self.__class__.__name__)", "code_tokens": ["def", "summary", "(", "self", ")", ":", "if", "self", ".", "hasSummary", ":", "return", "GeneralizedLinearRegressionTrainingSummary", "(", "super", "(", "GeneralizedLinearRegressionModel", ",", "self", ")", ".", "summary", ")", "else", ":", "raise", "RuntimeError", "(", "\"No training summary available for this %s\"", "%", "self", ".", "__class__", ".", "__name__", ")"], "docstring": "Gets summary (e.g. residuals, deviance, pValues) of model on\n        training set. An exception is thrown if\n        `trainingSummary is None`.", "docstring_tokens": ["Gets", "summary", "(", "e", ".", "g", ".", "residuals", "deviance", "pValues", ")", "of", "model", "on", "training", "set", ".", "An", "exception", "is", "thrown", "if", "trainingSummary", "is", "None", "."], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/ml/regression.py#L1679-L1690", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/ml/regression.py", "func_name": "GeneralizedLinearRegressionModel.evaluate", "original_string": "def evaluate(self, dataset):\n        \"\"\"\n        Evaluates the model on a test dataset.\n\n        :param dataset:\n          Test dataset to evaluate model on, where dataset is an\n          instance of :py:class:`pyspark.sql.DataFrame`\n        \"\"\"\n        if not isinstance(dataset, DataFrame):\n            raise ValueError(\"dataset must be a DataFrame but got %s.\" % type(dataset))\n        java_glr_summary = self._call_java(\"evaluate\", dataset)\n        return GeneralizedLinearRegressionSummary(java_glr_summary)", "language": "python", "code": "def evaluate(self, dataset):\n        \"\"\"\n        Evaluates the model on a test dataset.\n\n        :param dataset:\n          Test dataset to evaluate model on, where dataset is an\n          instance of :py:class:`pyspark.sql.DataFrame`\n        \"\"\"\n        if not isinstance(dataset, DataFrame):\n            raise ValueError(\"dataset must be a DataFrame but got %s.\" % type(dataset))\n        java_glr_summary = self._call_java(\"evaluate\", dataset)\n        return GeneralizedLinearRegressionSummary(java_glr_summary)", "code_tokens": ["def", "evaluate", "(", "self", ",", "dataset", ")", ":", "if", "not", "isinstance", "(", "dataset", ",", "DataFrame", ")", ":", "raise", "ValueError", "(", "\"dataset must be a DataFrame but got %s.\"", "%", "type", "(", "dataset", ")", ")", "java_glr_summary", "=", "self", ".", "_call_java", "(", "\"evaluate\"", ",", "dataset", ")", "return", "GeneralizedLinearRegressionSummary", "(", "java_glr_summary", ")"], "docstring": "Evaluates the model on a test dataset.\n\n        :param dataset:\n          Test dataset to evaluate model on, where dataset is an\n          instance of :py:class:`pyspark.sql.DataFrame`", "docstring_tokens": ["Evaluates", "the", "model", "on", "a", "test", "dataset", "."], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/ml/regression.py#L1693-L1704", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/shuffle.py", "func_name": "_get_local_dirs", "original_string": "def _get_local_dirs(sub):\n    \"\"\" Get all the directories \"\"\"\n    path = os.environ.get(\"SPARK_LOCAL_DIRS\", \"/tmp\")\n    dirs = path.split(\",\")\n    if len(dirs) > 1:\n        # different order in different processes and instances\n        rnd = random.Random(os.getpid() + id(dirs))\n        random.shuffle(dirs, rnd.random)\n    return [os.path.join(d, \"python\", str(os.getpid()), sub) for d in dirs]", "language": "python", "code": "def _get_local_dirs(sub):\n    \"\"\" Get all the directories \"\"\"\n    path = os.environ.get(\"SPARK_LOCAL_DIRS\", \"/tmp\")\n    dirs = path.split(\",\")\n    if len(dirs) > 1:\n        # different order in different processes and instances\n        rnd = random.Random(os.getpid() + id(dirs))\n        random.shuffle(dirs, rnd.random)\n    return [os.path.join(d, \"python\", str(os.getpid()), sub) for d in dirs]", "code_tokens": ["def", "_get_local_dirs", "(", "sub", ")", ":", "path", "=", "os", ".", "environ", ".", "get", "(", "\"SPARK_LOCAL_DIRS\"", ",", "\"/tmp\"", ")", "dirs", "=", "path", ".", "split", "(", "\",\"", ")", "if", "len", "(", "dirs", ")", ">", "1", ":", "# different order in different processes and instances", "rnd", "=", "random", ".", "Random", "(", "os", ".", "getpid", "(", ")", "+", "id", "(", "dirs", ")", ")", "random", ".", "shuffle", "(", "dirs", ",", "rnd", ".", "random", ")", "return", "[", "os", ".", "path", ".", "join", "(", "d", ",", "\"python\"", ",", "str", "(", "os", ".", "getpid", "(", ")", ")", ",", "sub", ")", "for", "d", "in", "dirs", "]"], "docstring": "Get all the directories", "docstring_tokens": ["Get", "all", "the", "directories"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/shuffle.py#L71-L79", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/shuffle.py", "func_name": "ExternalMerger._get_spill_dir", "original_string": "def _get_spill_dir(self, n):\n        \"\"\" Choose one directory for spill by number n \"\"\"\n        return os.path.join(self.localdirs[n % len(self.localdirs)], str(n))", "language": "python", "code": "def _get_spill_dir(self, n):\n        \"\"\" Choose one directory for spill by number n \"\"\"\n        return os.path.join(self.localdirs[n % len(self.localdirs)], str(n))", "code_tokens": ["def", "_get_spill_dir", "(", "self", ",", "n", ")", ":", "return", "os", ".", "path", ".", "join", "(", "self", ".", "localdirs", "[", "n", "%", "len", "(", "self", ".", "localdirs", ")", "]", ",", "str", "(", "n", ")", ")"], "docstring": "Choose one directory for spill by number n", "docstring_tokens": ["Choose", "one", "directory", "for", "spill", "by", "number", "n"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/shuffle.py#L219-L221", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/shuffle.py", "func_name": "ExternalMerger.mergeValues", "original_string": "def mergeValues(self, iterator):\n        \"\"\" Combine the items by creator and combiner \"\"\"\n        # speedup attribute lookup\n        creator, comb = self.agg.createCombiner, self.agg.mergeValue\n        c, data, pdata, hfun, batch = 0, self.data, self.pdata, self._partition, self.batch\n        limit = self.memory_limit\n\n        for k, v in iterator:\n            d = pdata[hfun(k)] if pdata else data\n            d[k] = comb(d[k], v) if k in d else creator(v)\n\n            c += 1\n            if c >= batch:\n                if get_used_memory() >= limit:\n                    self._spill()\n                    limit = self._next_limit()\n                    batch /= 2\n                    c = 0\n                else:\n                    batch *= 1.5\n\n        if get_used_memory() >= limit:\n            self._spill()", "language": "python", "code": "def mergeValues(self, iterator):\n        \"\"\" Combine the items by creator and combiner \"\"\"\n        # speedup attribute lookup\n        creator, comb = self.agg.createCombiner, self.agg.mergeValue\n        c, data, pdata, hfun, batch = 0, self.data, self.pdata, self._partition, self.batch\n        limit = self.memory_limit\n\n        for k, v in iterator:\n            d = pdata[hfun(k)] if pdata else data\n            d[k] = comb(d[k], v) if k in d else creator(v)\n\n            c += 1\n            if c >= batch:\n                if get_used_memory() >= limit:\n                    self._spill()\n                    limit = self._next_limit()\n                    batch /= 2\n                    c = 0\n                else:\n                    batch *= 1.5\n\n        if get_used_memory() >= limit:\n            self._spill()", "code_tokens": ["def", "mergeValues", "(", "self", ",", "iterator", ")", ":", "# speedup attribute lookup", "creator", ",", "comb", "=", "self", ".", "agg", ".", "createCombiner", ",", "self", ".", "agg", ".", "mergeValue", "c", ",", "data", ",", "pdata", ",", "hfun", ",", "batch", "=", "0", ",", "self", ".", "data", ",", "self", ".", "pdata", ",", "self", ".", "_partition", ",", "self", ".", "batch", "limit", "=", "self", ".", "memory_limit", "for", "k", ",", "v", "in", "iterator", ":", "d", "=", "pdata", "[", "hfun", "(", "k", ")", "]", "if", "pdata", "else", "data", "d", "[", "k", "]", "=", "comb", "(", "d", "[", "k", "]", ",", "v", ")", "if", "k", "in", "d", "else", "creator", "(", "v", ")", "c", "+=", "1", "if", "c", ">=", "batch", ":", "if", "get_used_memory", "(", ")", ">=", "limit", ":", "self", ".", "_spill", "(", ")", "limit", "=", "self", ".", "_next_limit", "(", ")", "batch", "/=", "2", "c", "=", "0", "else", ":", "batch", "*=", "1.5", "if", "get_used_memory", "(", ")", ">=", "limit", ":", "self", ".", "_spill", "(", ")"], "docstring": "Combine the items by creator and combiner", "docstring_tokens": ["Combine", "the", "items", "by", "creator", "and", "combiner"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/shuffle.py#L231-L253", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/shuffle.py", "func_name": "ExternalMerger.mergeCombiners", "original_string": "def mergeCombiners(self, iterator, limit=None):\n        \"\"\" Merge (K,V) pair by mergeCombiner \"\"\"\n        if limit is None:\n            limit = self.memory_limit\n        # speedup attribute lookup\n        comb, hfun, objsize = self.agg.mergeCombiners, self._partition, self._object_size\n        c, data, pdata, batch = 0, self.data, self.pdata, self.batch\n        for k, v in iterator:\n            d = pdata[hfun(k)] if pdata else data\n            d[k] = comb(d[k], v) if k in d else v\n            if not limit:\n                continue\n\n            c += objsize(v)\n            if c > batch:\n                if get_used_memory() > limit:\n                    self._spill()\n                    limit = self._next_limit()\n                    batch /= 2\n                    c = 0\n                else:\n                    batch *= 1.5\n\n        if limit and get_used_memory() >= limit:\n            self._spill()", "language": "python", "code": "def mergeCombiners(self, iterator, limit=None):\n        \"\"\" Merge (K,V) pair by mergeCombiner \"\"\"\n        if limit is None:\n            limit = self.memory_limit\n        # speedup attribute lookup\n        comb, hfun, objsize = self.agg.mergeCombiners, self._partition, self._object_size\n        c, data, pdata, batch = 0, self.data, self.pdata, self.batch\n        for k, v in iterator:\n            d = pdata[hfun(k)] if pdata else data\n            d[k] = comb(d[k], v) if k in d else v\n            if not limit:\n                continue\n\n            c += objsize(v)\n            if c > batch:\n                if get_used_memory() > limit:\n                    self._spill()\n                    limit = self._next_limit()\n                    batch /= 2\n                    c = 0\n                else:\n                    batch *= 1.5\n\n        if limit and get_used_memory() >= limit:\n            self._spill()", "code_tokens": ["def", "mergeCombiners", "(", "self", ",", "iterator", ",", "limit", "=", "None", ")", ":", "if", "limit", "is", "None", ":", "limit", "=", "self", ".", "memory_limit", "# speedup attribute lookup", "comb", ",", "hfun", ",", "objsize", "=", "self", ".", "agg", ".", "mergeCombiners", ",", "self", ".", "_partition", ",", "self", ".", "_object_size", "c", ",", "data", ",", "pdata", ",", "batch", "=", "0", ",", "self", ".", "data", ",", "self", ".", "pdata", ",", "self", ".", "batch", "for", "k", ",", "v", "in", "iterator", ":", "d", "=", "pdata", "[", "hfun", "(", "k", ")", "]", "if", "pdata", "else", "data", "d", "[", "k", "]", "=", "comb", "(", "d", "[", "k", "]", ",", "v", ")", "if", "k", "in", "d", "else", "v", "if", "not", "limit", ":", "continue", "c", "+=", "objsize", "(", "v", ")", "if", "c", ">", "batch", ":", "if", "get_used_memory", "(", ")", ">", "limit", ":", "self", ".", "_spill", "(", ")", "limit", "=", "self", ".", "_next_limit", "(", ")", "batch", "/=", "2", "c", "=", "0", "else", ":", "batch", "*=", "1.5", "if", "limit", "and", "get_used_memory", "(", ")", ">=", "limit", ":", "self", ".", "_spill", "(", ")"], "docstring": "Merge (K,V) pair by mergeCombiner", "docstring_tokens": ["Merge", "(", "K", "V", ")", "pair", "by", "mergeCombiner"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/shuffle.py#L265-L289", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/shuffle.py", "func_name": "ExternalMerger._spill", "original_string": "def _spill(self):\n        \"\"\"\n        dump already partitioned data into disks.\n\n        It will dump the data in batch for better performance.\n        \"\"\"\n        global MemoryBytesSpilled, DiskBytesSpilled\n        path = self._get_spill_dir(self.spills)\n        if not os.path.exists(path):\n            os.makedirs(path)\n\n        used_memory = get_used_memory()\n        if not self.pdata:\n            # The data has not been partitioned, it will iterator the\n            # dataset once, write them into different files, has no\n            # additional memory. It only called when the memory goes\n            # above limit at the first time.\n\n            # open all the files for writing\n            streams = [open(os.path.join(path, str(i)), 'wb')\n                       for i in range(self.partitions)]\n\n            for k, v in self.data.items():\n                h = self._partition(k)\n                # put one item in batch, make it compatible with load_stream\n                # it will increase the memory if dump them in batch\n                self.serializer.dump_stream([(k, v)], streams[h])\n\n            for s in streams:\n                DiskBytesSpilled += s.tell()\n                s.close()\n\n            self.data.clear()\n            self.pdata.extend([{} for i in range(self.partitions)])\n\n        else:\n            for i in range(self.partitions):\n                p = os.path.join(path, str(i))\n                with open(p, \"wb\") as f:\n                    # dump items in batch\n                    self.serializer.dump_stream(iter(self.pdata[i].items()), f)\n                self.pdata[i].clear()\n                DiskBytesSpilled += os.path.getsize(p)\n\n        self.spills += 1\n        gc.collect()  # release the memory as much as possible\n        MemoryBytesSpilled += max(used_memory - get_used_memory(), 0) << 20", "language": "python", "code": "def _spill(self):\n        \"\"\"\n        dump already partitioned data into disks.\n\n        It will dump the data in batch for better performance.\n        \"\"\"\n        global MemoryBytesSpilled, DiskBytesSpilled\n        path = self._get_spill_dir(self.spills)\n        if not os.path.exists(path):\n            os.makedirs(path)\n\n        used_memory = get_used_memory()\n        if not self.pdata:\n            # The data has not been partitioned, it will iterator the\n            # dataset once, write them into different files, has no\n            # additional memory. It only called when the memory goes\n            # above limit at the first time.\n\n            # open all the files for writing\n            streams = [open(os.path.join(path, str(i)), 'wb')\n                       for i in range(self.partitions)]\n\n            for k, v in self.data.items():\n                h = self._partition(k)\n                # put one item in batch, make it compatible with load_stream\n                # it will increase the memory if dump them in batch\n                self.serializer.dump_stream([(k, v)], streams[h])\n\n            for s in streams:\n                DiskBytesSpilled += s.tell()\n                s.close()\n\n            self.data.clear()\n            self.pdata.extend([{} for i in range(self.partitions)])\n\n        else:\n            for i in range(self.partitions):\n                p = os.path.join(path, str(i))\n                with open(p, \"wb\") as f:\n                    # dump items in batch\n                    self.serializer.dump_stream(iter(self.pdata[i].items()), f)\n                self.pdata[i].clear()\n                DiskBytesSpilled += os.path.getsize(p)\n\n        self.spills += 1\n        gc.collect()  # release the memory as much as possible\n        MemoryBytesSpilled += max(used_memory - get_used_memory(), 0) << 20", "code_tokens": ["def", "_spill", "(", "self", ")", ":", "global", "MemoryBytesSpilled", ",", "DiskBytesSpilled", "path", "=", "self", ".", "_get_spill_dir", "(", "self", ".", "spills", ")", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "os", ".", "makedirs", "(", "path", ")", "used_memory", "=", "get_used_memory", "(", ")", "if", "not", "self", ".", "pdata", ":", "# The data has not been partitioned, it will iterator the", "# dataset once, write them into different files, has no", "# additional memory. It only called when the memory goes", "# above limit at the first time.", "# open all the files for writing", "streams", "=", "[", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "str", "(", "i", ")", ")", ",", "'wb'", ")", "for", "i", "in", "range", "(", "self", ".", "partitions", ")", "]", "for", "k", ",", "v", "in", "self", ".", "data", ".", "items", "(", ")", ":", "h", "=", "self", ".", "_partition", "(", "k", ")", "# put one item in batch, make it compatible with load_stream", "# it will increase the memory if dump them in batch", "self", ".", "serializer", ".", "dump_stream", "(", "[", "(", "k", ",", "v", ")", "]", ",", "streams", "[", "h", "]", ")", "for", "s", "in", "streams", ":", "DiskBytesSpilled", "+=", "s", ".", "tell", "(", ")", "s", ".", "close", "(", ")", "self", ".", "data", ".", "clear", "(", ")", "self", ".", "pdata", ".", "extend", "(", "[", "{", "}", "for", "i", "in", "range", "(", "self", ".", "partitions", ")", "]", ")", "else", ":", "for", "i", "in", "range", "(", "self", ".", "partitions", ")", ":", "p", "=", "os", ".", "path", ".", "join", "(", "path", ",", "str", "(", "i", ")", ")", "with", "open", "(", "p", ",", "\"wb\"", ")", "as", "f", ":", "# dump items in batch", "self", ".", "serializer", ".", "dump_stream", "(", "iter", "(", "self", ".", "pdata", "[", "i", "]", ".", "items", "(", ")", ")", ",", "f", ")", "self", ".", "pdata", "[", "i", "]", ".", "clear", "(", ")", "DiskBytesSpilled", "+=", "os", ".", "path", ".", "getsize", "(", "p", ")", "self", ".", "spills", "+=", "1", "gc", ".", "collect", "(", ")", "# release the memory as much as possible", "MemoryBytesSpilled", "+=", "max", "(", "used_memory", "-", "get_used_memory", "(", ")", ",", "0", ")", "<<", "20"], "docstring": "dump already partitioned data into disks.\n\n        It will dump the data in batch for better performance.", "docstring_tokens": ["dump", "already", "partitioned", "data", "into", "disks", "."], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/shuffle.py#L291-L337", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/shuffle.py", "func_name": "ExternalMerger.items", "original_string": "def items(self):\n        \"\"\" Return all merged items as iterator \"\"\"\n        if not self.pdata and not self.spills:\n            return iter(self.data.items())\n        return self._external_items()", "language": "python", "code": "def items(self):\n        \"\"\" Return all merged items as iterator \"\"\"\n        if not self.pdata and not self.spills:\n            return iter(self.data.items())\n        return self._external_items()", "code_tokens": ["def", "items", "(", "self", ")", ":", "if", "not", "self", ".", "pdata", "and", "not", "self", ".", "spills", ":", "return", "iter", "(", "self", ".", "data", ".", "items", "(", ")", ")", "return", "self", ".", "_external_items", "(", ")"], "docstring": "Return all merged items as iterator", "docstring_tokens": ["Return", "all", "merged", "items", "as", "iterator"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/shuffle.py#L339-L343", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/shuffle.py", "func_name": "ExternalMerger._external_items", "original_string": "def _external_items(self):\n        \"\"\" Return all partitioned items as iterator \"\"\"\n        assert not self.data\n        if any(self.pdata):\n            self._spill()\n        # disable partitioning and spilling when merge combiners from disk\n        self.pdata = []\n\n        try:\n            for i in range(self.partitions):\n                for v in self._merged_items(i):\n                    yield v\n                self.data.clear()\n\n                # remove the merged partition\n                for j in range(self.spills):\n                    path = self._get_spill_dir(j)\n                    os.remove(os.path.join(path, str(i)))\n        finally:\n            self._cleanup()", "language": "python", "code": "def _external_items(self):\n        \"\"\" Return all partitioned items as iterator \"\"\"\n        assert not self.data\n        if any(self.pdata):\n            self._spill()\n        # disable partitioning and spilling when merge combiners from disk\n        self.pdata = []\n\n        try:\n            for i in range(self.partitions):\n                for v in self._merged_items(i):\n                    yield v\n                self.data.clear()\n\n                # remove the merged partition\n                for j in range(self.spills):\n                    path = self._get_spill_dir(j)\n                    os.remove(os.path.join(path, str(i)))\n        finally:\n            self._cleanup()", "code_tokens": ["def", "_external_items", "(", "self", ")", ":", "assert", "not", "self", ".", "data", "if", "any", "(", "self", ".", "pdata", ")", ":", "self", ".", "_spill", "(", ")", "# disable partitioning and spilling when merge combiners from disk", "self", ".", "pdata", "=", "[", "]", "try", ":", "for", "i", "in", "range", "(", "self", ".", "partitions", ")", ":", "for", "v", "in", "self", ".", "_merged_items", "(", "i", ")", ":", "yield", "v", "self", ".", "data", ".", "clear", "(", ")", "# remove the merged partition", "for", "j", "in", "range", "(", "self", ".", "spills", ")", ":", "path", "=", "self", ".", "_get_spill_dir", "(", "j", ")", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "path", ",", "str", "(", "i", ")", ")", ")", "finally", ":", "self", ".", "_cleanup", "(", ")"], "docstring": "Return all partitioned items as iterator", "docstring_tokens": ["Return", "all", "partitioned", "items", "as", "iterator"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/shuffle.py#L345-L364", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/shuffle.py", "func_name": "ExternalMerger._recursive_merged_items", "original_string": "def _recursive_merged_items(self, index):\n        \"\"\"\n        merge the partitioned items and return the as iterator\n\n        If one partition can not be fit in memory, then them will be\n        partitioned and merged recursively.\n        \"\"\"\n        subdirs = [os.path.join(d, \"parts\", str(index)) for d in self.localdirs]\n        m = ExternalMerger(self.agg, self.memory_limit, self.serializer, subdirs,\n                           self.scale * self.partitions, self.partitions, self.batch)\n        m.pdata = [{} for _ in range(self.partitions)]\n        limit = self._next_limit()\n\n        for j in range(self.spills):\n            path = self._get_spill_dir(j)\n            p = os.path.join(path, str(index))\n            with open(p, 'rb') as f:\n                m.mergeCombiners(self.serializer.load_stream(f), 0)\n\n            if get_used_memory() > limit:\n                m._spill()\n                limit = self._next_limit()\n\n        return m._external_items()", "language": "python", "code": "def _recursive_merged_items(self, index):\n        \"\"\"\n        merge the partitioned items and return the as iterator\n\n        If one partition can not be fit in memory, then them will be\n        partitioned and merged recursively.\n        \"\"\"\n        subdirs = [os.path.join(d, \"parts\", str(index)) for d in self.localdirs]\n        m = ExternalMerger(self.agg, self.memory_limit, self.serializer, subdirs,\n                           self.scale * self.partitions, self.partitions, self.batch)\n        m.pdata = [{} for _ in range(self.partitions)]\n        limit = self._next_limit()\n\n        for j in range(self.spills):\n            path = self._get_spill_dir(j)\n            p = os.path.join(path, str(index))\n            with open(p, 'rb') as f:\n                m.mergeCombiners(self.serializer.load_stream(f), 0)\n\n            if get_used_memory() > limit:\n                m._spill()\n                limit = self._next_limit()\n\n        return m._external_items()", "code_tokens": ["def", "_recursive_merged_items", "(", "self", ",", "index", ")", ":", "subdirs", "=", "[", "os", ".", "path", ".", "join", "(", "d", ",", "\"parts\"", ",", "str", "(", "index", ")", ")", "for", "d", "in", "self", ".", "localdirs", "]", "m", "=", "ExternalMerger", "(", "self", ".", "agg", ",", "self", ".", "memory_limit", ",", "self", ".", "serializer", ",", "subdirs", ",", "self", ".", "scale", "*", "self", ".", "partitions", ",", "self", ".", "partitions", ",", "self", ".", "batch", ")", "m", ".", "pdata", "=", "[", "{", "}", "for", "_", "in", "range", "(", "self", ".", "partitions", ")", "]", "limit", "=", "self", ".", "_next_limit", "(", ")", "for", "j", "in", "range", "(", "self", ".", "spills", ")", ":", "path", "=", "self", ".", "_get_spill_dir", "(", "j", ")", "p", "=", "os", ".", "path", ".", "join", "(", "path", ",", "str", "(", "index", ")", ")", "with", "open", "(", "p", ",", "'rb'", ")", "as", "f", ":", "m", ".", "mergeCombiners", "(", "self", ".", "serializer", ".", "load_stream", "(", "f", ")", ",", "0", ")", "if", "get_used_memory", "(", ")", ">", "limit", ":", "m", ".", "_spill", "(", ")", "limit", "=", "self", ".", "_next_limit", "(", ")", "return", "m", ".", "_external_items", "(", ")"], "docstring": "merge the partitioned items and return the as iterator\n\n        If one partition can not be fit in memory, then them will be\n        partitioned and merged recursively.", "docstring_tokens": ["merge", "the", "partitioned", "items", "and", "return", "the", "as", "iterator"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/shuffle.py#L386-L409", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/shuffle.py", "func_name": "ExternalSorter._get_path", "original_string": "def _get_path(self, n):\n        \"\"\" Choose one directory for spill by number n \"\"\"\n        d = self.local_dirs[n % len(self.local_dirs)]\n        if not os.path.exists(d):\n            os.makedirs(d)\n        return os.path.join(d, str(n))", "language": "python", "code": "def _get_path(self, n):\n        \"\"\" Choose one directory for spill by number n \"\"\"\n        d = self.local_dirs[n % len(self.local_dirs)]\n        if not os.path.exists(d):\n            os.makedirs(d)\n        return os.path.join(d, str(n))", "code_tokens": ["def", "_get_path", "(", "self", ",", "n", ")", ":", "d", "=", "self", ".", "local_dirs", "[", "n", "%", "len", "(", "self", ".", "local_dirs", ")", "]", "if", "not", "os", ".", "path", ".", "exists", "(", "d", ")", ":", "os", ".", "makedirs", "(", "d", ")", "return", "os", ".", "path", ".", "join", "(", "d", ",", "str", "(", "n", ")", ")"], "docstring": "Choose one directory for spill by number n", "docstring_tokens": ["Choose", "one", "directory", "for", "spill", "by", "number", "n"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/shuffle.py#L440-L445", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/shuffle.py", "func_name": "ExternalSorter.sorted", "original_string": "def sorted(self, iterator, key=None, reverse=False):\n        \"\"\"\n        Sort the elements in iterator, do external sort when the memory\n        goes above the limit.\n        \"\"\"\n        global MemoryBytesSpilled, DiskBytesSpilled\n        batch, limit = 100, self._next_limit()\n        chunks, current_chunk = [], []\n        iterator = iter(iterator)\n        while True:\n            # pick elements in batch\n            chunk = list(itertools.islice(iterator, batch))\n            current_chunk.extend(chunk)\n            if len(chunk) < batch:\n                break\n\n            used_memory = get_used_memory()\n            if used_memory > limit:\n                # sort them inplace will save memory\n                current_chunk.sort(key=key, reverse=reverse)\n                path = self._get_path(len(chunks))\n                with open(path, 'wb') as f:\n                    self.serializer.dump_stream(current_chunk, f)\n\n                def load(f):\n                    for v in self.serializer.load_stream(f):\n                        yield v\n                    # close the file explicit once we consume all the items\n                    # to avoid ResourceWarning in Python3\n                    f.close()\n                chunks.append(load(open(path, 'rb')))\n                current_chunk = []\n                MemoryBytesSpilled += max(used_memory - get_used_memory(), 0) << 20\n                DiskBytesSpilled += os.path.getsize(path)\n                os.unlink(path)  # data will be deleted after close\n\n            elif not chunks:\n                batch = min(int(batch * 1.5), 10000)\n\n        current_chunk.sort(key=key, reverse=reverse)\n        if not chunks:\n            return current_chunk\n\n        if current_chunk:\n            chunks.append(iter(current_chunk))\n\n        return heapq.merge(chunks, key=key, reverse=reverse)", "language": "python", "code": "def sorted(self, iterator, key=None, reverse=False):\n        \"\"\"\n        Sort the elements in iterator, do external sort when the memory\n        goes above the limit.\n        \"\"\"\n        global MemoryBytesSpilled, DiskBytesSpilled\n        batch, limit = 100, self._next_limit()\n        chunks, current_chunk = [], []\n        iterator = iter(iterator)\n        while True:\n            # pick elements in batch\n            chunk = list(itertools.islice(iterator, batch))\n            current_chunk.extend(chunk)\n            if len(chunk) < batch:\n                break\n\n            used_memory = get_used_memory()\n            if used_memory > limit:\n                # sort them inplace will save memory\n                current_chunk.sort(key=key, reverse=reverse)\n                path = self._get_path(len(chunks))\n                with open(path, 'wb') as f:\n                    self.serializer.dump_stream(current_chunk, f)\n\n                def load(f):\n                    for v in self.serializer.load_stream(f):\n                        yield v\n                    # close the file explicit once we consume all the items\n                    # to avoid ResourceWarning in Python3\n                    f.close()\n                chunks.append(load(open(path, 'rb')))\n                current_chunk = []\n                MemoryBytesSpilled += max(used_memory - get_used_memory(), 0) << 20\n                DiskBytesSpilled += os.path.getsize(path)\n                os.unlink(path)  # data will be deleted after close\n\n            elif not chunks:\n                batch = min(int(batch * 1.5), 10000)\n\n        current_chunk.sort(key=key, reverse=reverse)\n        if not chunks:\n            return current_chunk\n\n        if current_chunk:\n            chunks.append(iter(current_chunk))\n\n        return heapq.merge(chunks, key=key, reverse=reverse)", "code_tokens": ["def", "sorted", "(", "self", ",", "iterator", ",", "key", "=", "None", ",", "reverse", "=", "False", ")", ":", "global", "MemoryBytesSpilled", ",", "DiskBytesSpilled", "batch", ",", "limit", "=", "100", ",", "self", ".", "_next_limit", "(", ")", "chunks", ",", "current_chunk", "=", "[", "]", ",", "[", "]", "iterator", "=", "iter", "(", "iterator", ")", "while", "True", ":", "# pick elements in batch", "chunk", "=", "list", "(", "itertools", ".", "islice", "(", "iterator", ",", "batch", ")", ")", "current_chunk", ".", "extend", "(", "chunk", ")", "if", "len", "(", "chunk", ")", "<", "batch", ":", "break", "used_memory", "=", "get_used_memory", "(", ")", "if", "used_memory", ">", "limit", ":", "# sort them inplace will save memory", "current_chunk", ".", "sort", "(", "key", "=", "key", ",", "reverse", "=", "reverse", ")", "path", "=", "self", ".", "_get_path", "(", "len", "(", "chunks", ")", ")", "with", "open", "(", "path", ",", "'wb'", ")", "as", "f", ":", "self", ".", "serializer", ".", "dump_stream", "(", "current_chunk", ",", "f", ")", "def", "load", "(", "f", ")", ":", "for", "v", "in", "self", ".", "serializer", ".", "load_stream", "(", "f", ")", ":", "yield", "v", "# close the file explicit once we consume all the items", "# to avoid ResourceWarning in Python3", "f", ".", "close", "(", ")", "chunks", ".", "append", "(", "load", "(", "open", "(", "path", ",", "'rb'", ")", ")", ")", "current_chunk", "=", "[", "]", "MemoryBytesSpilled", "+=", "max", "(", "used_memory", "-", "get_used_memory", "(", ")", ",", "0", ")", "<<", "20", "DiskBytesSpilled", "+=", "os", ".", "path", ".", "getsize", "(", "path", ")", "os", ".", "unlink", "(", "path", ")", "# data will be deleted after close", "elif", "not", "chunks", ":", "batch", "=", "min", "(", "int", "(", "batch", "*", "1.5", ")", ",", "10000", ")", "current_chunk", ".", "sort", "(", "key", "=", "key", ",", "reverse", "=", "reverse", ")", "if", "not", "chunks", ":", "return", "current_chunk", "if", "current_chunk", ":", "chunks", ".", "append", "(", "iter", "(", "current_chunk", ")", ")", "return", "heapq", ".", "merge", "(", "chunks", ",", "key", "=", "key", ",", "reverse", "=", "reverse", ")"], "docstring": "Sort the elements in iterator, do external sort when the memory\n        goes above the limit.", "docstring_tokens": ["Sort", "the", "elements", "in", "iterator", "do", "external", "sort", "when", "the", "memory", "goes", "above", "the", "limit", "."], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/shuffle.py#L455-L501", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/shuffle.py", "func_name": "ExternalList._spill", "original_string": "def _spill(self):\n        \"\"\" dump the values into disk \"\"\"\n        global MemoryBytesSpilled, DiskBytesSpilled\n        if self._file is None:\n            self._open_file()\n\n        used_memory = get_used_memory()\n        pos = self._file.tell()\n        self._ser.dump_stream(self.values, self._file)\n        self.values = []\n        gc.collect()\n        DiskBytesSpilled += self._file.tell() - pos\n        MemoryBytesSpilled += max(used_memory - get_used_memory(), 0) << 20", "language": "python", "code": "def _spill(self):\n        \"\"\" dump the values into disk \"\"\"\n        global MemoryBytesSpilled, DiskBytesSpilled\n        if self._file is None:\n            self._open_file()\n\n        used_memory = get_used_memory()\n        pos = self._file.tell()\n        self._ser.dump_stream(self.values, self._file)\n        self.values = []\n        gc.collect()\n        DiskBytesSpilled += self._file.tell() - pos\n        MemoryBytesSpilled += max(used_memory - get_used_memory(), 0) << 20", "code_tokens": ["def", "_spill", "(", "self", ")", ":", "global", "MemoryBytesSpilled", ",", "DiskBytesSpilled", "if", "self", ".", "_file", "is", "None", ":", "self", ".", "_open_file", "(", ")", "used_memory", "=", "get_used_memory", "(", ")", "pos", "=", "self", ".", "_file", ".", "tell", "(", ")", "self", ".", "_ser", ".", "dump_stream", "(", "self", ".", "values", ",", "self", ".", "_file", ")", "self", ".", "values", "=", "[", "]", "gc", ".", "collect", "(", ")", "DiskBytesSpilled", "+=", "self", ".", "_file", ".", "tell", "(", ")", "-", "pos", "MemoryBytesSpilled", "+=", "max", "(", "used_memory", "-", "get_used_memory", "(", ")", ",", "0", ")", "<<", "20"], "docstring": "dump the values into disk", "docstring_tokens": ["dump", "the", "values", "into", "disk"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/shuffle.py#L590-L602", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/shuffle.py", "func_name": "ExternalGroupBy._spill", "original_string": "def _spill(self):\n        \"\"\"\n        dump already partitioned data into disks.\n        \"\"\"\n        global MemoryBytesSpilled, DiskBytesSpilled\n        path = self._get_spill_dir(self.spills)\n        if not os.path.exists(path):\n            os.makedirs(path)\n\n        used_memory = get_used_memory()\n        if not self.pdata:\n            # The data has not been partitioned, it will iterator the\n            # data once, write them into different files, has no\n            # additional memory. It only called when the memory goes\n            # above limit at the first time.\n\n            # open all the files for writing\n            streams = [open(os.path.join(path, str(i)), 'wb')\n                       for i in range(self.partitions)]\n\n            # If the number of keys is small, then the overhead of sort is small\n            # sort them before dumping into disks\n            self._sorted = len(self.data) < self.SORT_KEY_LIMIT\n            if self._sorted:\n                self.serializer = self.flattened_serializer()\n                for k in sorted(self.data.keys()):\n                    h = self._partition(k)\n                    self.serializer.dump_stream([(k, self.data[k])], streams[h])\n            else:\n                for k, v in self.data.items():\n                    h = self._partition(k)\n                    self.serializer.dump_stream([(k, v)], streams[h])\n\n            for s in streams:\n                DiskBytesSpilled += s.tell()\n                s.close()\n\n            self.data.clear()\n            # self.pdata is cached in `mergeValues` and `mergeCombiners`\n            self.pdata.extend([{} for i in range(self.partitions)])\n\n        else:\n            for i in range(self.partitions):\n                p = os.path.join(path, str(i))\n                with open(p, \"wb\") as f:\n                    # dump items in batch\n                    if self._sorted:\n                        # sort by key only (stable)\n                        sorted_items = sorted(self.pdata[i].items(), key=operator.itemgetter(0))\n                        self.serializer.dump_stream(sorted_items, f)\n                    else:\n                        self.serializer.dump_stream(self.pdata[i].items(), f)\n                self.pdata[i].clear()\n                DiskBytesSpilled += os.path.getsize(p)\n\n        self.spills += 1\n        gc.collect()  # release the memory as much as possible\n        MemoryBytesSpilled += max(used_memory - get_used_memory(), 0) << 20", "language": "python", "code": "def _spill(self):\n        \"\"\"\n        dump already partitioned data into disks.\n        \"\"\"\n        global MemoryBytesSpilled, DiskBytesSpilled\n        path = self._get_spill_dir(self.spills)\n        if not os.path.exists(path):\n            os.makedirs(path)\n\n        used_memory = get_used_memory()\n        if not self.pdata:\n            # The data has not been partitioned, it will iterator the\n            # data once, write them into different files, has no\n            # additional memory. It only called when the memory goes\n            # above limit at the first time.\n\n            # open all the files for writing\n            streams = [open(os.path.join(path, str(i)), 'wb')\n                       for i in range(self.partitions)]\n\n            # If the number of keys is small, then the overhead of sort is small\n            # sort them before dumping into disks\n            self._sorted = len(self.data) < self.SORT_KEY_LIMIT\n            if self._sorted:\n                self.serializer = self.flattened_serializer()\n                for k in sorted(self.data.keys()):\n                    h = self._partition(k)\n                    self.serializer.dump_stream([(k, self.data[k])], streams[h])\n            else:\n                for k, v in self.data.items():\n                    h = self._partition(k)\n                    self.serializer.dump_stream([(k, v)], streams[h])\n\n            for s in streams:\n                DiskBytesSpilled += s.tell()\n                s.close()\n\n            self.data.clear()\n            # self.pdata is cached in `mergeValues` and `mergeCombiners`\n            self.pdata.extend([{} for i in range(self.partitions)])\n\n        else:\n            for i in range(self.partitions):\n                p = os.path.join(path, str(i))\n                with open(p, \"wb\") as f:\n                    # dump items in batch\n                    if self._sorted:\n                        # sort by key only (stable)\n                        sorted_items = sorted(self.pdata[i].items(), key=operator.itemgetter(0))\n                        self.serializer.dump_stream(sorted_items, f)\n                    else:\n                        self.serializer.dump_stream(self.pdata[i].items(), f)\n                self.pdata[i].clear()\n                DiskBytesSpilled += os.path.getsize(p)\n\n        self.spills += 1\n        gc.collect()  # release the memory as much as possible\n        MemoryBytesSpilled += max(used_memory - get_used_memory(), 0) << 20", "code_tokens": ["def", "_spill", "(", "self", ")", ":", "global", "MemoryBytesSpilled", ",", "DiskBytesSpilled", "path", "=", "self", ".", "_get_spill_dir", "(", "self", ".", "spills", ")", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "os", ".", "makedirs", "(", "path", ")", "used_memory", "=", "get_used_memory", "(", ")", "if", "not", "self", ".", "pdata", ":", "# The data has not been partitioned, it will iterator the", "# data once, write them into different files, has no", "# additional memory. It only called when the memory goes", "# above limit at the first time.", "# open all the files for writing", "streams", "=", "[", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "str", "(", "i", ")", ")", ",", "'wb'", ")", "for", "i", "in", "range", "(", "self", ".", "partitions", ")", "]", "# If the number of keys is small, then the overhead of sort is small", "# sort them before dumping into disks", "self", ".", "_sorted", "=", "len", "(", "self", ".", "data", ")", "<", "self", ".", "SORT_KEY_LIMIT", "if", "self", ".", "_sorted", ":", "self", ".", "serializer", "=", "self", ".", "flattened_serializer", "(", ")", "for", "k", "in", "sorted", "(", "self", ".", "data", ".", "keys", "(", ")", ")", ":", "h", "=", "self", ".", "_partition", "(", "k", ")", "self", ".", "serializer", ".", "dump_stream", "(", "[", "(", "k", ",", "self", ".", "data", "[", "k", "]", ")", "]", ",", "streams", "[", "h", "]", ")", "else", ":", "for", "k", ",", "v", "in", "self", ".", "data", ".", "items", "(", ")", ":", "h", "=", "self", ".", "_partition", "(", "k", ")", "self", ".", "serializer", ".", "dump_stream", "(", "[", "(", "k", ",", "v", ")", "]", ",", "streams", "[", "h", "]", ")", "for", "s", "in", "streams", ":", "DiskBytesSpilled", "+=", "s", ".", "tell", "(", ")", "s", ".", "close", "(", ")", "self", ".", "data", ".", "clear", "(", ")", "# self.pdata is cached in `mergeValues` and `mergeCombiners`", "self", ".", "pdata", ".", "extend", "(", "[", "{", "}", "for", "i", "in", "range", "(", "self", ".", "partitions", ")", "]", ")", "else", ":", "for", "i", "in", "range", "(", "self", ".", "partitions", ")", ":", "p", "=", "os", ".", "path", ".", "join", "(", "path", ",", "str", "(", "i", ")", ")", "with", "open", "(", "p", ",", "\"wb\"", ")", "as", "f", ":", "# dump items in batch", "if", "self", ".", "_sorted", ":", "# sort by key only (stable)", "sorted_items", "=", "sorted", "(", "self", ".", "pdata", "[", "i", "]", ".", "items", "(", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "0", ")", ")", "self", ".", "serializer", ".", "dump_stream", "(", "sorted_items", ",", "f", ")", "else", ":", "self", ".", "serializer", ".", "dump_stream", "(", "self", ".", "pdata", "[", "i", "]", ".", "items", "(", ")", ",", "f", ")", "self", ".", "pdata", "[", "i", "]", ".", "clear", "(", ")", "DiskBytesSpilled", "+=", "os", ".", "path", ".", "getsize", "(", "p", ")", "self", ".", "spills", "+=", "1", "gc", ".", "collect", "(", ")", "# release the memory as much as possible", "MemoryBytesSpilled", "+=", "max", "(", "used_memory", "-", "get_used_memory", "(", ")", ",", "0", ")", "<<", "20"], "docstring": "dump already partitioned data into disks.", "docstring_tokens": ["dump", "already", "partitioned", "data", "into", "disks", "."], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/shuffle.py#L709-L766", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/shuffle.py", "func_name": "ExternalGroupBy._merge_sorted_items", "original_string": "def _merge_sorted_items(self, index):\n        \"\"\" load a partition from disk, then sort and group by key \"\"\"\n        def load_partition(j):\n            path = self._get_spill_dir(j)\n            p = os.path.join(path, str(index))\n            with open(p, 'rb', 65536) as f:\n                for v in self.serializer.load_stream(f):\n                    yield v\n\n        disk_items = [load_partition(j) for j in range(self.spills)]\n\n        if self._sorted:\n            # all the partitions are already sorted\n            sorted_items = heapq.merge(disk_items, key=operator.itemgetter(0))\n\n        else:\n            # Flatten the combined values, so it will not consume huge\n            # memory during merging sort.\n            ser = self.flattened_serializer()\n            sorter = ExternalSorter(self.memory_limit, ser)\n            sorted_items = sorter.sorted(itertools.chain(*disk_items),\n                                         key=operator.itemgetter(0))\n        return ((k, vs) for k, vs in GroupByKey(sorted_items))", "language": "python", "code": "def _merge_sorted_items(self, index):\n        \"\"\" load a partition from disk, then sort and group by key \"\"\"\n        def load_partition(j):\n            path = self._get_spill_dir(j)\n            p = os.path.join(path, str(index))\n            with open(p, 'rb', 65536) as f:\n                for v in self.serializer.load_stream(f):\n                    yield v\n\n        disk_items = [load_partition(j) for j in range(self.spills)]\n\n        if self._sorted:\n            # all the partitions are already sorted\n            sorted_items = heapq.merge(disk_items, key=operator.itemgetter(0))\n\n        else:\n            # Flatten the combined values, so it will not consume huge\n            # memory during merging sort.\n            ser = self.flattened_serializer()\n            sorter = ExternalSorter(self.memory_limit, ser)\n            sorted_items = sorter.sorted(itertools.chain(*disk_items),\n                                         key=operator.itemgetter(0))\n        return ((k, vs) for k, vs in GroupByKey(sorted_items))", "code_tokens": ["def", "_merge_sorted_items", "(", "self", ",", "index", ")", ":", "def", "load_partition", "(", "j", ")", ":", "path", "=", "self", ".", "_get_spill_dir", "(", "j", ")", "p", "=", "os", ".", "path", ".", "join", "(", "path", ",", "str", "(", "index", ")", ")", "with", "open", "(", "p", ",", "'rb'", ",", "65536", ")", "as", "f", ":", "for", "v", "in", "self", ".", "serializer", ".", "load_stream", "(", "f", ")", ":", "yield", "v", "disk_items", "=", "[", "load_partition", "(", "j", ")", "for", "j", "in", "range", "(", "self", ".", "spills", ")", "]", "if", "self", ".", "_sorted", ":", "# all the partitions are already sorted", "sorted_items", "=", "heapq", ".", "merge", "(", "disk_items", ",", "key", "=", "operator", ".", "itemgetter", "(", "0", ")", ")", "else", ":", "# Flatten the combined values, so it will not consume huge", "# memory during merging sort.", "ser", "=", "self", ".", "flattened_serializer", "(", ")", "sorter", "=", "ExternalSorter", "(", "self", ".", "memory_limit", ",", "ser", ")", "sorted_items", "=", "sorter", ".", "sorted", "(", "itertools", ".", "chain", "(", "*", "disk_items", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "0", ")", ")", "return", "(", "(", "k", ",", "vs", ")", "for", "k", ",", "vs", "in", "GroupByKey", "(", "sorted_items", ")", ")"], "docstring": "load a partition from disk, then sort and group by key", "docstring_tokens": ["load", "a", "partition", "from", "disk", "then", "sort", "and", "group", "by", "key"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/shuffle.py#L786-L808", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/daemon.py", "func_name": "worker", "original_string": "def worker(sock, authenticated):\n    \"\"\"\n    Called by a worker process after the fork().\n    \"\"\"\n    signal.signal(SIGHUP, SIG_DFL)\n    signal.signal(SIGCHLD, SIG_DFL)\n    signal.signal(SIGTERM, SIG_DFL)\n    # restore the handler for SIGINT,\n    # it's useful for debugging (show the stacktrace before exit)\n    signal.signal(SIGINT, signal.default_int_handler)\n\n    # Read the socket using fdopen instead of socket.makefile() because the latter\n    # seems to be very slow; note that we need to dup() the file descriptor because\n    # otherwise writes also cause a seek that makes us miss data on the read side.\n    infile = os.fdopen(os.dup(sock.fileno()), \"rb\", 65536)\n    outfile = os.fdopen(os.dup(sock.fileno()), \"wb\", 65536)\n\n    if not authenticated:\n        client_secret = UTF8Deserializer().loads(infile)\n        if os.environ[\"PYTHON_WORKER_FACTORY_SECRET\"] == client_secret:\n            write_with_length(\"ok\".encode(\"utf-8\"), outfile)\n            outfile.flush()\n        else:\n            write_with_length(\"err\".encode(\"utf-8\"), outfile)\n            outfile.flush()\n            sock.close()\n            return 1\n\n    exit_code = 0\n    try:\n        worker_main(infile, outfile)\n    except SystemExit as exc:\n        exit_code = compute_real_exit_code(exc.code)\n    finally:\n        try:\n            outfile.flush()\n        except Exception:\n            pass\n    return exit_code", "language": "python", "code": "def worker(sock, authenticated):\n    \"\"\"\n    Called by a worker process after the fork().\n    \"\"\"\n    signal.signal(SIGHUP, SIG_DFL)\n    signal.signal(SIGCHLD, SIG_DFL)\n    signal.signal(SIGTERM, SIG_DFL)\n    # restore the handler for SIGINT,\n    # it's useful for debugging (show the stacktrace before exit)\n    signal.signal(SIGINT, signal.default_int_handler)\n\n    # Read the socket using fdopen instead of socket.makefile() because the latter\n    # seems to be very slow; note that we need to dup() the file descriptor because\n    # otherwise writes also cause a seek that makes us miss data on the read side.\n    infile = os.fdopen(os.dup(sock.fileno()), \"rb\", 65536)\n    outfile = os.fdopen(os.dup(sock.fileno()), \"wb\", 65536)\n\n    if not authenticated:\n        client_secret = UTF8Deserializer().loads(infile)\n        if os.environ[\"PYTHON_WORKER_FACTORY_SECRET\"] == client_secret:\n            write_with_length(\"ok\".encode(\"utf-8\"), outfile)\n            outfile.flush()\n        else:\n            write_with_length(\"err\".encode(\"utf-8\"), outfile)\n            outfile.flush()\n            sock.close()\n            return 1\n\n    exit_code = 0\n    try:\n        worker_main(infile, outfile)\n    except SystemExit as exc:\n        exit_code = compute_real_exit_code(exc.code)\n    finally:\n        try:\n            outfile.flush()\n        except Exception:\n            pass\n    return exit_code", "code_tokens": ["def", "worker", "(", "sock", ",", "authenticated", ")", ":", "signal", ".", "signal", "(", "SIGHUP", ",", "SIG_DFL", ")", "signal", ".", "signal", "(", "SIGCHLD", ",", "SIG_DFL", ")", "signal", ".", "signal", "(", "SIGTERM", ",", "SIG_DFL", ")", "# restore the handler for SIGINT,", "# it's useful for debugging (show the stacktrace before exit)", "signal", ".", "signal", "(", "SIGINT", ",", "signal", ".", "default_int_handler", ")", "# Read the socket using fdopen instead of socket.makefile() because the latter", "# seems to be very slow; note that we need to dup() the file descriptor because", "# otherwise writes also cause a seek that makes us miss data on the read side.", "infile", "=", "os", ".", "fdopen", "(", "os", ".", "dup", "(", "sock", ".", "fileno", "(", ")", ")", ",", "\"rb\"", ",", "65536", ")", "outfile", "=", "os", ".", "fdopen", "(", "os", ".", "dup", "(", "sock", ".", "fileno", "(", ")", ")", ",", "\"wb\"", ",", "65536", ")", "if", "not", "authenticated", ":", "client_secret", "=", "UTF8Deserializer", "(", ")", ".", "loads", "(", "infile", ")", "if", "os", ".", "environ", "[", "\"PYTHON_WORKER_FACTORY_SECRET\"", "]", "==", "client_secret", ":", "write_with_length", "(", "\"ok\"", ".", "encode", "(", "\"utf-8\"", ")", ",", "outfile", ")", "outfile", ".", "flush", "(", ")", "else", ":", "write_with_length", "(", "\"err\"", ".", "encode", "(", "\"utf-8\"", ")", ",", "outfile", ")", "outfile", ".", "flush", "(", ")", "sock", ".", "close", "(", ")", "return", "1", "exit_code", "=", "0", "try", ":", "worker_main", "(", "infile", ",", "outfile", ")", "except", "SystemExit", "as", "exc", ":", "exit_code", "=", "compute_real_exit_code", "(", "exc", ".", "code", ")", "finally", ":", "try", ":", "outfile", ".", "flush", "(", ")", "except", "Exception", ":", "pass", "return", "exit_code"], "docstring": "Called by a worker process after the fork().", "docstring_tokens": ["Called", "by", "a", "worker", "process", "after", "the", "fork", "()", "."], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/daemon.py#L43-L81", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/rdd.py", "func_name": "portable_hash", "original_string": "def portable_hash(x):\n    \"\"\"\n    This function returns consistent hash code for builtin types, especially\n    for None and tuple with None.\n\n    The algorithm is similar to that one used by CPython 2.7\n\n    >>> portable_hash(None)\n    0\n    >>> portable_hash((None, 1)) & 0xffffffff\n    219750521\n    \"\"\"\n\n    if sys.version_info >= (3, 2, 3) and 'PYTHONHASHSEED' not in os.environ:\n        raise Exception(\"Randomness of hash of string should be disabled via PYTHONHASHSEED\")\n\n    if x is None:\n        return 0\n    if isinstance(x, tuple):\n        h = 0x345678\n        for i in x:\n            h ^= portable_hash(i)\n            h *= 1000003\n            h &= sys.maxsize\n        h ^= len(x)\n        if h == -1:\n            h = -2\n        return int(h)\n    return hash(x)", "language": "python", "code": "def portable_hash(x):\n    \"\"\"\n    This function returns consistent hash code for builtin types, especially\n    for None and tuple with None.\n\n    The algorithm is similar to that one used by CPython 2.7\n\n    >>> portable_hash(None)\n    0\n    >>> portable_hash((None, 1)) & 0xffffffff\n    219750521\n    \"\"\"\n\n    if sys.version_info >= (3, 2, 3) and 'PYTHONHASHSEED' not in os.environ:\n        raise Exception(\"Randomness of hash of string should be disabled via PYTHONHASHSEED\")\n\n    if x is None:\n        return 0\n    if isinstance(x, tuple):\n        h = 0x345678\n        for i in x:\n            h ^= portable_hash(i)\n            h *= 1000003\n            h &= sys.maxsize\n        h ^= len(x)\n        if h == -1:\n            h = -2\n        return int(h)\n    return hash(x)", "code_tokens": ["def", "portable_hash", "(", "x", ")", ":", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "2", ",", "3", ")", "and", "'PYTHONHASHSEED'", "not", "in", "os", ".", "environ", ":", "raise", "Exception", "(", "\"Randomness of hash of string should be disabled via PYTHONHASHSEED\"", ")", "if", "x", "is", "None", ":", "return", "0", "if", "isinstance", "(", "x", ",", "tuple", ")", ":", "h", "=", "0x345678", "for", "i", "in", "x", ":", "h", "^=", "portable_hash", "(", "i", ")", "h", "*=", "1000003", "h", "&=", "sys", ".", "maxsize", "h", "^=", "len", "(", "x", ")", "if", "h", "==", "-", "1", ":", "h", "=", "-", "2", "return", "int", "(", "h", ")", "return", "hash", "(", "x", ")"], "docstring": "This function returns consistent hash code for builtin types, especially\n    for None and tuple with None.\n\n    The algorithm is similar to that one used by CPython 2.7\n\n    >>> portable_hash(None)\n    0\n    >>> portable_hash((None, 1)) & 0xffffffff\n    219750521", "docstring_tokens": ["This", "function", "returns", "consistent", "hash", "code", "for", "builtin", "types", "especially", "for", "None", "and", "tuple", "with", "None", "."], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/rdd.py#L78-L106", "partition": "train"}
{"repo": "apache/spark", "path": "python/pyspark/rdd.py", "func_name": "_parse_memory", "original_string": "def _parse_memory(s):\n    \"\"\"\n    Parse a memory string in the format supported by Java (e.g. 1g, 200m) and\n    return the value in MiB\n\n    >>> _parse_memory(\"256m\")\n    256\n    >>> _parse_memory(\"2g\")\n    2048\n    \"\"\"\n    units = {'g': 1024, 'm': 1, 't': 1 << 20, 'k': 1.0 / 1024}\n    if s[-1].lower() not in units:\n        raise ValueError(\"invalid format: \" + s)\n    return int(float(s[:-1]) * units[s[-1].lower()])", "language": "python", "code": "def _parse_memory(s):\n    \"\"\"\n    Parse a memory string in the format supported by Java (e.g. 1g, 200m) and\n    return the value in MiB\n\n    >>> _parse_memory(\"256m\")\n    256\n    >>> _parse_memory(\"2g\")\n    2048\n    \"\"\"\n    units = {'g': 1024, 'm': 1, 't': 1 << 20, 'k': 1.0 / 1024}\n    if s[-1].lower() not in units:\n        raise ValueError(\"invalid format: \" + s)\n    return int(float(s[:-1]) * units[s[-1].lower()])", "code_tokens": ["def", "_parse_memory", "(", "s", ")", ":", "units", "=", "{", "'g'", ":", "1024", ",", "'m'", ":", "1", ",", "'t'", ":", "1", "<<", "20", ",", "'k'", ":", "1.0", "/", "1024", "}", "if", "s", "[", "-", "1", "]", ".", "lower", "(", ")", "not", "in", "units", ":", "raise", "ValueError", "(", "\"invalid format: \"", "+", "s", ")", "return", "int", "(", "float", "(", "s", "[", ":", "-", "1", "]", ")", "*", "units", "[", "s", "[", "-", "1", "]", ".", "lower", "(", ")", "]", ")"], "docstring": "Parse a memory string in the format supported by Java (e.g. 1g, 200m) and\n    return the value in MiB\n\n    >>> _parse_memory(\"256m\")\n    256\n    >>> _parse_memory(\"2g\")\n    2048", "docstring_tokens": ["Parse", "a", "memory", "string", "in", "the", "format", "supported", "by", "Java", "(", "e", ".", "g", ".", "1g", "200m", ")", "and", "return", "the", "value", "in", "MiB"], "sha": "618d6bff71073c8c93501ab7392c3cc579730f0b", "url": "https://github.com/apache/spark/blob/618d6bff71073c8c93501ab7392c3cc579730f0b/python/pyspark/rdd.py#L125-L138", "partition": "train"}
